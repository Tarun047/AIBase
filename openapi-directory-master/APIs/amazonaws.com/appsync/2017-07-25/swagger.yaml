swagger: '2.0'
info:
  version: '2017-07-25'
  x-release: v4
  title: AWS AppSync
  description: AWS AppSync provides API actions for creating and interacting with data sources using GraphQL from your application.
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: appsync
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/appsync-2017-07-25.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/appsync/'
host: appsync.amazonaws.com
basePath: /
schemes:
  - https
  - http
x-servers:
  - url: 'http://appsync.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWSAppSync multi-region endpoint
  - url: 'https://appsync.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWSAppSync multi-region endpoint
  - url: 'http://appsync.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWSAppSync endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://appsync.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWSAppSync endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
consumes:
  - application/json
produces:
  - application/json
parameters:
  X-Amz-Content-Sha256:
    name: X-Amz-Content-Sha256
    in: header
    type: string
    required: false
  X-Amz-Date:
    name: X-Amz-Date
    in: header
    type: string
    required: false
  X-Amz-Algorithm:
    name: X-Amz-Algorithm
    in: header
    type: string
    required: false
  X-Amz-Credential:
    name: X-Amz-Credential
    in: header
    type: string
    required: false
  X-Amz-Security-Token:
    name: X-Amz-Security-Token
    in: header
    type: string
    required: false
  X-Amz-Signature:
    name: X-Amz-Signature
    in: header
    type: string
    required: false
  X-Amz-SignedHeaders:
    name: X-Amz-SignedHeaders
    in: header
    type: string
    required: false
securityDefinitions:
  hmac:
    type: apiKey
    name: Authorization
    in: header
    description: Amazon Signature authorization v4
    x-amazon-apigateway-authtype: awsSigv4
security:
  - hmac: []
paths:
  '/v1/apis/{apiId}/ApiCaches':
    post:
      operationId: CreateApiCache
      description: Creates a cache for the GraphQL API.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateApiCacheResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The GraphQL API Id.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - ttl
              - apiCachingBehavior
              - type
            properties:
              ttl:
                description: <p>TTL in seconds for cache entries.</p> <p>Valid values are between 1 and 3600 seconds.</p>
                type: integer
              transitEncryptionEnabled:
                description: Transit encryption flag when connecting to cache. This setting cannot be updated after creation.
                type: boolean
              atRestEncryptionEnabled:
                description: At rest encryption flag for cache. This setting cannot be updated after creation.
                type: boolean
              apiCachingBehavior:
                description: '<p>Caching behavior.</p> <ul> <li> <p> <b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</p> </li> <li> <p> <b>PER_RESOLVER_CACHING</b>: Individual resovlers that you specify are cached.</p> </li> </ul>'
                type: string
                enum:
                  - FULL_REQUEST_CACHING
                  - PER_RESOLVER_CACHING
              type:
                description: '<p>The cache instance type.</p> <ul> <li> <p> <b>T2_SMALL</b>: A t2.small instance type.</p> </li> <li> <p> <b>T2_MEDIUM</b>: A t2.medium instance type.</p> </li> <li> <p> <b>R4_LARGE</b>: A r4.large instance type.</p> </li> <li> <p> <b>R4_XLARGE</b>: A r4.xlarge instance type.</p> </li> <li> <p> <b>R4_2XLARGE</b>: A r4.2xlarge instance type.</p> </li> <li> <p> <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p> </li> <li> <p> <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p> </li> </ul>'
                type: string
                enum:
                  - T2_SMALL
                  - T2_MEDIUM
                  - R4_LARGE
                  - R4_XLARGE
                  - R4_2XLARGE
                  - R4_4XLARGE
                  - R4_8XLARGE
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    delete:
      operationId: DeleteApiCache
      description: Deletes an <code>ApiCache</code> object.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteApiCacheResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          type: string
    get:
      operationId: GetApiCache
      description: Retrieves an <code>ApiCache</code> object.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetApiCacheResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          type: string
  '/v1/apis/{apiId}/apikeys':
    post:
      operationId: CreateApiKey
      description: Creates a unique key that you can distribute to clients who are executing your API.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateApiKeyResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '486':
          description: ApiKeyLimitExceededException
          schema:
            $ref: '#/definitions/ApiKeyLimitExceededException'
        '487':
          description: ApiKeyValidityOutOfBoundsException
          schema:
            $ref: '#/definitions/ApiKeyValidityOutOfBoundsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The ID for your GraphQL API.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              description:
                description: A description of the purpose of the API key.
                type: string
              expires:
                description: 'The time from creation time after which the API key expires. The date is represented as seconds since the epoch, rounded down to the nearest hour. The default value for this parameter is 7 days from creation time. For more information, see .'
                type: integer
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListApiKeys
      description: '<p>Lists the API keys for a given API.</p> <note> <p>API keys are deleted automatically sometime after they expire. However, they may still be included in the response until they have actually been deleted. You can safely call <code>DeleteApiKey</code> to manually delete a key before it''s automatically deleted.</p> </note>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListApiKeysResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          type: string
        - name: nextToken
          in: query
          required: false
          description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
          type: string
          pattern: '[\\S]+'
          minLength: 1
          maxLength: 65536
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results you want the request to return.
          type: integer
          minimum: 0
          maximum: 25
  '/v1/apis/{apiId}/datasources':
    post:
      operationId: CreateDataSource
      description: Creates a <code>DataSource</code> object.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateDataSourceResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID for the GraphQL API for the <code>DataSource</code>.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - name
              - type
              - dynamodbConfig
              - lambdaConfig
              - elasticsearchConfig
            properties:
              name:
                description: A user-supplied name for the <code>DataSource</code>.
                type: string
                pattern: '[_A-Za-z][_0-9A-Za-z]*'
                minLength: 1
                maxLength: 65536
              description:
                description: A description of the <code>DataSource</code>.
                type: string
              type:
                description: The type of the <code>DataSource</code>.
                type: string
                enum:
                  - AWS_LAMBDA
                  - AMAZON_DYNAMODB
                  - AMAZON_ELASTICSEARCH
                  - NONE
                  - HTTP
                  - RELATIONAL_DATABASE
              serviceRoleArn:
                description: The AWS IAM service role ARN for the data source. The system assumes this role when accessing the data source.
                type: string
              dynamodbConfig:
                description: Describes an Amazon DynamoDB data source configuration.
                type: object
                properties:
                  tableName:
                    $ref: '#/definitions/String'
                    description: The table name.
                  awsRegion:
                    $ref: '#/definitions/String'
                    description: The AWS Region.
                  useCallerCredentials:
                    $ref: '#/definitions/Boolean'
                    description: Set to TRUE to use Amazon Cognito credentials with this data source.
                  deltaSyncConfig:
                    $ref: '#/definitions/DeltaSyncConfig'
                    description: The <code>DeltaSyncConfig</code> for a versioned datasource.
                  versioned:
                    $ref: '#/definitions/Boolean'
                    description: Set to TRUE to use Conflict Detection and Resolution with this data source.
              lambdaConfig:
                description: Describes an AWS Lambda data source configuration.
                type: object
                properties:
                  lambdaFunctionArn:
                    $ref: '#/definitions/String'
                    description: The ARN for the Lambda function.
              elasticsearchConfig:
                description: Describes an Elasticsearch data source configuration.
                type: object
                properties:
                  endpoint:
                    $ref: '#/definitions/String'
                    description: The endpoint.
                  awsRegion:
                    $ref: '#/definitions/String'
                    description: The AWS Region.
              httpConfig:
                description: Describes an HTTP data source configuration.
                type: object
                properties:
                  endpoint:
                    $ref: '#/definitions/String'
                    description: 'The HTTP URL endpoint. You can either specify the domain name or IP, and port combination, and the URL scheme must be HTTP or HTTPS. If the port is not specified, AWS AppSync uses the default port 80 for the HTTP endpoint and port 443 for HTTPS endpoints.'
                  authorizationConfig:
                    $ref: '#/definitions/AuthorizationConfig'
                    description: The authorization config in case the HTTP endpoint requires authorization.
              relationalDatabaseConfig:
                description: Describes a relational database data source configuration.
                type: object
                properties:
                  relationalDatabaseSourceType:
                    $ref: '#/definitions/RelationalDatabaseSourceType'
                    description: '<p>Source type for the relational database.</p> <ul> <li> <p> <b>RDS_HTTP_ENDPOINT</b>: The relational database source type is an Amazon RDS HTTP endpoint.</p> </li> </ul>'
                  rdsHttpEndpointConfig:
                    $ref: '#/definitions/RdsHttpEndpointConfig'
                    description: Amazon RDS HTTP endpoint settings.
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListDataSources
      description: Lists the data sources for a given API.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListDataSourcesResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          type: string
        - name: nextToken
          in: query
          required: false
          description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list. '
          type: string
          pattern: '[\\S]+'
          minLength: 1
          maxLength: 65536
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results you want the request to return.
          type: integer
          minimum: 0
          maximum: 25
  '/v1/apis/{apiId}/functions':
    post:
      operationId: CreateFunction
      description: <p>Creates a <code>Function</code> object.</p> <p>A function is a reusable entity. Multiple functions can be used to compose the resolver logic.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateFunctionResponse'
        '480':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The GraphQL API ID.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - name
              - dataSourceName
              - requestMappingTemplate
              - functionVersion
            properties:
              name:
                description: The <code>Function</code> name. The function name does not have to be unique.
                type: string
                pattern: '[_A-Za-z][_0-9A-Za-z]*'
                minLength: 1
                maxLength: 65536
              description:
                description: The <code>Function</code> description.
                type: string
              dataSourceName:
                description: The <code>Function</code> <code>DataSource</code> name.
                type: string
                pattern: '[_A-Za-z][_0-9A-Za-z]*'
                minLength: 1
                maxLength: 65536
              requestMappingTemplate:
                description: The <code>Function</code> request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
                type: string
                minLength: 1
                maxLength: 65536
              responseMappingTemplate:
                description: 'The <code>Function</code> response mapping template. '
                type: string
                minLength: 1
                maxLength: 65536
              functionVersion:
                description: 'The <code>version</code> of the request mapping template. Currently the supported value is 2018-05-29. '
                type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListFunctions
      description: List multiple functions.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListFunctionsResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The GraphQL API ID.
          type: string
        - name: nextToken
          in: query
          required: false
          description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
          type: string
          pattern: '[\\S]+'
          minLength: 1
          maxLength: 65536
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results you want the request to return.
          type: integer
          minimum: 0
          maximum: 25
  /v1/apis:
    post:
      operationId: CreateGraphqlApi
      description: Creates a <code>GraphqlApi</code> object.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateGraphqlApiResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '482':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '485':
          description: ApiLimitExceededException
          schema:
            $ref: '#/definitions/ApiLimitExceededException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - name
              - logConfig
              - authenticationType
              - userPoolConfig
              - openIDConnectConfig
            properties:
              name:
                description: A user-supplied name for the <code>GraphqlApi</code>.
                type: string
              logConfig:
                description: The CloudWatch Logs configuration.
                type: object
                properties:
                  fieldLogLevel:
                    $ref: '#/definitions/FieldLogLevel'
                    description: '<p>The field logging level. Values can be NONE, ERROR, or ALL. </p> <ul> <li> <p> <b>NONE</b>: No field-level logs are captured.</p> </li> <li> <p> <b>ERROR</b>: Logs the following information only for the fields that are in error:</p> <ul> <li> <p>The error section in the server response.</p> </li> <li> <p>Field-level errors.</p> </li> <li> <p>The generated request/response functions that got resolved for error fields.</p> </li> </ul> </li> <li> <p> <b>ALL</b>: The following information is logged for all fields in the query:</p> <ul> <li> <p>Field-level tracing information.</p> </li> <li> <p>The generated request/response functions that got resolved for each field.</p> </li> </ul> </li> </ul>'
                  cloudWatchLogsRoleArn:
                    $ref: '#/definitions/String'
                    description: 'The service role that AWS AppSync will assume to publish to Amazon CloudWatch logs in your account. '
                  excludeVerboseContent:
                    $ref: '#/definitions/Boolean'
                    description: 'Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging level.'
              authenticationType:
                description: 'The authentication type: API key, AWS IAM, OIDC, or Amazon Cognito user pools.'
                type: string
                enum:
                  - API_KEY
                  - AWS_IAM
                  - AMAZON_COGNITO_USER_POOLS
                  - OPENID_CONNECT
              userPoolConfig:
                description: Describes an Amazon Cognito user pool configuration.
                type: object
                properties:
                  userPoolId:
                    $ref: '#/definitions/String'
                    description: The user pool ID.
                  awsRegion:
                    $ref: '#/definitions/String'
                    description: The AWS Region in which the user pool was created.
                  defaultAction:
                    $ref: '#/definitions/DefaultAction'
                    description: The action that you want your GraphQL API to take when a request that uses Amazon Cognito user pool authentication doesn't match the Amazon Cognito user pool configuration.
                  appIdClientRegex:
                    $ref: '#/definitions/String'
                    description: A regular expression for validating the incoming Amazon Cognito user pool app client ID.
              openIDConnectConfig:
                description: Describes an OpenID Connect configuration.
                type: object
                properties:
                  issuer:
                    $ref: '#/definitions/String'
                    description: The issuer for the OpenID Connect configuration. The issuer returned by discovery must exactly match the value of <code>iss</code> in the ID token.
                  clientId:
                    $ref: '#/definitions/String'
                    description: The client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.
                  iatTTL:
                    $ref: '#/definitions/Long'
                    description: The number of milliseconds a token is valid after being issued to a user.
                  authTTL:
                    $ref: '#/definitions/Long'
                    description: The number of milliseconds a token is valid after being authenticated.
              tags:
                description: A map with keys of <code>TagKey</code> objects and values of <code>TagValue</code> objects.
                type: object
                minProperties: 1
                maxProperties: 50
                additionalProperties:
                  $ref: '#/definitions/TagValue'
              additionalAuthenticationProviders:
                description: A list of additional authentication providers for the <code>GraphqlApi</code> API.
                type: array
                items:
                  $ref: '#/definitions/AdditionalAuthenticationProvider'
              xrayEnabled:
                description: A flag indicating whether to enable X-Ray tracing for the <code>GraphqlApi</code>.
                type: boolean
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListGraphqlApis
      description: Lists your GraphQL APIs.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListGraphqlApisResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '482':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: nextToken
          in: query
          required: false
          description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list. '
          type: string
          pattern: '[\\S]+'
          minLength: 1
          maxLength: 65536
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results you want the request to return.
          type: integer
          minimum: 0
          maximum: 25
  '/v1/apis/{apiId}/types/{typeName}/resolvers':
    post:
      operationId: CreateResolver
      description: <p>Creates a <code>Resolver</code> object.</p> <p>A resolver converts incoming requests into a format that a data source can understand and converts the data source's responses into GraphQL.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateResolverResponse'
        '480':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The ID for the GraphQL API for which the resolver is being created.
          type: string
        - name: typeName
          in: path
          required: true
          description: The name of the <code>Type</code>.
          type: string
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          minLength: 1
          maxLength: 65536
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - fieldName
              - requestMappingTemplate
            properties:
              fieldName:
                description: The name of the field to attach the resolver to.
                type: string
                pattern: '[_A-Za-z][_0-9A-Za-z]*'
                minLength: 1
                maxLength: 65536
              dataSourceName:
                description: The name of the data source for which the resolver is being created.
                type: string
                pattern: '[_A-Za-z][_0-9A-Za-z]*'
                minLength: 1
                maxLength: 65536
              requestMappingTemplate:
                description: <p>The mapping template to be used for requests.</p> <p>A resolver uses a request mapping template to convert a GraphQL expression into a format that a data source can understand. Mapping templates are written in Apache Velocity Template Language (VTL).</p>
                type: string
                minLength: 1
                maxLength: 65536
              responseMappingTemplate:
                description: The mapping template to be used for responses from the data source.
                type: string
                minLength: 1
                maxLength: 65536
              kind:
                description: '<p>The resolver type.</p> <ul> <li> <p> <b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default resolver type. A UNIT resolver enables you to execute a GraphQL query against a single data source.</p> </li> <li> <p> <b>PIPELINE</b>: A PIPELINE resolver type. A PIPELINE resolver enables you to execute a series of <code>Function</code> in a serial manner. You can use a pipeline resolver to execute a GraphQL query against multiple data sources.</p> </li> </ul>'
                type: string
                enum:
                  - UNIT
                  - PIPELINE
              pipelineConfig:
                description: The pipeline configuration for a resolver of kind <code>PIPELINE</code>.
                type: object
                properties:
                  functions:
                    $ref: '#/definitions/FunctionsIds'
                    description: A list of <code>Function</code> objects.
              syncConfig:
                description: <p>Describes a Sync configuration for a resolver.</p> <p>Contains information on which Conflict Detection as well as Resolution strategy should be performed when the resolver is invoked.</p>
                type: object
                properties:
                  conflictHandler:
                    $ref: '#/definitions/ConflictHandlerType'
                    description: '<p>The Conflict Resolution strategy to perform in the event of a conflict.</p> <ul> <li> <p> <b>OPTIMISTIC_CONCURRENCY</b>: Resolve conflicts by rejecting mutations when versions do not match the latest version at the server.</p> </li> <li> <p> <b>AUTOMERGE</b>: Resolve conflicts with the Automerge conflict resolution strategy.</p> </li> <li> <p> <b>LAMBDA</b>: Resolve conflicts with a Lambda function supplied in the LambdaConflictHandlerConfig.</p> </li> </ul>'
                  conflictDetection:
                    $ref: '#/definitions/ConflictDetectionType'
                    description: '<p>The Conflict Detection strategy to use.</p> <ul> <li> <p> <b>VERSION</b>: Detect conflicts based on object versions for this resolver.</p> </li> <li> <p> <b>NONE</b>: Do not detect conflicts when executing this resolver.</p> </li> </ul>'
                  lambdaConflictHandlerConfig:
                    $ref: '#/definitions/LambdaConflictHandlerConfig'
                    description: The <code>LambdaConflictHandlerConfig</code> when configuring LAMBDA as the Conflict Handler.
              cachingConfig:
                description: The caching configuration for a resolver that has caching enabled.
                type: object
                properties:
                  ttl:
                    $ref: '#/definitions/Long'
                    description: <p>The TTL in seconds for a resolver that has caching enabled.</p> <p>Valid values are between 1 and 3600 seconds.</p>
                  cachingKeys:
                    $ref: '#/definitions/CachingKeys'
                    description: <p>The caching keys for a resolver that has caching enabled.</p> <p>Valid values are entries from the <code>$context.identity</code> and <code>$context.arguments</code> maps.</p>
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListResolvers
      description: Lists the resolvers for a given API and type.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListResolversResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          type: string
        - name: typeName
          in: path
          required: true
          description: The type name.
          type: string
        - name: nextToken
          in: query
          required: false
          description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list. '
          type: string
          pattern: '[\\S]+'
          minLength: 1
          maxLength: 65536
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results you want the request to return.
          type: integer
          minimum: 0
          maximum: 25
  '/v1/apis/{apiId}/types':
    post:
      operationId: CreateType
      description: Creates a <code>Type</code> object.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateTypeResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - definition
              - format
            properties:
              definition:
                description: '<p>The type definition, in GraphQL Schema Definition Language (SDL) format.</p> <p>For more information, see the <a href="http://graphql.org/learn/schema/">GraphQL SDL documentation</a>.</p>'
                type: string
              format:
                description: 'The type format: SDL or JSON.'
                type: string
                enum:
                  - SDL
                  - JSON
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/v1/apis/{apiId}/apikeys/{id}':
    delete:
      operationId: DeleteApiKey
      description: Deletes an API key.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteApiKeyResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          type: string
        - name: id
          in: path
          required: true
          description: The ID for the API key.
          type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateApiKey
      description: Updates an API key.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateApiKeyResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '485':
          description: ApiKeyValidityOutOfBoundsException
          schema:
            $ref: '#/definitions/ApiKeyValidityOutOfBoundsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The ID for the GraphQL API.
          type: string
        - name: id
          in: path
          required: true
          description: The API key ID.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              description:
                description: A description of the purpose of the API key.
                type: string
              expires:
                description: 'The time from update time after which the API key expires. The date is represented as seconds since the epoch. For more information, see .'
                type: integer
  '/v1/apis/{apiId}/datasources/{name}':
    delete:
      operationId: DeleteDataSource
      description: Deletes a <code>DataSource</code> object.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteDataSourceResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          type: string
        - name: name
          in: path
          required: true
          description: The name of the data source.
          type: string
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          minLength: 1
          maxLength: 65536
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDataSource
      description: Retrieves a <code>DataSource</code> object.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDataSourceResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          type: string
        - name: name
          in: path
          required: true
          description: The name of the data source.
          type: string
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          minLength: 1
          maxLength: 65536
    post:
      operationId: UpdateDataSource
      description: Updates a <code>DataSource</code> object.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateDataSourceResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          type: string
        - name: name
          in: path
          required: true
          description: The new name for the data source.
          type: string
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          minLength: 1
          maxLength: 65536
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - type
              - dynamodbConfig
              - lambdaConfig
              - elasticsearchConfig
            properties:
              description:
                description: The new description for the data source.
                type: string
              type:
                description: The new data source type.
                type: string
                enum:
                  - AWS_LAMBDA
                  - AMAZON_DYNAMODB
                  - AMAZON_ELASTICSEARCH
                  - NONE
                  - HTTP
                  - RELATIONAL_DATABASE
              serviceRoleArn:
                description: The new service role ARN for the data source.
                type: string
              dynamodbConfig:
                description: Describes an Amazon DynamoDB data source configuration.
                type: object
                properties:
                  tableName:
                    $ref: '#/definitions/String'
                    description: The table name.
                  awsRegion:
                    $ref: '#/definitions/String'
                    description: The AWS Region.
                  useCallerCredentials:
                    $ref: '#/definitions/Boolean'
                    description: Set to TRUE to use Amazon Cognito credentials with this data source.
                  deltaSyncConfig:
                    $ref: '#/definitions/DeltaSyncConfig'
                    description: The <code>DeltaSyncConfig</code> for a versioned datasource.
                  versioned:
                    $ref: '#/definitions/Boolean'
                    description: Set to TRUE to use Conflict Detection and Resolution with this data source.
              lambdaConfig:
                description: Describes an AWS Lambda data source configuration.
                type: object
                properties:
                  lambdaFunctionArn:
                    $ref: '#/definitions/String'
                    description: The ARN for the Lambda function.
              elasticsearchConfig:
                description: Describes an Elasticsearch data source configuration.
                type: object
                properties:
                  endpoint:
                    $ref: '#/definitions/String'
                    description: The endpoint.
                  awsRegion:
                    $ref: '#/definitions/String'
                    description: The AWS Region.
              httpConfig:
                description: Describes an HTTP data source configuration.
                type: object
                properties:
                  endpoint:
                    $ref: '#/definitions/String'
                    description: 'The HTTP URL endpoint. You can either specify the domain name or IP, and port combination, and the URL scheme must be HTTP or HTTPS. If the port is not specified, AWS AppSync uses the default port 80 for the HTTP endpoint and port 443 for HTTPS endpoints.'
                  authorizationConfig:
                    $ref: '#/definitions/AuthorizationConfig'
                    description: The authorization config in case the HTTP endpoint requires authorization.
              relationalDatabaseConfig:
                description: Describes a relational database data source configuration.
                type: object
                properties:
                  relationalDatabaseSourceType:
                    $ref: '#/definitions/RelationalDatabaseSourceType'
                    description: '<p>Source type for the relational database.</p> <ul> <li> <p> <b>RDS_HTTP_ENDPOINT</b>: The relational database source type is an Amazon RDS HTTP endpoint.</p> </li> </ul>'
                  rdsHttpEndpointConfig:
                    $ref: '#/definitions/RdsHttpEndpointConfig'
                    description: Amazon RDS HTTP endpoint settings.
  '/v1/apis/{apiId}/functions/{functionId}':
    delete:
      operationId: DeleteFunction
      description: Deletes a <code>Function</code>.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteFunctionResponse'
        '480':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The GraphQL API ID.
          type: string
        - name: functionId
          in: path
          required: true
          description: The <code>Function</code> ID.
          type: string
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          minLength: 1
          maxLength: 65536
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetFunction
      description: Get a <code>Function</code>.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetFunctionResponse'
        '480':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The GraphQL API ID.
          type: string
        - name: functionId
          in: path
          required: true
          description: The <code>Function</code> ID.
          type: string
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          minLength: 1
          maxLength: 65536
    post:
      operationId: UpdateFunction
      description: Updates a <code>Function</code> object.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateFunctionResponse'
        '480':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The GraphQL API ID.
          type: string
        - name: functionId
          in: path
          required: true
          description: The function ID.
          type: string
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          minLength: 1
          maxLength: 65536
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - name
              - dataSourceName
              - requestMappingTemplate
              - functionVersion
            properties:
              name:
                description: The <code>Function</code> name.
                type: string
                pattern: '[_A-Za-z][_0-9A-Za-z]*'
                minLength: 1
                maxLength: 65536
              description:
                description: The <code>Function</code> description.
                type: string
              dataSourceName:
                description: The <code>Function</code> <code>DataSource</code> name.
                type: string
                pattern: '[_A-Za-z][_0-9A-Za-z]*'
                minLength: 1
                maxLength: 65536
              requestMappingTemplate:
                description: The <code>Function</code> request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
                type: string
                minLength: 1
                maxLength: 65536
              responseMappingTemplate:
                description: 'The <code>Function</code> request mapping template. '
                type: string
                minLength: 1
                maxLength: 65536
              functionVersion:
                description: 'The <code>version</code> of the request mapping template. Currently the supported value is 2018-05-29. '
                type: string
  '/v1/apis/{apiId}':
    delete:
      operationId: DeleteGraphqlApi
      description: Deletes a <code>GraphqlApi</code> object.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteGraphqlApiResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '485':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetGraphqlApi
      description: Retrieves a <code>GraphqlApi</code> object.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetGraphqlApiResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '484':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID for the GraphQL API.
          type: string
    post:
      operationId: UpdateGraphqlApi
      description: Updates a <code>GraphqlApi</code> object.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateGraphqlApiResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '485':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - name
              - logConfig
              - userPoolConfig
              - openIDConnectConfig
            properties:
              name:
                description: The new name for the <code>GraphqlApi</code> object.
                type: string
              logConfig:
                description: The CloudWatch Logs configuration.
                type: object
                properties:
                  fieldLogLevel:
                    $ref: '#/definitions/FieldLogLevel'
                    description: '<p>The field logging level. Values can be NONE, ERROR, or ALL. </p> <ul> <li> <p> <b>NONE</b>: No field-level logs are captured.</p> </li> <li> <p> <b>ERROR</b>: Logs the following information only for the fields that are in error:</p> <ul> <li> <p>The error section in the server response.</p> </li> <li> <p>Field-level errors.</p> </li> <li> <p>The generated request/response functions that got resolved for error fields.</p> </li> </ul> </li> <li> <p> <b>ALL</b>: The following information is logged for all fields in the query:</p> <ul> <li> <p>Field-level tracing information.</p> </li> <li> <p>The generated request/response functions that got resolved for each field.</p> </li> </ul> </li> </ul>'
                  cloudWatchLogsRoleArn:
                    $ref: '#/definitions/String'
                    description: 'The service role that AWS AppSync will assume to publish to Amazon CloudWatch logs in your account. '
                  excludeVerboseContent:
                    $ref: '#/definitions/Boolean'
                    description: 'Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging level.'
              authenticationType:
                description: The new authentication type for the <code>GraphqlApi</code> object.
                type: string
                enum:
                  - API_KEY
                  - AWS_IAM
                  - AMAZON_COGNITO_USER_POOLS
                  - OPENID_CONNECT
              userPoolConfig:
                description: Describes an Amazon Cognito user pool configuration.
                type: object
                properties:
                  userPoolId:
                    $ref: '#/definitions/String'
                    description: The user pool ID.
                  awsRegion:
                    $ref: '#/definitions/String'
                    description: The AWS Region in which the user pool was created.
                  defaultAction:
                    $ref: '#/definitions/DefaultAction'
                    description: The action that you want your GraphQL API to take when a request that uses Amazon Cognito user pool authentication doesn't match the Amazon Cognito user pool configuration.
                  appIdClientRegex:
                    $ref: '#/definitions/String'
                    description: A regular expression for validating the incoming Amazon Cognito user pool app client ID.
              openIDConnectConfig:
                description: Describes an OpenID Connect configuration.
                type: object
                properties:
                  issuer:
                    $ref: '#/definitions/String'
                    description: The issuer for the OpenID Connect configuration. The issuer returned by discovery must exactly match the value of <code>iss</code> in the ID token.
                  clientId:
                    $ref: '#/definitions/String'
                    description: The client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.
                  iatTTL:
                    $ref: '#/definitions/Long'
                    description: The number of milliseconds a token is valid after being issued to a user.
                  authTTL:
                    $ref: '#/definitions/Long'
                    description: The number of milliseconds a token is valid after being authenticated.
              additionalAuthenticationProviders:
                description: A list of additional authentication providers for the <code>GraphqlApi</code> API.
                type: array
                items:
                  $ref: '#/definitions/AdditionalAuthenticationProvider'
              xrayEnabled:
                description: A flag indicating whether to enable X-Ray tracing for the <code>GraphqlApi</code>.
                type: boolean
  '/v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}':
    delete:
      operationId: DeleteResolver
      description: Deletes a <code>Resolver</code> object.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteResolverResponse'
        '480':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          type: string
        - name: typeName
          in: path
          required: true
          description: The name of the resolver type.
          type: string
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          minLength: 1
          maxLength: 65536
        - name: fieldName
          in: path
          required: true
          description: The resolver field name.
          type: string
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          minLength: 1
          maxLength: 65536
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetResolver
      description: Retrieves a <code>Resolver</code> object.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetResolverResponse'
        '480':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          type: string
        - name: typeName
          in: path
          required: true
          description: The resolver type name.
          type: string
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          minLength: 1
          maxLength: 65536
        - name: fieldName
          in: path
          required: true
          description: The resolver field name.
          type: string
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          minLength: 1
          maxLength: 65536
    post:
      operationId: UpdateResolver
      description: Updates a <code>Resolver</code> object.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateResolverResponse'
        '480':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          type: string
        - name: typeName
          in: path
          required: true
          description: The new type name.
          type: string
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          minLength: 1
          maxLength: 65536
        - name: fieldName
          in: path
          required: true
          description: The new field name.
          type: string
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          minLength: 1
          maxLength: 65536
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - requestMappingTemplate
            properties:
              dataSourceName:
                description: The new data source name.
                type: string
                pattern: '[_A-Za-z][_0-9A-Za-z]*'
                minLength: 1
                maxLength: 65536
              requestMappingTemplate:
                description: The new request mapping template.
                type: string
                minLength: 1
                maxLength: 65536
              responseMappingTemplate:
                description: The new response mapping template.
                type: string
                minLength: 1
                maxLength: 65536
              kind:
                description: '<p>The resolver type.</p> <ul> <li> <p> <b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default resolver type. A UNIT resolver enables you to execute a GraphQL query against a single data source.</p> </li> <li> <p> <b>PIPELINE</b>: A PIPELINE resolver type. A PIPELINE resolver enables you to execute a series of <code>Function</code> in a serial manner. You can use a pipeline resolver to execute a GraphQL query against multiple data sources.</p> </li> </ul>'
                type: string
                enum:
                  - UNIT
                  - PIPELINE
              pipelineConfig:
                description: The pipeline configuration for a resolver of kind <code>PIPELINE</code>.
                type: object
                properties:
                  functions:
                    $ref: '#/definitions/FunctionsIds'
                    description: A list of <code>Function</code> objects.
              syncConfig:
                description: <p>Describes a Sync configuration for a resolver.</p> <p>Contains information on which Conflict Detection as well as Resolution strategy should be performed when the resolver is invoked.</p>
                type: object
                properties:
                  conflictHandler:
                    $ref: '#/definitions/ConflictHandlerType'
                    description: '<p>The Conflict Resolution strategy to perform in the event of a conflict.</p> <ul> <li> <p> <b>OPTIMISTIC_CONCURRENCY</b>: Resolve conflicts by rejecting mutations when versions do not match the latest version at the server.</p> </li> <li> <p> <b>AUTOMERGE</b>: Resolve conflicts with the Automerge conflict resolution strategy.</p> </li> <li> <p> <b>LAMBDA</b>: Resolve conflicts with a Lambda function supplied in the LambdaConflictHandlerConfig.</p> </li> </ul>'
                  conflictDetection:
                    $ref: '#/definitions/ConflictDetectionType'
                    description: '<p>The Conflict Detection strategy to use.</p> <ul> <li> <p> <b>VERSION</b>: Detect conflicts based on object versions for this resolver.</p> </li> <li> <p> <b>NONE</b>: Do not detect conflicts when executing this resolver.</p> </li> </ul>'
                  lambdaConflictHandlerConfig:
                    $ref: '#/definitions/LambdaConflictHandlerConfig'
                    description: The <code>LambdaConflictHandlerConfig</code> when configuring LAMBDA as the Conflict Handler.
              cachingConfig:
                description: The caching configuration for a resolver that has caching enabled.
                type: object
                properties:
                  ttl:
                    $ref: '#/definitions/Long'
                    description: <p>The TTL in seconds for a resolver that has caching enabled.</p> <p>Valid values are between 1 and 3600 seconds.</p>
                  cachingKeys:
                    $ref: '#/definitions/CachingKeys'
                    description: <p>The caching keys for a resolver that has caching enabled.</p> <p>Valid values are entries from the <code>$context.identity</code> and <code>$context.arguments</code> maps.</p>
  '/v1/apis/{apiId}/types/{typeName}':
    delete:
      operationId: DeleteType
      description: Deletes a <code>Type</code> object.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteTypeResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          type: string
        - name: typeName
          in: path
          required: true
          description: The type name.
          type: string
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          minLength: 1
          maxLength: 65536
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdateType
      description: Updates a <code>Type</code> object.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateTypeResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          type: string
        - name: typeName
          in: path
          required: true
          description: The new type name.
          type: string
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          minLength: 1
          maxLength: 65536
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - format
            properties:
              definition:
                description: The new definition.
                type: string
              format:
                description: 'The new type format: SDL or JSON.'
                type: string
                enum:
                  - SDL
                  - JSON
  '/v1/apis/{apiId}/FlushCache':
    delete:
      operationId: FlushApiCache
      description: Flushes an <code>ApiCache</code> object.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/FlushApiCacheResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/v1/apis/{apiId}/schema#format':
    get:
      operationId: GetIntrospectionSchema
      description: Retrieves the introspection schema for a GraphQL API.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetIntrospectionSchemaResponse'
        '480':
          description: GraphQLSchemaException
          schema:
            $ref: '#/definitions/GraphQLSchemaException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          type: string
        - name: format
          in: query
          required: true
          description: 'The schema format: SDL or JSON.'
          type: string
          enum:
            - SDL
            - JSON
        - name: includeDirectives
          in: query
          required: false
          description: A flag that specifies whether the schema introspection should contain directives.
          type: boolean
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/v1/apis/{apiId}/schemacreation':
    get:
      operationId: GetSchemaCreationStatus
      description: Retrieves the current status of a schema creation operation.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetSchemaCreationStatusResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      operationId: StartSchemaCreation
      description: <p>Adds a new schema to your GraphQL API.</p> <p>This operation is asynchronous. Use to determine when it has completed.</p>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StartSchemaCreationResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - definition
            properties:
              definition:
                description: 'The schema definition, in GraphQL schema language format.'
                type: string
  '/v1/apis/{apiId}/types/{typeName}#format':
    get:
      operationId: GetType
      description: Retrieves a <code>Type</code> object.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetTypeResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          type: string
        - name: typeName
          in: path
          required: true
          description: The type name.
          type: string
          pattern: '[_A-Za-z][_0-9A-Za-z]*'
          minLength: 1
          maxLength: 65536
        - name: format
          in: query
          required: true
          description: 'The type format: SDL or JSON.'
          type: string
          enum:
            - SDL
            - JSON
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/v1/apis/{apiId}/functions/{functionId}/resolvers':
    get:
      operationId: ListResolversByFunction
      description: List the resolvers that are associated with a specific function.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListResolversByFunctionResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          type: string
        - name: functionId
          in: path
          required: true
          description: The Function ID.
          type: string
        - name: nextToken
          in: query
          required: false
          description: 'An identifier that was returned from the previous call to this operation, which you can use to return the next set of items in the list.'
          type: string
          pattern: '[\\S]+'
          minLength: 1
          maxLength: 65536
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results you want the request to return.
          type: integer
          minimum: 0
          maximum: 25
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/v1/tags/{resourceArn}':
    get:
      operationId: ListTagsForResource
      description: Lists the tags for a resource.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListTagsForResourceResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '485':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The <code>GraphqlApi</code> ARN.
          type: string
          pattern: '^arn:aws:appsync:[A-Za-z0-9_/.-]{0,63}:\d{12}:apis/[0-9A-Za-z_-]{26}$'
          minLength: 70
          maxLength: 75
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      operationId: TagResource
      description: Tags a resource with user-supplied tags.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/TagResourceResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '485':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The <code>GraphqlApi</code> ARN.
          type: string
          pattern: '^arn:aws:appsync:[A-Za-z0-9_/.-]{0,63}:\d{12}:apis/[0-9A-Za-z_-]{26}$'
          minLength: 70
          maxLength: 75
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - tags
            properties:
              tags:
                description: A map with keys of <code>TagKey</code> objects and values of <code>TagValue</code> objects.
                type: object
                minProperties: 1
                maxProperties: 50
                additionalProperties:
                  $ref: '#/definitions/TagValue'
  '/v1/apis/{apiId}/types#format':
    get:
      operationId: ListTypes
      description: Lists the types for a given API.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListTypesResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API ID.
          type: string
        - name: format
          in: query
          required: true
          description: 'The type format: SDL or JSON.'
          type: string
          enum:
            - SDL
            - JSON
        - name: nextToken
          in: query
          required: false
          description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list. '
          type: string
          pattern: '[\\S]+'
          minLength: 1
          maxLength: 65536
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results you want the request to return.
          type: integer
          minimum: 0
          maximum: 25
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/v1/tags/{resourceArn}#tagKeys':
    delete:
      operationId: UntagResource
      description: Untags a resource.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UntagResourceResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '482':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '485':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The <code>GraphqlApi</code> ARN.
          type: string
          pattern: '^arn:aws:appsync:[A-Za-z0-9_/.-]{0,63}:\d{12}:apis/[0-9A-Za-z_-]{26}$'
          minLength: 70
          maxLength: 75
        - name: tagKeys
          in: query
          required: true
          description: A list of <code>TagKey</code> objects.
          type: array
          items:
            type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/v1/apis/{apiId}/ApiCaches/update':
    post:
      operationId: UpdateApiCache
      description: Updates the cache for the GraphQL API.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateApiCacheResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: ConcurrentModificationException
          schema:
            $ref: '#/definitions/ConcurrentModificationException'
        '482':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '483':
          description: UnauthorizedException
          schema:
            $ref: '#/definitions/UnauthorizedException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The GraphQL API Id.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - ttl
              - apiCachingBehavior
              - type
            properties:
              ttl:
                description: <p>TTL in seconds for cache entries.</p> <p>Valid values are between 1 and 3600 seconds.</p>
                type: integer
              apiCachingBehavior:
                description: '<p>Caching behavior.</p> <ul> <li> <p> <b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</p> </li> <li> <p> <b>PER_RESOLVER_CACHING</b>: Individual resovlers that you specify are cached.</p> </li> </ul>'
                type: string
                enum:
                  - FULL_REQUEST_CACHING
                  - PER_RESOLVER_CACHING
              type:
                description: '<p>The cache instance type.</p> <ul> <li> <p> <b>T2_SMALL</b>: A t2.small instance type.</p> </li> <li> <p> <b>T2_MEDIUM</b>: A t2.medium instance type.</p> </li> <li> <p> <b>R4_LARGE</b>: A r4.large instance type.</p> </li> <li> <p> <b>R4_XLARGE</b>: A r4.xlarge instance type.</p> </li> <li> <p> <b>R4_2XLARGE</b>: A r4.2xlarge instance type.</p> </li> <li> <p> <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p> </li> <li> <p> <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p> </li> </ul>'
                type: string
                enum:
                  - T2_SMALL
                  - T2_MEDIUM
                  - R4_LARGE
                  - R4_XLARGE
                  - R4_2XLARGE
                  - R4_4XLARGE
                  - R4_8XLARGE
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
definitions:
  CreateApiCacheResponse:
    type: object
    properties:
      apiCache:
        $ref: '#/definitions/ApiCache'
        description: The <code>ApiCache</code> object.
    description: Represents the output of a <code>CreateApiCache</code> operation.
  BadRequestException: {}
  ConcurrentModificationException: {}
  NotFoundException: {}
  UnauthorizedException: {}
  InternalFailureException: {}
  CreateApiKeyResponse:
    type: object
    properties:
      apiKey:
        $ref: '#/definitions/ApiKey'
        description: The API key.
  LimitExceededException: {}
  ApiKeyLimitExceededException: {}
  ApiKeyValidityOutOfBoundsException: {}
  CreateDataSourceResponse:
    type: object
    properties:
      dataSource:
        $ref: '#/definitions/DataSource'
        description: The <code>DataSource</code> object.
  String:
    type: string
  Boolean:
    type: boolean
  DeltaSyncConfig:
    type: object
    properties:
      baseTableTTL:
        $ref: '#/definitions/Long'
        description: The number of minutes an Item is stored in the datasource.
      deltaSyncTableName:
        $ref: '#/definitions/String'
        description: The Delta Sync table name.
      deltaSyncTableTTL:
        $ref: '#/definitions/Long'
        description: The number of minutes a Delta Sync log entry is stored in the Delta Sync table.
    description: Describes a Delta Sync configuration.
  AuthorizationConfig:
    type: object
    required:
      - authorizationType
    properties:
      authorizationType:
        $ref: '#/definitions/AuthorizationType'
        description: '<p>The authorization type required by the HTTP endpoint.</p> <ul> <li> <p> <b>AWS_IAM</b>: The authorization type is Sigv4.</p> </li> </ul>'
      awsIamConfig:
        $ref: '#/definitions/AwsIamConfig'
        description: The AWS IAM settings.
    description: The authorization config in case the HTTP endpoint requires authorization.
  RelationalDatabaseSourceType:
    type: string
    enum:
      - RDS_HTTP_ENDPOINT
  RdsHttpEndpointConfig:
    type: object
    properties:
      awsRegion:
        $ref: '#/definitions/String'
        description: AWS Region for RDS HTTP endpoint.
      dbClusterIdentifier:
        $ref: '#/definitions/String'
        description: Amazon RDS cluster identifier.
      databaseName:
        $ref: '#/definitions/String'
        description: Logical database name.
      schema:
        $ref: '#/definitions/String'
        description: Logical schema name.
      awsSecretStoreArn:
        $ref: '#/definitions/String'
        description: AWS secret store ARN for database credentials.
    description: The Amazon RDS HTTP endpoint configuration.
  CreateFunctionResponse:
    type: object
    properties:
      functionConfiguration:
        $ref: '#/definitions/FunctionConfiguration'
        description: The <code>Function</code> object.
  CreateGraphqlApiResponse:
    type: object
    properties:
      graphqlApi:
        $ref: '#/definitions/GraphqlApi'
        description: The <code>GraphqlApi</code>.
  FieldLogLevel:
    type: string
    enum:
      - NONE
      - ERROR
      - ALL
  DefaultAction:
    type: string
    enum:
      - ALLOW
      - DENY
  Long:
    type: integer
  TagValue:
    type: string
    description: The value for the tag.
    maxLength: 256
  AdditionalAuthenticationProvider:
    type: object
    properties:
      authenticationType:
        $ref: '#/definitions/AuthenticationType'
        description: 'The authentication type: API key, AWS IAM, OIDC, or Amazon Cognito user pools.'
      openIDConnectConfig:
        $ref: '#/definitions/OpenIDConnectConfig'
        description: The OpenID Connect configuration.
      userPoolConfig:
        $ref: '#/definitions/CognitoUserPoolConfig'
        description: The Amazon Cognito user pool configuration.
    description: Describes an additional authentication provider.
  ApiLimitExceededException: {}
  CreateResolverResponse:
    type: object
    properties:
      resolver:
        $ref: '#/definitions/Resolver'
        description: The <code>Resolver</code> object.
  FunctionsIds:
    type: array
    items:
      $ref: '#/definitions/String'
  ConflictHandlerType:
    type: string
    enum:
      - OPTIMISTIC_CONCURRENCY
      - LAMBDA
      - AUTOMERGE
      - NONE
  ConflictDetectionType:
    type: string
    enum:
      - VERSION
      - NONE
  LambdaConflictHandlerConfig:
    type: object
    properties:
      lambdaConflictHandlerArn:
        $ref: '#/definitions/String'
        description: The Arn for the Lambda function to use as the Conflict Handler.
    description: The <code>LambdaConflictHandlerConfig</code> object when configuring LAMBDA as the Conflict Handler.
  CachingKeys:
    type: array
    items:
      $ref: '#/definitions/String'
  CreateTypeResponse:
    type: object
    properties:
      type:
        $ref: '#/definitions/Type'
        description: The <code>Type</code> object.
  DeleteApiCacheResponse:
    type: object
    properties: {}
    description: Represents the output of a <code>DeleteApiCache</code> operation.
  DeleteApiKeyResponse:
    type: object
    properties: {}
  DeleteDataSourceResponse:
    type: object
    properties: {}
  DeleteFunctionResponse:
    type: object
    properties: {}
  DeleteGraphqlApiResponse:
    type: object
    properties: {}
  AccessDeniedException: {}
  DeleteResolverResponse:
    type: object
    properties: {}
  DeleteTypeResponse:
    type: object
    properties: {}
  FlushApiCacheResponse:
    type: object
    properties: {}
    description: Represents the output of a <code>FlushApiCache</code> operation.
  GetApiCacheResponse:
    type: object
    properties:
      apiCache:
        $ref: '#/definitions/ApiCache'
        description: The <code>ApiCache</code> object.
    description: Represents the output of a <code>GetApiCache</code> operation.
  GetDataSourceResponse:
    type: object
    properties:
      dataSource:
        $ref: '#/definitions/DataSource'
        description: The <code>DataSource</code> object.
  GetFunctionResponse:
    type: object
    properties:
      functionConfiguration:
        $ref: '#/definitions/FunctionConfiguration'
        description: The <code>Function</code> object.
  GetGraphqlApiResponse:
    type: object
    properties:
      graphqlApi:
        $ref: '#/definitions/GraphqlApi'
        description: The <code>GraphqlApi</code> object.
  GetIntrospectionSchemaResponse:
    type: object
    properties:
      schema:
        $ref: '#/definitions/Blob'
        description: '<p>The schema, in GraphQL Schema Definition Language (SDL) format.</p> <p>For more information, see the <a href="http://graphql.org/learn/schema/">GraphQL SDL documentation</a>.</p>'
  GraphQLSchemaException: {}
  GetResolverResponse:
    type: object
    properties:
      resolver:
        $ref: '#/definitions/Resolver'
        description: The <code>Resolver</code> object.
  GetSchemaCreationStatusResponse:
    type: object
    properties:
      status:
        $ref: '#/definitions/SchemaStatus'
        description: 'The current state of the schema (PROCESSING, FAILED, SUCCESS, or NOT_APPLICABLE). When the schema is in the ACTIVE state, you can add data.'
      details:
        $ref: '#/definitions/String'
        description: Detailed information about the status of the schema creation operation.
  GetTypeResponse:
    type: object
    properties:
      type:
        $ref: '#/definitions/Type'
        description: The <code>Type</code> object.
  ListApiKeysResponse:
    type: object
    properties:
      apiKeys:
        $ref: '#/definitions/ApiKeys'
        description: The <code>ApiKey</code> objects.
      nextToken:
        $ref: '#/definitions/PaginationToken'
        description: An identifier to be passed in the next request to this operation to return the next set of items in the list.
  ListDataSourcesResponse:
    type: object
    properties:
      dataSources:
        $ref: '#/definitions/DataSources'
        description: The <code>DataSource</code> objects.
      nextToken:
        $ref: '#/definitions/PaginationToken'
        description: An identifier to be passed in the next request to this operation to return the next set of items in the list.
  ListFunctionsResponse:
    type: object
    properties:
      functions:
        $ref: '#/definitions/Functions'
        description: A list of <code>Function</code> objects.
      nextToken:
        $ref: '#/definitions/PaginationToken'
        description: 'An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.'
  ListGraphqlApisResponse:
    type: object
    properties:
      graphqlApis:
        $ref: '#/definitions/GraphqlApis'
        description: The <code>GraphqlApi</code> objects.
      nextToken:
        $ref: '#/definitions/PaginationToken'
        description: An identifier to be passed in the next request to this operation to return the next set of items in the list.
  ListResolversResponse:
    type: object
    properties:
      resolvers:
        $ref: '#/definitions/Resolvers'
        description: The <code>Resolver</code> objects.
      nextToken:
        $ref: '#/definitions/PaginationToken'
        description: An identifier to be passed in the next request to this operation to return the next set of items in the list.
  ListResolversByFunctionResponse:
    type: object
    properties:
      resolvers:
        $ref: '#/definitions/Resolvers'
        description: The list of resolvers.
      nextToken:
        $ref: '#/definitions/PaginationToken'
        description: An identifier that can be used to return the next set of items in the list.
  ListTagsForResourceResponse:
    type: object
    properties:
      tags:
        $ref: '#/definitions/TagMap'
        description: A <code>TagMap</code> object.
  ListTypesResponse:
    type: object
    properties:
      types:
        $ref: '#/definitions/TypeList'
        description: The <code>Type</code> objects.
      nextToken:
        $ref: '#/definitions/PaginationToken'
        description: An identifier to be passed in the next request to this operation to return the next set of items in the list.
  StartSchemaCreationResponse:
    type: object
    properties:
      status:
        $ref: '#/definitions/SchemaStatus'
        description: 'The current state of the schema (PROCESSING, FAILED, SUCCESS, or NOT_APPLICABLE). When the schema is in the ACTIVE state, you can add data.'
  TagResourceResponse:
    type: object
    properties: {}
  UntagResourceResponse:
    type: object
    properties: {}
  TagKey:
    type: string
    pattern: '^(?!aws:)[a-zA-Z+-=._:/]+$'
    description: The key for the tag.
    minLength: 1
    maxLength: 128
  UpdateApiCacheResponse:
    type: object
    properties:
      apiCache:
        $ref: '#/definitions/ApiCache'
        description: The <code>ApiCache</code> object.
    description: Represents the output of a <code>UpdateApiCache</code> operation.
  UpdateApiKeyResponse:
    type: object
    properties:
      apiKey:
        $ref: '#/definitions/ApiKey'
        description: The API key.
  UpdateDataSourceResponse:
    type: object
    properties:
      dataSource:
        $ref: '#/definitions/DataSource'
        description: The updated <code>DataSource</code> object.
  UpdateFunctionResponse:
    type: object
    properties:
      functionConfiguration:
        $ref: '#/definitions/FunctionConfiguration'
        description: The <code>Function</code> object.
  UpdateGraphqlApiResponse:
    type: object
    properties:
      graphqlApi:
        $ref: '#/definitions/GraphqlApi'
        description: The updated <code>GraphqlApi</code> object.
  UpdateResolverResponse:
    type: object
    properties:
      resolver:
        $ref: '#/definitions/Resolver'
        description: The updated <code>Resolver</code> object.
  UpdateTypeResponse:
    type: object
    properties:
      type:
        $ref: '#/definitions/Type'
        description: The updated <code>Type</code> object.
  AuthenticationType:
    type: string
    enum:
      - API_KEY
      - AWS_IAM
      - AMAZON_COGNITO_USER_POOLS
      - OPENID_CONNECT
  OpenIDConnectConfig:
    type: object
    required:
      - issuer
    properties:
      issuer:
        $ref: '#/definitions/String'
        description: The issuer for the OpenID Connect configuration. The issuer returned by discovery must exactly match the value of <code>iss</code> in the ID token.
      clientId:
        $ref: '#/definitions/String'
        description: The client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.
      iatTTL:
        $ref: '#/definitions/Long'
        description: The number of milliseconds a token is valid after being issued to a user.
      authTTL:
        $ref: '#/definitions/Long'
        description: The number of milliseconds a token is valid after being authenticated.
    description: Describes an OpenID Connect configuration.
  CognitoUserPoolConfig:
    type: object
    required:
      - userPoolId
      - awsRegion
    properties:
      userPoolId:
        $ref: '#/definitions/String'
        description: The user pool ID.
      awsRegion:
        $ref: '#/definitions/String'
        description: The AWS Region in which the user pool was created.
      appIdClientRegex:
        $ref: '#/definitions/String'
        description: A regular expression for validating the incoming Amazon Cognito user pool app client ID.
    description: Describes an Amazon Cognito user pool configuration.
  AdditionalAuthenticationProviders:
    type: array
    items:
      $ref: '#/definitions/AdditionalAuthenticationProvider'
  ApiCachingBehavior:
    type: string
    enum:
      - FULL_REQUEST_CACHING
      - PER_RESOLVER_CACHING
  ApiCacheType:
    type: string
    enum:
      - T2_SMALL
      - T2_MEDIUM
      - R4_LARGE
      - R4_XLARGE
      - R4_2XLARGE
      - R4_4XLARGE
      - R4_8XLARGE
  ApiCacheStatus:
    type: string
    enum:
      - AVAILABLE
      - CREATING
      - DELETING
      - MODIFYING
      - FAILED
  ApiCache:
    type: object
    properties:
      ttl:
        $ref: '#/definitions/Long'
        description: <p>TTL in seconds for cache entries.</p> <p>Valid values are between 1 and 3600 seconds.</p>
      apiCachingBehavior:
        $ref: '#/definitions/ApiCachingBehavior'
        description: '<p>Caching behavior.</p> <ul> <li> <p> <b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</p> </li> <li> <p> <b>PER_RESOLVER_CACHING</b>: Individual resovlers that you specify are cached.</p> </li> </ul>'
      transitEncryptionEnabled:
        $ref: '#/definitions/Boolean'
        description: Transit encryption flag when connecting to cache. This setting cannot be updated after creation.
      atRestEncryptionEnabled:
        $ref: '#/definitions/Boolean'
        description: At rest encryption flag for cache. This setting cannot be updated after creation.
      type:
        $ref: '#/definitions/ApiCacheType'
        description: '<p>The cache instance type.</p> <ul> <li> <p> <b>T2_SMALL</b>: A t2.small instance type.</p> </li> <li> <p> <b>T2_MEDIUM</b>: A t2.medium instance type.</p> </li> <li> <p> <b>R4_LARGE</b>: A r4.large instance type.</p> </li> <li> <p> <b>R4_XLARGE</b>: A r4.xlarge instance type.</p> </li> <li> <p> <b>R4_2XLARGE</b>: A r4.2xlarge instance type.</p> </li> <li> <p> <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p> </li> <li> <p> <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p> </li> </ul>'
      status:
        $ref: '#/definitions/ApiCacheStatus'
        description: '<p>The cache instance status.</p> <ul> <li> <p> <b>AVAILABLE</b>: The instance is available for use.</p> </li> <li> <p> <b>CREATING</b>: The instance is currently creating.</p> </li> <li> <p> <b>DELETING</b>: The instance is currently deleting.</p> </li> <li> <p> <b>MODIFYING</b>: The instance is currently modifying.</p> </li> <li> <p> <b>FAILED</b>: The instance has failed creation.</p> </li> </ul>'
    description: The <code>ApiCache</code> object.
  ApiKey:
    type: object
    properties:
      id:
        $ref: '#/definitions/String'
        description: The API key ID.
      description:
        $ref: '#/definitions/String'
        description: A description of the purpose of the API key.
      expires:
        $ref: '#/definitions/Long'
        description: 'The time after which the API key expires. The date is represented as seconds since the epoch, rounded down to the nearest hour.'
    description: '<p>Describes an API key.</p> <p>Customers invoke AWS AppSync GraphQL API operations with API keys as an identity mechanism. There are two key versions:</p> <p> <b>da1</b>: This version was introduced at launch in November 2017. These keys always expire after 7 days. Key expiration is managed by Amazon DynamoDB TTL. The keys ceased to be valid after February 21, 2018 and should not be used after that date.</p> <ul> <li> <p> <code>ListApiKeys</code> returns the expiration time in milliseconds.</p> </li> <li> <p> <code>CreateApiKey</code> returns the expiration time in milliseconds.</p> </li> <li> <p> <code>UpdateApiKey</code> is not available for this key version.</p> </li> <li> <p> <code>DeleteApiKey</code> deletes the item from the table.</p> </li> <li> <p>Expiration is stored in Amazon DynamoDB as milliseconds. This results in a bug where keys are not automatically deleted because DynamoDB expects the TTL to be stored in seconds. As a one-time action, we will delete these keys from the table after February 21, 2018.</p> </li> </ul> <p> <b>da2</b>: This version was introduced in February 2018 when AppSync added support to extend key expiration.</p> <ul> <li> <p> <code>ListApiKeys</code> returns the expiration time in seconds.</p> </li> <li> <p> <code>CreateApiKey</code> returns the expiration time in seconds and accepts a user-provided expiration time in seconds.</p> </li> <li> <p> <code>UpdateApiKey</code> returns the expiration time in seconds and accepts a user-provided expiration time in seconds. Key expiration can only be updated while the key has not expired.</p> </li> <li> <p> <code>DeleteApiKey</code> deletes the item from the table.</p> </li> <li> <p>Expiration is stored in Amazon DynamoDB as seconds.</p> </li> </ul>'
  ApiKeys:
    type: array
    items:
      $ref: '#/definitions/ApiKey'
  AuthorizationType:
    type: string
    enum:
      - AWS_IAM
  AwsIamConfig:
    type: object
    properties:
      signingRegion:
        $ref: '#/definitions/String'
        description: The signing region for AWS IAM authorization.
      signingServiceName:
        $ref: '#/definitions/String'
        description: The signing service name for AWS IAM authorization.
    description: The AWS IAM configuration.
  Blob:
    type: string
  BooleanValue:
    type: boolean
  CachingConfig:
    type: object
    properties:
      ttl:
        $ref: '#/definitions/Long'
        description: <p>The TTL in seconds for a resolver that has caching enabled.</p> <p>Valid values are between 1 and 3600 seconds.</p>
      cachingKeys:
        $ref: '#/definitions/CachingKeys'
        description: <p>The caching keys for a resolver that has caching enabled.</p> <p>Valid values are entries from the <code>$context.identity</code> and <code>$context.arguments</code> maps.</p>
    description: The caching configuration for a resolver that has caching enabled.
  CreateApiCacheRequest:
    type: object
    required:
      - ttl
      - apiCachingBehavior
      - type
    properties:
      ttl:
        $ref: '#/definitions/Long'
        description: <p>TTL in seconds for cache entries.</p> <p>Valid values are between 1 and 3600 seconds.</p>
      transitEncryptionEnabled:
        $ref: '#/definitions/Boolean'
        description: Transit encryption flag when connecting to cache. This setting cannot be updated after creation.
      atRestEncryptionEnabled:
        $ref: '#/definitions/Boolean'
        description: At rest encryption flag for cache. This setting cannot be updated after creation.
      apiCachingBehavior:
        $ref: '#/definitions/ApiCachingBehavior'
        description: '<p>Caching behavior.</p> <ul> <li> <p> <b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</p> </li> <li> <p> <b>PER_RESOLVER_CACHING</b>: Individual resovlers that you specify are cached.</p> </li> </ul>'
      type:
        $ref: '#/definitions/ApiCacheType'
        description: '<p>The cache instance type.</p> <ul> <li> <p> <b>T2_SMALL</b>: A t2.small instance type.</p> </li> <li> <p> <b>T2_MEDIUM</b>: A t2.medium instance type.</p> </li> <li> <p> <b>R4_LARGE</b>: A r4.large instance type.</p> </li> <li> <p> <b>R4_XLARGE</b>: A r4.xlarge instance type.</p> </li> <li> <p> <b>R4_2XLARGE</b>: A r4.2xlarge instance type.</p> </li> <li> <p> <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p> </li> <li> <p> <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p> </li> </ul>'
    description: Represents the input of a <code>CreateApiCache</code> operation.
  CreateApiKeyRequest:
    type: object
    properties:
      description:
        $ref: '#/definitions/String'
        description: A description of the purpose of the API key.
      expires:
        $ref: '#/definitions/Long'
        description: 'The time from creation time after which the API key expires. The date is represented as seconds since the epoch, rounded down to the nearest hour. The default value for this parameter is 7 days from creation time. For more information, see .'
  ResourceName:
    type: string
    pattern: '[_A-Za-z][_0-9A-Za-z]*'
    minLength: 1
    maxLength: 65536
  DataSourceType:
    type: string
    enum:
      - AWS_LAMBDA
      - AMAZON_DYNAMODB
      - AMAZON_ELASTICSEARCH
      - NONE
      - HTTP
      - RELATIONAL_DATABASE
  DynamodbDataSourceConfig:
    type: object
    required:
      - tableName
      - awsRegion
    properties:
      tableName:
        $ref: '#/definitions/String'
        description: The table name.
      awsRegion:
        $ref: '#/definitions/String'
        description: The AWS Region.
      useCallerCredentials:
        $ref: '#/definitions/Boolean'
        description: Set to TRUE to use Amazon Cognito credentials with this data source.
      deltaSyncConfig:
        $ref: '#/definitions/DeltaSyncConfig'
        description: The <code>DeltaSyncConfig</code> for a versioned datasource.
      versioned:
        $ref: '#/definitions/Boolean'
        description: Set to TRUE to use Conflict Detection and Resolution with this data source.
    description: Describes an Amazon DynamoDB data source configuration.
  LambdaDataSourceConfig:
    type: object
    required:
      - lambdaFunctionArn
    properties:
      lambdaFunctionArn:
        $ref: '#/definitions/String'
        description: The ARN for the Lambda function.
    description: Describes an AWS Lambda data source configuration.
  ElasticsearchDataSourceConfig:
    type: object
    required:
      - endpoint
      - awsRegion
    properties:
      endpoint:
        $ref: '#/definitions/String'
        description: The endpoint.
      awsRegion:
        $ref: '#/definitions/String'
        description: The AWS Region.
    description: Describes an Elasticsearch data source configuration.
  HttpDataSourceConfig:
    type: object
    properties:
      endpoint:
        $ref: '#/definitions/String'
        description: 'The HTTP URL endpoint. You can either specify the domain name or IP, and port combination, and the URL scheme must be HTTP or HTTPS. If the port is not specified, AWS AppSync uses the default port 80 for the HTTP endpoint and port 443 for HTTPS endpoints.'
      authorizationConfig:
        $ref: '#/definitions/AuthorizationConfig'
        description: The authorization config in case the HTTP endpoint requires authorization.
    description: Describes an HTTP data source configuration.
  RelationalDatabaseDataSourceConfig:
    type: object
    properties:
      relationalDatabaseSourceType:
        $ref: '#/definitions/RelationalDatabaseSourceType'
        description: '<p>Source type for the relational database.</p> <ul> <li> <p> <b>RDS_HTTP_ENDPOINT</b>: The relational database source type is an Amazon RDS HTTP endpoint.</p> </li> </ul>'
      rdsHttpEndpointConfig:
        $ref: '#/definitions/RdsHttpEndpointConfig'
        description: Amazon RDS HTTP endpoint settings.
    description: Describes a relational database data source configuration.
  CreateDataSourceRequest:
    type: object
    required:
      - name
      - type
    properties:
      name:
        $ref: '#/definitions/ResourceName'
        description: A user-supplied name for the <code>DataSource</code>.
      description:
        $ref: '#/definitions/String'
        description: A description of the <code>DataSource</code>.
      type:
        $ref: '#/definitions/DataSourceType'
        description: The type of the <code>DataSource</code>.
      serviceRoleArn:
        $ref: '#/definitions/String'
        description: The AWS IAM service role ARN for the data source. The system assumes this role when accessing the data source.
      dynamodbConfig:
        $ref: '#/definitions/DynamodbDataSourceConfig'
        description: Amazon DynamoDB settings.
      lambdaConfig:
        $ref: '#/definitions/LambdaDataSourceConfig'
        description: AWS Lambda settings.
      elasticsearchConfig:
        $ref: '#/definitions/ElasticsearchDataSourceConfig'
        description: Amazon Elasticsearch Service settings.
      httpConfig:
        $ref: '#/definitions/HttpDataSourceConfig'
        description: HTTP endpoint settings.
      relationalDatabaseConfig:
        $ref: '#/definitions/RelationalDatabaseDataSourceConfig'
        description: Relational database settings.
  DataSource:
    type: object
    properties:
      dataSourceArn:
        $ref: '#/definitions/String'
        description: The data source ARN.
      name:
        $ref: '#/definitions/ResourceName'
        description: The name of the data source.
      description:
        $ref: '#/definitions/String'
        description: The description of the data source.
      type:
        $ref: '#/definitions/DataSourceType'
        description: '<p>The type of the data source.</p> <ul> <li> <p> <b>AMAZON_DYNAMODB</b>: The data source is an Amazon DynamoDB table.</p> </li> <li> <p> <b>AMAZON_ELASTICSEARCH</b>: The data source is an Amazon Elasticsearch Service domain.</p> </li> <li> <p> <b>AWS_LAMBDA</b>: The data source is an AWS Lambda function.</p> </li> <li> <p> <b>NONE</b>: There is no data source. This type is used when you wish to invoke a GraphQL operation without connecting to a data source, such as performing data transformation with resolvers or triggering a subscription to be invoked from a mutation.</p> </li> <li> <p> <b>HTTP</b>: The data source is an HTTP endpoint.</p> </li> <li> <p> <b>RELATIONAL_DATABASE</b>: The data source is a relational database.</p> </li> </ul>'
      serviceRoleArn:
        $ref: '#/definitions/String'
        description: The AWS IAM service role ARN for the data source. The system assumes this role when accessing the data source.
      dynamodbConfig:
        $ref: '#/definitions/DynamodbDataSourceConfig'
        description: Amazon DynamoDB settings.
      lambdaConfig:
        $ref: '#/definitions/LambdaDataSourceConfig'
        description: AWS Lambda settings.
      elasticsearchConfig:
        $ref: '#/definitions/ElasticsearchDataSourceConfig'
        description: Amazon Elasticsearch Service settings.
      httpConfig:
        $ref: '#/definitions/HttpDataSourceConfig'
        description: HTTP endpoint settings.
      relationalDatabaseConfig:
        $ref: '#/definitions/RelationalDatabaseDataSourceConfig'
        description: Relational database settings.
    description: Describes a data source.
  MappingTemplate:
    type: string
    minLength: 1
    maxLength: 65536
  CreateFunctionRequest:
    type: object
    required:
      - name
      - dataSourceName
      - requestMappingTemplate
      - functionVersion
    properties:
      name:
        $ref: '#/definitions/ResourceName'
        description: The <code>Function</code> name. The function name does not have to be unique.
      description:
        $ref: '#/definitions/String'
        description: The <code>Function</code> description.
      dataSourceName:
        $ref: '#/definitions/ResourceName'
        description: The <code>Function</code> <code>DataSource</code> name.
      requestMappingTemplate:
        $ref: '#/definitions/MappingTemplate'
        description: The <code>Function</code> request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
      responseMappingTemplate:
        $ref: '#/definitions/MappingTemplate'
        description: 'The <code>Function</code> response mapping template. '
      functionVersion:
        $ref: '#/definitions/String'
        description: 'The <code>version</code> of the request mapping template. Currently the supported value is 2018-05-29. '
  FunctionConfiguration:
    type: object
    properties:
      functionId:
        $ref: '#/definitions/String'
        description: A unique ID representing the <code>Function</code> object.
      functionArn:
        $ref: '#/definitions/String'
        description: The ARN of the <code>Function</code> object.
      name:
        $ref: '#/definitions/ResourceName'
        description: The name of the <code>Function</code> object.
      description:
        $ref: '#/definitions/String'
        description: The <code>Function</code> description.
      dataSourceName:
        $ref: '#/definitions/ResourceName'
        description: The name of the <code>DataSource</code>.
      requestMappingTemplate:
        $ref: '#/definitions/MappingTemplate'
        description: The <code>Function</code> request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
      responseMappingTemplate:
        $ref: '#/definitions/MappingTemplate'
        description: The <code>Function</code> response mapping template.
      functionVersion:
        $ref: '#/definitions/String'
        description: The version of the request mapping template. Currently only the 2018-05-29 version of the template is supported.
    description: A function is a reusable entity. Multiple functions can be used to compose the resolver logic.
  LogConfig:
    type: object
    required:
      - fieldLogLevel
      - cloudWatchLogsRoleArn
    properties:
      fieldLogLevel:
        $ref: '#/definitions/FieldLogLevel'
        description: '<p>The field logging level. Values can be NONE, ERROR, or ALL. </p> <ul> <li> <p> <b>NONE</b>: No field-level logs are captured.</p> </li> <li> <p> <b>ERROR</b>: Logs the following information only for the fields that are in error:</p> <ul> <li> <p>The error section in the server response.</p> </li> <li> <p>Field-level errors.</p> </li> <li> <p>The generated request/response functions that got resolved for error fields.</p> </li> </ul> </li> <li> <p> <b>ALL</b>: The following information is logged for all fields in the query:</p> <ul> <li> <p>Field-level tracing information.</p> </li> <li> <p>The generated request/response functions that got resolved for each field.</p> </li> </ul> </li> </ul>'
      cloudWatchLogsRoleArn:
        $ref: '#/definitions/String'
        description: 'The service role that AWS AppSync will assume to publish to Amazon CloudWatch logs in your account. '
      excludeVerboseContent:
        $ref: '#/definitions/Boolean'
        description: 'Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging level.'
    description: The CloudWatch Logs configuration.
  UserPoolConfig:
    type: object
    required:
      - userPoolId
      - awsRegion
      - defaultAction
    properties:
      userPoolId:
        $ref: '#/definitions/String'
        description: The user pool ID.
      awsRegion:
        $ref: '#/definitions/String'
        description: The AWS Region in which the user pool was created.
      defaultAction:
        $ref: '#/definitions/DefaultAction'
        description: The action that you want your GraphQL API to take when a request that uses Amazon Cognito user pool authentication doesn't match the Amazon Cognito user pool configuration.
      appIdClientRegex:
        $ref: '#/definitions/String'
        description: A regular expression for validating the incoming Amazon Cognito user pool app client ID.
    description: Describes an Amazon Cognito user pool configuration.
  TagMap:
    type: object
    description: A map with keys of <code>TagKey</code> objects and values of <code>TagValue</code> objects.
    minProperties: 1
    maxProperties: 50
    additionalProperties:
      $ref: '#/definitions/TagValue'
  CreateGraphqlApiRequest:
    type: object
    required:
      - name
      - authenticationType
    properties:
      name:
        $ref: '#/definitions/String'
        description: A user-supplied name for the <code>GraphqlApi</code>.
      logConfig:
        $ref: '#/definitions/LogConfig'
        description: The Amazon CloudWatch Logs configuration.
      authenticationType:
        $ref: '#/definitions/AuthenticationType'
        description: 'The authentication type: API key, AWS IAM, OIDC, or Amazon Cognito user pools.'
      userPoolConfig:
        $ref: '#/definitions/UserPoolConfig'
        description: The Amazon Cognito user pool configuration.
      openIDConnectConfig:
        $ref: '#/definitions/OpenIDConnectConfig'
        description: The OpenID Connect configuration.
      tags:
        $ref: '#/definitions/TagMap'
        description: A <code>TagMap</code> object.
      additionalAuthenticationProviders:
        $ref: '#/definitions/AdditionalAuthenticationProviders'
        description: A list of additional authentication providers for the <code>GraphqlApi</code> API.
      xrayEnabled:
        $ref: '#/definitions/Boolean'
        description: A flag indicating whether to enable X-Ray tracing for the <code>GraphqlApi</code>.
  GraphqlApi:
    type: object
    properties:
      name:
        $ref: '#/definitions/ResourceName'
        description: The API name.
      apiId:
        $ref: '#/definitions/String'
        description: The API ID.
      authenticationType:
        $ref: '#/definitions/AuthenticationType'
        description: The authentication type.
      logConfig:
        $ref: '#/definitions/LogConfig'
        description: The Amazon CloudWatch Logs configuration.
      userPoolConfig:
        $ref: '#/definitions/UserPoolConfig'
        description: The Amazon Cognito user pool configuration.
      openIDConnectConfig:
        $ref: '#/definitions/OpenIDConnectConfig'
        description: The OpenID Connect configuration.
      arn:
        $ref: '#/definitions/String'
        description: The ARN.
      uris:
        $ref: '#/definitions/MapOfStringToString'
        description: The URIs.
      tags:
        $ref: '#/definitions/TagMap'
        description: The tags.
      additionalAuthenticationProviders:
        $ref: '#/definitions/AdditionalAuthenticationProviders'
        description: A list of additional authentication providers for the <code>GraphqlApi</code> API.
      xrayEnabled:
        $ref: '#/definitions/Boolean'
        description: A flag representing whether X-Ray tracing is enabled for this <code>GraphqlApi</code>.
    description: Describes a GraphQL API.
  ResolverKind:
    type: string
    enum:
      - UNIT
      - PIPELINE
  PipelineConfig:
    type: object
    properties:
      functions:
        $ref: '#/definitions/FunctionsIds'
        description: A list of <code>Function</code> objects.
    description: The pipeline configuration for a resolver of kind <code>PIPELINE</code>.
  SyncConfig:
    type: object
    properties:
      conflictHandler:
        $ref: '#/definitions/ConflictHandlerType'
        description: '<p>The Conflict Resolution strategy to perform in the event of a conflict.</p> <ul> <li> <p> <b>OPTIMISTIC_CONCURRENCY</b>: Resolve conflicts by rejecting mutations when versions do not match the latest version at the server.</p> </li> <li> <p> <b>AUTOMERGE</b>: Resolve conflicts with the Automerge conflict resolution strategy.</p> </li> <li> <p> <b>LAMBDA</b>: Resolve conflicts with a Lambda function supplied in the LambdaConflictHandlerConfig.</p> </li> </ul>'
      conflictDetection:
        $ref: '#/definitions/ConflictDetectionType'
        description: '<p>The Conflict Detection strategy to use.</p> <ul> <li> <p> <b>VERSION</b>: Detect conflicts based on object versions for this resolver.</p> </li> <li> <p> <b>NONE</b>: Do not detect conflicts when executing this resolver.</p> </li> </ul>'
      lambdaConflictHandlerConfig:
        $ref: '#/definitions/LambdaConflictHandlerConfig'
        description: The <code>LambdaConflictHandlerConfig</code> when configuring LAMBDA as the Conflict Handler.
    description: <p>Describes a Sync configuration for a resolver.</p> <p>Contains information on which Conflict Detection as well as Resolution strategy should be performed when the resolver is invoked.</p>
  CreateResolverRequest:
    type: object
    required:
      - fieldName
      - requestMappingTemplate
    properties:
      fieldName:
        $ref: '#/definitions/ResourceName'
        description: The name of the field to attach the resolver to.
      dataSourceName:
        $ref: '#/definitions/ResourceName'
        description: The name of the data source for which the resolver is being created.
      requestMappingTemplate:
        $ref: '#/definitions/MappingTemplate'
        description: <p>The mapping template to be used for requests.</p> <p>A resolver uses a request mapping template to convert a GraphQL expression into a format that a data source can understand. Mapping templates are written in Apache Velocity Template Language (VTL).</p>
      responseMappingTemplate:
        $ref: '#/definitions/MappingTemplate'
        description: The mapping template to be used for responses from the data source.
      kind:
        $ref: '#/definitions/ResolverKind'
        description: '<p>The resolver type.</p> <ul> <li> <p> <b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default resolver type. A UNIT resolver enables you to execute a GraphQL query against a single data source.</p> </li> <li> <p> <b>PIPELINE</b>: A PIPELINE resolver type. A PIPELINE resolver enables you to execute a series of <code>Function</code> in a serial manner. You can use a pipeline resolver to execute a GraphQL query against multiple data sources.</p> </li> </ul>'
      pipelineConfig:
        $ref: '#/definitions/PipelineConfig'
        description: The <code>PipelineConfig</code>.
      syncConfig:
        $ref: '#/definitions/SyncConfig'
        description: The <code>SyncConfig</code> for a resolver attached to a versioned datasource.
      cachingConfig:
        $ref: '#/definitions/CachingConfig'
        description: The caching configuration for the resolver.
  Resolver:
    type: object
    properties:
      typeName:
        $ref: '#/definitions/ResourceName'
        description: The resolver type name.
      fieldName:
        $ref: '#/definitions/ResourceName'
        description: The resolver field name.
      dataSourceName:
        $ref: '#/definitions/ResourceName'
        description: The resolver data source name.
      resolverArn:
        $ref: '#/definitions/String'
        description: The resolver ARN.
      requestMappingTemplate:
        $ref: '#/definitions/MappingTemplate'
        description: The request mapping template.
      responseMappingTemplate:
        $ref: '#/definitions/MappingTemplate'
        description: The response mapping template.
      kind:
        $ref: '#/definitions/ResolverKind'
        description: '<p>The resolver type.</p> <ul> <li> <p> <b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default resolver type. A UNIT resolver enables you to execute a GraphQL query against a single data source.</p> </li> <li> <p> <b>PIPELINE</b>: A PIPELINE resolver type. A PIPELINE resolver enables you to execute a series of <code>Function</code> in a serial manner. You can use a pipeline resolver to execute a GraphQL query against multiple data sources.</p> </li> </ul>'
      pipelineConfig:
        $ref: '#/definitions/PipelineConfig'
        description: The <code>PipelineConfig</code>.
      syncConfig:
        $ref: '#/definitions/SyncConfig'
        description: The <code>SyncConfig</code> for a resolver attached to a versioned datasource.
      cachingConfig:
        $ref: '#/definitions/CachingConfig'
        description: The caching configuration for the resolver.
    description: Describes a resolver.
  TypeDefinitionFormat:
    type: string
    enum:
      - SDL
      - JSON
  CreateTypeRequest:
    type: object
    required:
      - definition
      - format
    properties:
      definition:
        $ref: '#/definitions/String'
        description: '<p>The type definition, in GraphQL Schema Definition Language (SDL) format.</p> <p>For more information, see the <a href="http://graphql.org/learn/schema/">GraphQL SDL documentation</a>.</p>'
      format:
        $ref: '#/definitions/TypeDefinitionFormat'
        description: 'The type format: SDL or JSON.'
  Type:
    type: object
    properties:
      name:
        $ref: '#/definitions/ResourceName'
        description: The type name.
      description:
        $ref: '#/definitions/String'
        description: The type description.
      arn:
        $ref: '#/definitions/String'
        description: The type ARN.
      definition:
        $ref: '#/definitions/String'
        description: The type definition.
      format:
        $ref: '#/definitions/TypeDefinitionFormat'
        description: 'The type format: SDL or JSON.'
    description: Describes a type.
  DataSources:
    type: array
    items:
      $ref: '#/definitions/DataSource'
  DeleteApiCacheRequest:
    type: object
    properties: {}
    description: Represents the input of a <code>DeleteApiCache</code> operation.
  DeleteApiKeyRequest:
    type: object
    properties: {}
  DeleteDataSourceRequest:
    type: object
    properties: {}
  DeleteFunctionRequest:
    type: object
    properties: {}
  DeleteGraphqlApiRequest:
    type: object
    properties: {}
  DeleteResolverRequest:
    type: object
    properties: {}
  DeleteTypeRequest:
    type: object
    properties: {}
  FlushApiCacheRequest:
    type: object
    properties: {}
    description: Represents the input of a <code>FlushApiCache</code> operation.
  Functions:
    type: array
    items:
      $ref: '#/definitions/FunctionConfiguration'
  GetApiCacheRequest:
    type: object
    properties: {}
    description: Represents the input of a <code>GetApiCache</code> operation.
  GetDataSourceRequest:
    type: object
    properties: {}
  GetFunctionRequest:
    type: object
    properties: {}
  GetGraphqlApiRequest:
    type: object
    properties: {}
  OutputType:
    type: string
    enum:
      - SDL
      - JSON
  GetIntrospectionSchemaRequest:
    type: object
    properties: {}
  GetResolverRequest:
    type: object
    properties: {}
  GetSchemaCreationStatusRequest:
    type: object
    properties: {}
  SchemaStatus:
    type: string
    enum:
      - PROCESSING
      - ACTIVE
      - DELETING
      - FAILED
      - SUCCESS
      - NOT_APPLICABLE
  GetTypeRequest:
    type: object
    properties: {}
  MapOfStringToString:
    type: object
    additionalProperties:
      $ref: '#/definitions/String'
  GraphqlApis:
    type: array
    items:
      $ref: '#/definitions/GraphqlApi'
  PaginationToken:
    type: string
    pattern: '[\\S]+'
    minLength: 1
    maxLength: 65536
  MaxResults:
    type: integer
    minimum: 0
    maximum: 25
  ListApiKeysRequest:
    type: object
    properties: {}
  ListDataSourcesRequest:
    type: object
    properties: {}
  ListFunctionsRequest:
    type: object
    properties: {}
  ListGraphqlApisRequest:
    type: object
    properties: {}
  ListResolversByFunctionRequest:
    type: object
    properties: {}
  Resolvers:
    type: array
    items:
      $ref: '#/definitions/Resolver'
  ListResolversRequest:
    type: object
    properties: {}
  ResourceArn:
    type: string
    pattern: '^arn:aws:appsync:[A-Za-z0-9_/.-]{0,63}:\d{12}:apis/[0-9A-Za-z_-]{26}$'
    minLength: 70
    maxLength: 75
  ListTagsForResourceRequest:
    type: object
    properties: {}
  ListTypesRequest:
    type: object
    properties: {}
  TypeList:
    type: array
    items:
      $ref: '#/definitions/Type'
  StartSchemaCreationRequest:
    type: object
    required:
      - definition
    properties:
      definition:
        $ref: '#/definitions/Blob'
        description: 'The schema definition, in GraphQL schema language format.'
  TagKeyList:
    type: array
    items:
      $ref: '#/definitions/TagKey'
    minItems: 1
    maxItems: 50
  TagResourceRequest:
    type: object
    required:
      - tags
    properties:
      tags:
        $ref: '#/definitions/TagMap'
        description: A <code>TagMap</code> object.
  UntagResourceRequest:
    type: object
    properties: {}
  UpdateApiCacheRequest:
    type: object
    required:
      - ttl
      - apiCachingBehavior
      - type
    properties:
      ttl:
        $ref: '#/definitions/Long'
        description: <p>TTL in seconds for cache entries.</p> <p>Valid values are between 1 and 3600 seconds.</p>
      apiCachingBehavior:
        $ref: '#/definitions/ApiCachingBehavior'
        description: '<p>Caching behavior.</p> <ul> <li> <p> <b>FULL_REQUEST_CACHING</b>: All requests are fully cached.</p> </li> <li> <p> <b>PER_RESOLVER_CACHING</b>: Individual resovlers that you specify are cached.</p> </li> </ul>'
      type:
        $ref: '#/definitions/ApiCacheType'
        description: '<p>The cache instance type.</p> <ul> <li> <p> <b>T2_SMALL</b>: A t2.small instance type.</p> </li> <li> <p> <b>T2_MEDIUM</b>: A t2.medium instance type.</p> </li> <li> <p> <b>R4_LARGE</b>: A r4.large instance type.</p> </li> <li> <p> <b>R4_XLARGE</b>: A r4.xlarge instance type.</p> </li> <li> <p> <b>R4_2XLARGE</b>: A r4.2xlarge instance type.</p> </li> <li> <p> <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p> </li> <li> <p> <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p> </li> </ul>'
    description: Represents the input of a <code>UpdateApiCache</code> operation.
  UpdateApiKeyRequest:
    type: object
    properties:
      description:
        $ref: '#/definitions/String'
        description: A description of the purpose of the API key.
      expires:
        $ref: '#/definitions/Long'
        description: 'The time from update time after which the API key expires. The date is represented as seconds since the epoch. For more information, see .'
  UpdateDataSourceRequest:
    type: object
    required:
      - type
    properties:
      description:
        $ref: '#/definitions/String'
        description: The new description for the data source.
      type:
        $ref: '#/definitions/DataSourceType'
        description: The new data source type.
      serviceRoleArn:
        $ref: '#/definitions/String'
        description: The new service role ARN for the data source.
      dynamodbConfig:
        $ref: '#/definitions/DynamodbDataSourceConfig'
        description: The new Amazon DynamoDB configuration.
      lambdaConfig:
        $ref: '#/definitions/LambdaDataSourceConfig'
        description: The new AWS Lambda configuration.
      elasticsearchConfig:
        $ref: '#/definitions/ElasticsearchDataSourceConfig'
        description: The new Elasticsearch Service configuration.
      httpConfig:
        $ref: '#/definitions/HttpDataSourceConfig'
        description: The new HTTP endpoint configuration.
      relationalDatabaseConfig:
        $ref: '#/definitions/RelationalDatabaseDataSourceConfig'
        description: The new relational database configuration.
  UpdateFunctionRequest:
    type: object
    required:
      - name
      - dataSourceName
      - requestMappingTemplate
      - functionVersion
    properties:
      name:
        $ref: '#/definitions/ResourceName'
        description: The <code>Function</code> name.
      description:
        $ref: '#/definitions/String'
        description: The <code>Function</code> description.
      dataSourceName:
        $ref: '#/definitions/ResourceName'
        description: The <code>Function</code> <code>DataSource</code> name.
      requestMappingTemplate:
        $ref: '#/definitions/MappingTemplate'
        description: The <code>Function</code> request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
      responseMappingTemplate:
        $ref: '#/definitions/MappingTemplate'
        description: 'The <code>Function</code> request mapping template. '
      functionVersion:
        $ref: '#/definitions/String'
        description: 'The <code>version</code> of the request mapping template. Currently the supported value is 2018-05-29. '
  UpdateGraphqlApiRequest:
    type: object
    required:
      - name
    properties:
      name:
        $ref: '#/definitions/String'
        description: The new name for the <code>GraphqlApi</code> object.
      logConfig:
        $ref: '#/definitions/LogConfig'
        description: The Amazon CloudWatch Logs configuration for the <code>GraphqlApi</code> object.
      authenticationType:
        $ref: '#/definitions/AuthenticationType'
        description: The new authentication type for the <code>GraphqlApi</code> object.
      userPoolConfig:
        $ref: '#/definitions/UserPoolConfig'
        description: The new Amazon Cognito user pool configuration for the <code>GraphqlApi</code> object.
      openIDConnectConfig:
        $ref: '#/definitions/OpenIDConnectConfig'
        description: The OpenID Connect configuration for the <code>GraphqlApi</code> object.
      additionalAuthenticationProviders:
        $ref: '#/definitions/AdditionalAuthenticationProviders'
        description: A list of additional authentication providers for the <code>GraphqlApi</code> API.
      xrayEnabled:
        $ref: '#/definitions/Boolean'
        description: A flag indicating whether to enable X-Ray tracing for the <code>GraphqlApi</code>.
  UpdateResolverRequest:
    type: object
    required:
      - requestMappingTemplate
    properties:
      dataSourceName:
        $ref: '#/definitions/ResourceName'
        description: The new data source name.
      requestMappingTemplate:
        $ref: '#/definitions/MappingTemplate'
        description: The new request mapping template.
      responseMappingTemplate:
        $ref: '#/definitions/MappingTemplate'
        description: The new response mapping template.
      kind:
        $ref: '#/definitions/ResolverKind'
        description: '<p>The resolver type.</p> <ul> <li> <p> <b>UNIT</b>: A UNIT resolver type. A UNIT resolver is the default resolver type. A UNIT resolver enables you to execute a GraphQL query against a single data source.</p> </li> <li> <p> <b>PIPELINE</b>: A PIPELINE resolver type. A PIPELINE resolver enables you to execute a series of <code>Function</code> in a serial manner. You can use a pipeline resolver to execute a GraphQL query against multiple data sources.</p> </li> </ul>'
      pipelineConfig:
        $ref: '#/definitions/PipelineConfig'
        description: The <code>PipelineConfig</code>.
      syncConfig:
        $ref: '#/definitions/SyncConfig'
        description: The <code>SyncConfig</code> for a resolver attached to a versioned datasource.
      cachingConfig:
        $ref: '#/definitions/CachingConfig'
        description: The caching configuration for the resolver.
  UpdateTypeRequest:
    type: object
    required:
      - format
    properties:
      definition:
        $ref: '#/definitions/String'
        description: The new definition.
      format:
        $ref: '#/definitions/TypeDefinitionFormat'
        description: 'The new type format: SDL or JSON.'
