swagger: '2.0'
info:
  version: '2018-08-01'
  x-release: v4
  title: AWS RDS DataService
  description: '<p><fullname>Amazon RDS Data Service</fullname> <p>Amazon RDS provides an HTTP endpoint to run SQL statements on an Amazon Aurora Serverless DB cluster. To run these statements, you work with the Data Service API.</p> <p>For more information about the Data Service API, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the <i>Amazon Aurora User Guide</i>.</p> <note> <p>If you have questions or comments related to the Data API, send email to <a href="mailto:Rds-data-api-feedback@amazon.com">Rds-data-api-feedback@amazon.com</a>.</p> </note></p>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: rds-data
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/rds-data-2018-08-01.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/rds-data/'
host: rds-data.amazonaws.com
basePath: /
schemes:
  - https
  - http
x-servers:
  - url: 'http://rds-data.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS RDS DataService multi-region endpoint
  - url: 'https://rds-data.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS RDS DataService multi-region endpoint
  - url: 'http://rds-data.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS RDS DataService endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://rds-data.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS RDS DataService endpoint for China (Beijing) and China (Ningxia)
consumes:
  - application/json
produces:
  - application/json
parameters:
  X-Amz-Content-Sha256:
    name: X-Amz-Content-Sha256
    in: header
    type: string
    required: false
  X-Amz-Date:
    name: X-Amz-Date
    in: header
    type: string
    required: false
  X-Amz-Algorithm:
    name: X-Amz-Algorithm
    in: header
    type: string
    required: false
  X-Amz-Credential:
    name: X-Amz-Credential
    in: header
    type: string
    required: false
  X-Amz-Security-Token:
    name: X-Amz-Security-Token
    in: header
    type: string
    required: false
  X-Amz-Signature:
    name: X-Amz-Signature
    in: header
    type: string
    required: false
  X-Amz-SignedHeaders:
    name: X-Amz-SignedHeaders
    in: header
    type: string
    required: false
securityDefinitions:
  hmac:
    type: apiKey
    name: Authorization
    in: header
    description: Amazon Signature authorization v4
    x-amazon-apigateway-authtype: awsSigv4
security:
  - hmac: []
paths:
  /BatchExecute:
    post:
      operationId: BatchExecuteStatement
      description: '<p>Runs a batch SQL statement over an array of data.</p> <p>You can run bulk update and insert operations for multiple records using a DML statement with different parameter sets. Bulk operations can provide a significant performance improvement over individual insert and update operations.</p> <important> <p>If a call isn''t part of a transaction because it doesn''t include the <code>transactionID</code> parameter, changes that result from the call are committed automatically.</p> </important>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BatchExecuteStatementResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: StatementTimeoutException
          schema:
            $ref: '#/definitions/StatementTimeoutException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '484':
          description: ServiceUnavailableError
          schema:
            $ref: '#/definitions/ServiceUnavailableError'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - resourceArn
              - secretArn
              - sql
            properties:
              database:
                description: The name of the database.
                type: string
                minLength: 0
                maxLength: 64
              parameterSets:
                description: '<p>The parameter set for the batch operation.</p> <p>The maximum number of parameters in a parameter set is 1,000.</p>'
                type: array
                items:
                  $ref: '#/definitions/SqlParametersList'
              resourceArn:
                description: The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
                type: string
                minLength: 11
                maxLength: 100
              schema:
                description: The name of the database schema.
                type: string
                minLength: 0
                maxLength: 64
              secretArn:
                description: The name or ARN of the secret that enables access to the DB cluster.
                type: string
                minLength: 11
                maxLength: 100
              sql:
                description: The SQL statement to run.
                type: string
                minLength: 0
                maxLength: 65536
              transactionId:
                description: '<p>The identifier of a transaction that was started by using the <code>BeginTransaction</code> operation. Specify the transaction ID of the transaction that you want to include the SQL statement in.</p> <p>If the SQL statement is not part of a transaction, don''t set this parameter.</p>'
                type: string
                minLength: 0
                maxLength: 192
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  /BeginTransaction:
    post:
      operationId: BeginTransaction
      description: '<p>Starts a SQL transaction.</p> <pre><code> &lt;important&gt; &lt;p&gt;A transaction can run for a maximum of 24 hours. A transaction is terminated and rolled back automatically after 24 hours.&lt;/p&gt; &lt;p&gt;A transaction times out if no calls use its transaction ID in three minutes. If a transaction times out before it''s committed, it''s rolled back automatically.&lt;/p&gt; &lt;p&gt;DDL statements inside a transaction cause an implicit commit. We recommend that you run each DDL statement in a separate &lt;code&gt;ExecuteStatement&lt;/code&gt; call with &lt;code&gt;continueAfterTimeout&lt;/code&gt; enabled.&lt;/p&gt; &lt;/important&gt; </code></pre>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BeginTransactionResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: StatementTimeoutException
          schema:
            $ref: '#/definitions/StatementTimeoutException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '484':
          description: ServiceUnavailableError
          schema:
            $ref: '#/definitions/ServiceUnavailableError'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - resourceArn
              - secretArn
            properties:
              database:
                description: The name of the database.
                type: string
                minLength: 0
                maxLength: 64
              resourceArn:
                description: The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
                type: string
                minLength: 11
                maxLength: 100
              schema:
                description: The name of the database schema.
                type: string
                minLength: 0
                maxLength: 64
              secretArn:
                description: The name or ARN of the secret that enables access to the DB cluster.
                type: string
                minLength: 11
                maxLength: 100
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  /CommitTransaction:
    post:
      operationId: CommitTransaction
      description: Ends a SQL transaction started with the <code>BeginTransaction</code> operation and commits the changes.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CommitTransactionResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: StatementTimeoutException
          schema:
            $ref: '#/definitions/StatementTimeoutException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '484':
          description: ServiceUnavailableError
          schema:
            $ref: '#/definitions/ServiceUnavailableError'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - resourceArn
              - secretArn
              - transactionId
            properties:
              resourceArn:
                description: The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
                type: string
                minLength: 11
                maxLength: 100
              secretArn:
                description: The name or ARN of the secret that enables access to the DB cluster.
                type: string
                minLength: 11
                maxLength: 100
              transactionId:
                description: The identifier of the transaction to end and commit.
                type: string
                minLength: 0
                maxLength: 192
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  /ExecuteSql:
    post:
      deprecated: true
      operationId: ExecuteSql
      description: <p>Runs one or more SQL statements.</p> <important> <p>This operation is deprecated. Use the <code>BatchExecuteStatement</code> or <code>ExecuteStatement</code> operation.</p> </important>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ExecuteSqlResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '482':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '483':
          description: ServiceUnavailableError
          schema:
            $ref: '#/definitions/ServiceUnavailableError'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - awsSecretStoreArn
              - dbClusterOrInstanceArn
              - sqlStatements
            properties:
              awsSecretStoreArn:
                description: The Amazon Resource Name (ARN) of the secret that enables access to the DB cluster.
                type: string
                minLength: 11
                maxLength: 100
              database:
                description: The name of the database.
                type: string
                minLength: 0
                maxLength: 64
              dbClusterOrInstanceArn:
                description: The ARN of the Aurora Serverless DB cluster.
                type: string
                minLength: 11
                maxLength: 100
              schema:
                description: The name of the database schema.
                type: string
                minLength: 0
                maxLength: 64
              sqlStatements:
                description: '<p>One or more SQL statements to run on the DB cluster.</p> <p>You can separate SQL statements from each other with a semicolon (;). Any valid SQL statement is permitted, including data definition, data manipulation, and commit statements. </p>'
                type: string
                minLength: 0
                maxLength: 65536
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  /Execute:
    post:
      operationId: ExecuteStatement
      description: '<p>Runs a SQL statement against a database.</p> <important> <p>If a call isn''t part of a transaction because it doesn''t include the <code>transactionID</code> parameter, changes that result from the call are committed automatically.</p> </important> <p>The response size limit is 1 MB or 1,000 records. If the call returns more than 1 MB of response data or over 1,000 records, the call is terminated.</p>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ExecuteStatementResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: StatementTimeoutException
          schema:
            $ref: '#/definitions/StatementTimeoutException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '484':
          description: ServiceUnavailableError
          schema:
            $ref: '#/definitions/ServiceUnavailableError'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - resourceArn
              - secretArn
              - sql
            properties:
              continueAfterTimeout:
                description: '<p>A value that indicates whether to continue running the statement after the call times out. By default, the statement stops running when the call times out.</p> <important> <p>For DDL statements, we recommend continuing to run the statement after the call times out. When a DDL statement terminates before it is finished running, it can result in errors and possibly corrupted data structures.</p> </important>'
                type: boolean
              database:
                description: The name of the database.
                type: string
                minLength: 0
                maxLength: 64
              includeResultMetadata:
                description: A value that indicates whether to include metadata in the results.
                type: boolean
              parameters:
                description: The parameters for the SQL statement.
                type: array
                items:
                  $ref: '#/definitions/SqlParameter'
              resourceArn:
                description: The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
                type: string
                minLength: 11
                maxLength: 100
              resultSetOptions:
                description: Options that control how the result set is returned.
                type: object
                properties:
                  decimalReturnType:
                    $ref: '#/definitions/DecimalReturnType'
                    description: '<p>A value that indicates how a field of <code>DECIMAL</code> type is represented in the response. The value of <code>STRING</code>, the default, specifies that it is converted to a String value. The value of <code>DOUBLE_OR_LONG</code> specifies that it is converted to a Long value if its scale is 0, or to a Double value otherwise.</p> <important> <p>Conversion to Double or Long can result in roundoff errors due to precision loss. We recommend converting to String, especially when working with currency values.</p> </important>'
              schema:
                description: The name of the database schema.
                type: string
                minLength: 0
                maxLength: 64
              secretArn:
                description: The name or ARN of the secret that enables access to the DB cluster.
                type: string
                minLength: 11
                maxLength: 100
              sql:
                description: The SQL statement to run.
                type: string
                minLength: 0
                maxLength: 65536
              transactionId:
                description: '<p>The identifier of a transaction that was started by using the <code>BeginTransaction</code> operation. Specify the transaction ID of the transaction that you want to include the SQL statement in.</p> <p>If the SQL statement is not part of a transaction, don''t set this parameter.</p>'
                type: string
                minLength: 0
                maxLength: 192
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  /RollbackTransaction:
    post:
      operationId: RollbackTransaction
      description: Performs a rollback of a transaction. Rolling back a transaction cancels its changes.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/RollbackTransactionResponse'
        '480':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '481':
          description: StatementTimeoutException
          schema:
            $ref: '#/definitions/StatementTimeoutException'
        '482':
          description: InternalServerErrorException
          schema:
            $ref: '#/definitions/InternalServerErrorException'
        '483':
          description: ForbiddenException
          schema:
            $ref: '#/definitions/ForbiddenException'
        '484':
          description: ServiceUnavailableError
          schema:
            $ref: '#/definitions/ServiceUnavailableError'
        '485':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - resourceArn
              - secretArn
              - transactionId
            properties:
              resourceArn:
                description: The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
                type: string
                minLength: 11
                maxLength: 100
              secretArn:
                description: The name or ARN of the secret that enables access to the DB cluster.
                type: string
                minLength: 11
                maxLength: 100
              transactionId:
                description: The identifier of the transaction to roll back.
                type: string
                minLength: 0
                maxLength: 192
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
definitions:
  BatchExecuteStatementResponse:
    type: object
    properties:
      updateResults:
        $ref: '#/definitions/UpdateResults'
        description: The execution results of each batch entry.
    description: The response elements represent the output of a SQL statement over an array of data.
  SqlParametersList:
    type: array
    items:
      $ref: '#/definitions/SqlParameter'
  BadRequestException: {}
  StatementTimeoutException: {}
  InternalServerErrorException: {}
  ForbiddenException: {}
  ServiceUnavailableError: {}
  BeginTransactionResponse:
    type: object
    properties:
      transactionId:
        $ref: '#/definitions/Id'
        description: The transaction ID of the transaction started by the call.
    description: The response elements represent the output of a request to start a SQL transaction.
  CommitTransactionResponse:
    type: object
    properties:
      transactionStatus:
        $ref: '#/definitions/TransactionStatus'
        description: The status of the commit operation.
    description: The response elements represent the output of a commit transaction request.
  NotFoundException: {}
  ExecuteSqlResponse:
    type: object
    properties:
      sqlStatementResults:
        $ref: '#/definitions/SqlStatementResults'
        description: The results of the SQL statement or statements.
    description: The response elements represent the output of a request to run one or more SQL statements.
  ExecuteStatementResponse:
    type: object
    properties:
      columnMetadata:
        $ref: '#/definitions/Metadata'
        description: Metadata for the columns included in the results.
      generatedFields:
        $ref: '#/definitions/FieldList'
        description: '<p>Values for fields generated during the request.</p> <pre><code> &lt;note&gt; &lt;p&gt;The &lt;code&gt;generatedFields&lt;/code&gt; data isn''t supported by Aurora PostgreSQL. To get the values of generated fields, use the &lt;code&gt;RETURNING&lt;/code&gt; clause. For more information, see &lt;a href=&quot;https://www.postgresql.org/docs/10/dml-returning.html&quot;&gt;Returning Data From Modified Rows&lt;/a&gt; in the PostgreSQL documentation.&lt;/p&gt; &lt;/note&gt; </code></pre>'
      numberOfRecordsUpdated:
        $ref: '#/definitions/RecordsUpdated'
        description: The number of records updated by the request.
      records:
        $ref: '#/definitions/SqlRecords'
        description: The records returned by the SQL statement.
    description: The response elements represent the output of a request to run a SQL statement against a database.
  SqlParameter:
    type: object
    properties:
      name:
        $ref: '#/definitions/ParameterName'
        description: The name of the parameter.
      typeHint:
        $ref: '#/definitions/TypeHint'
        description: '<p>A hint that specifies the correct object type for data type mapping.</p> <p> <b>Values:</b> </p> <ul> <li> <p> <code>DECIMAL</code> - The corresponding <code>String</code> parameter value is sent as an object of <code>DECIMAL</code> type to the database.</p> </li> <li> <p> <code>TIMESTAMP</code> - The corresponding <code>String</code> parameter value is sent as an object of <code>TIMESTAMP</code> type to the database. The accepted format is <code>YYYY-MM-DD HH:MM:SS[.FFF]</code>.</p> </li> <li> <p> <code>TIME</code> - The corresponding <code>String</code> parameter value is sent as an object of <code>TIME</code> type to the database. The accepted format is <code>HH:MM:SS[.FFF]</code>.</p> </li> <li> <p> <code>DATE</code> - The corresponding <code>String</code> parameter value is sent as an object of <code>DATE</code> type to the database. The accepted format is <code>YYYY-MM-DD</code>.</p> </li> </ul>'
      value:
        $ref: '#/definitions/Field'
        description: The value of the parameter.
    description: A parameter used in a SQL statement.
  DecimalReturnType:
    type: string
    enum:
      - DOUBLE_OR_LONG
      - STRING
  RollbackTransactionResponse:
    type: object
    properties:
      transactionStatus:
        $ref: '#/definitions/TransactionStatus'
        description: The status of the rollback operation.
    description: The response elements represent the output of a request to perform a rollback of a transaction.
  Arn:
    type: string
    minLength: 11
    maxLength: 100
  ArrayValue:
    type: object
    properties:
      arrayValues:
        $ref: '#/definitions/ArrayOfArray'
        description: An array of arrays.
      booleanValues:
        $ref: '#/definitions/BooleanArray'
        description: An array of Boolean values.
      doubleValues:
        $ref: '#/definitions/DoubleArray'
        description: An array of integers.
      longValues:
        $ref: '#/definitions/LongArray'
        description: An array of floating point numbers.
      stringValues:
        $ref: '#/definitions/StringArray'
        description: An array of strings.
    description: Contains an array.
  ArrayOfArray:
    type: array
    description: <p>An array of arrays.</p> <note> <p>Some array entries can be null.</p> </note>
    items:
      $ref: '#/definitions/ArrayValue'
  BooleanArray:
    type: array
    description: <p>An array of Boolean values.</p> <note> <p>Some array entries can be null.</p> </note>
    items:
      $ref: '#/definitions/BoxedBoolean'
  DoubleArray:
    type: array
    description: <p>An array of floating point numbers.</p> <note> <p>Some array entries can be null.</p> </note>
    items:
      $ref: '#/definitions/BoxedDouble'
  LongArray:
    type: array
    description: <p>An array of integers.</p> <note> <p>Some array entries can be null.</p> </note>
    items:
      $ref: '#/definitions/BoxedLong'
  StringArray:
    type: array
    description: <p>An array of strings.</p> <note> <p>Some array entries can be null.</p> </note>
    items:
      $ref: '#/definitions/String'
  Value:
    type: object
    properties:
      arrayValues:
        $ref: '#/definitions/ArrayValueList'
        description: An array of column values.
      bigIntValue:
        $ref: '#/definitions/BoxedLong'
        description: A value for a column of big integer data type.
      bitValue:
        $ref: '#/definitions/BoxedBoolean'
        description: A value for a column of BIT data type.
      blobValue:
        $ref: '#/definitions/Blob'
        description: A value for a column of BLOB data type.
      doubleValue:
        $ref: '#/definitions/BoxedDouble'
        description: A value for a column of double data type.
      intValue:
        $ref: '#/definitions/BoxedInteger'
        description: A value for a column of integer data type.
      isNull:
        $ref: '#/definitions/BoxedBoolean'
        description: A NULL value.
      realValue:
        $ref: '#/definitions/BoxedFloat'
        description: A value for a column of real data type.
      stringValue:
        $ref: '#/definitions/String'
        description: A value for a column of string data type.
      structValue:
        $ref: '#/definitions/StructValue'
        description: A value for a column of STRUCT data type.
    description: <p>Contains the value of a column.</p> <pre><code> &lt;important&gt; &lt;p&gt;This data type is deprecated.&lt;/p&gt; &lt;/important&gt; </code></pre>
  ArrayValueList:
    type: array
    items:
      $ref: '#/definitions/Value'
  DbName:
    type: string
    minLength: 0
    maxLength: 64
  SqlParameterSets:
    type: array
    items:
      $ref: '#/definitions/SqlParametersList'
  SqlStatement:
    type: string
    minLength: 0
    maxLength: 65536
  Id:
    type: string
    minLength: 0
    maxLength: 192
  BatchExecuteStatementRequest:
    type: object
    required:
      - resourceArn
      - secretArn
      - sql
    properties:
      database:
        $ref: '#/definitions/DbName'
        description: The name of the database.
      parameterSets:
        $ref: '#/definitions/SqlParameterSets'
        description: '<p>The parameter set for the batch operation.</p> <p>The maximum number of parameters in a parameter set is 1,000.</p>'
      resourceArn:
        $ref: '#/definitions/Arn'
        description: The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
      schema:
        $ref: '#/definitions/DbName'
        description: The name of the database schema.
      secretArn:
        $ref: '#/definitions/Arn'
        description: The name or ARN of the secret that enables access to the DB cluster.
      sql:
        $ref: '#/definitions/SqlStatement'
        description: The SQL statement to run.
      transactionId:
        $ref: '#/definitions/Id'
        description: '<p>The identifier of a transaction that was started by using the <code>BeginTransaction</code> operation. Specify the transaction ID of the transaction that you want to include the SQL statement in.</p> <p>If the SQL statement is not part of a transaction, don''t set this parameter.</p>'
    description: The request parameters represent the input of a SQL statement over an array of data.
  UpdateResults:
    type: array
    items:
      $ref: '#/definitions/UpdateResult'
  BeginTransactionRequest:
    type: object
    required:
      - resourceArn
      - secretArn
    properties:
      database:
        $ref: '#/definitions/DbName'
        description: The name of the database.
      resourceArn:
        $ref: '#/definitions/Arn'
        description: The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
      schema:
        $ref: '#/definitions/DbName'
        description: The name of the database schema.
      secretArn:
        $ref: '#/definitions/Arn'
        description: The name or ARN of the secret that enables access to the DB cluster.
    description: The request parameters represent the input of a request to start a SQL transaction.
  Blob:
    type: string
  Boolean:
    type: boolean
  BoxedBoolean:
    type: boolean
  BoxedDouble:
    type: number
    format: double
  BoxedFloat:
    type: number
    format: float
  BoxedInteger:
    type: integer
  BoxedLong:
    type: integer
  Integer:
    type: integer
  String:
    type: string
  ColumnMetadata:
    type: object
    properties:
      arrayBaseColumnType:
        $ref: '#/definitions/Integer'
        description: The type of the column.
      isAutoIncrement:
        $ref: '#/definitions/Boolean'
        description: A value that indicates whether the column increments automatically.
      isCaseSensitive:
        $ref: '#/definitions/Boolean'
        description: A value that indicates whether the column is case-sensitive.
      isCurrency:
        $ref: '#/definitions/Boolean'
        description: A value that indicates whether the column contains currency values.
      isSigned:
        $ref: '#/definitions/Boolean'
        description: A value that indicates whether an integer column is signed.
      label:
        $ref: '#/definitions/String'
        description: The label for the column.
      name:
        $ref: '#/definitions/String'
        description: The name of the column.
      nullable:
        $ref: '#/definitions/Integer'
        description: A value that indicates whether the column is nullable.
      precision:
        $ref: '#/definitions/Integer'
        description: The precision value of a decimal number column.
      scale:
        $ref: '#/definitions/Integer'
        description: The scale value of a decimal number column.
      schemaName:
        $ref: '#/definitions/String'
        description: The name of the schema that owns the table that includes the column.
      tableName:
        $ref: '#/definitions/String'
        description: The name of the table that includes the column.
      type:
        $ref: '#/definitions/Integer'
        description: The type of the column.
      typeName:
        $ref: '#/definitions/String'
        description: The database-specific data type of the column.
    description: Contains the metadata for a column.
  CommitTransactionRequest:
    type: object
    required:
      - resourceArn
      - secretArn
      - transactionId
    properties:
      resourceArn:
        $ref: '#/definitions/Arn'
        description: The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
      secretArn:
        $ref: '#/definitions/Arn'
        description: The name or ARN of the secret that enables access to the DB cluster.
      transactionId:
        $ref: '#/definitions/Id'
        description: The identifier of the transaction to end and commit.
    description: The request parameters represent the input of a commit transaction request.
  TransactionStatus:
    type: string
    minLength: 0
    maxLength: 128
  ExecuteSqlRequest:
    type: object
    required:
      - awsSecretStoreArn
      - dbClusterOrInstanceArn
      - sqlStatements
    properties:
      awsSecretStoreArn:
        $ref: '#/definitions/Arn'
        description: The Amazon Resource Name (ARN) of the secret that enables access to the DB cluster.
      database:
        $ref: '#/definitions/DbName'
        description: The name of the database.
      dbClusterOrInstanceArn:
        $ref: '#/definitions/Arn'
        description: The ARN of the Aurora Serverless DB cluster.
      schema:
        $ref: '#/definitions/DbName'
        description: The name of the database schema.
      sqlStatements:
        $ref: '#/definitions/SqlStatement'
        description: '<p>One or more SQL statements to run on the DB cluster.</p> <p>You can separate SQL statements from each other with a semicolon (;). Any valid SQL statement is permitted, including data definition, data manipulation, and commit statements. </p>'
    description: The request parameters represent the input of a request to run one or more SQL statements.
  SqlStatementResults:
    type: array
    items:
      $ref: '#/definitions/SqlStatementResult'
  ResultSetOptions:
    type: object
    properties:
      decimalReturnType:
        $ref: '#/definitions/DecimalReturnType'
        description: '<p>A value that indicates how a field of <code>DECIMAL</code> type is represented in the response. The value of <code>STRING</code>, the default, specifies that it is converted to a String value. The value of <code>DOUBLE_OR_LONG</code> specifies that it is converted to a Long value if its scale is 0, or to a Double value otherwise.</p> <important> <p>Conversion to Double or Long can result in roundoff errors due to precision loss. We recommend converting to String, especially when working with currency values.</p> </important>'
    description: Options that control how the result set is returned.
  ExecuteStatementRequest:
    type: object
    required:
      - resourceArn
      - secretArn
      - sql
    properties:
      continueAfterTimeout:
        $ref: '#/definitions/Boolean'
        description: '<p>A value that indicates whether to continue running the statement after the call times out. By default, the statement stops running when the call times out.</p> <important> <p>For DDL statements, we recommend continuing to run the statement after the call times out. When a DDL statement terminates before it is finished running, it can result in errors and possibly corrupted data structures.</p> </important>'
      database:
        $ref: '#/definitions/DbName'
        description: The name of the database.
      includeResultMetadata:
        $ref: '#/definitions/Boolean'
        description: A value that indicates whether to include metadata in the results.
      parameters:
        $ref: '#/definitions/SqlParametersList'
        description: The parameters for the SQL statement.
      resourceArn:
        $ref: '#/definitions/Arn'
        description: The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
      resultSetOptions:
        $ref: '#/definitions/ResultSetOptions'
        description: Options that control how the result set is returned.
      schema:
        $ref: '#/definitions/DbName'
        description: The name of the database schema.
      secretArn:
        $ref: '#/definitions/Arn'
        description: The name or ARN of the secret that enables access to the DB cluster.
      sql:
        $ref: '#/definitions/SqlStatement'
        description: The SQL statement to run.
      transactionId:
        $ref: '#/definitions/Id'
        description: '<p>The identifier of a transaction that was started by using the <code>BeginTransaction</code> operation. Specify the transaction ID of the transaction that you want to include the SQL statement in.</p> <p>If the SQL statement is not part of a transaction, don''t set this parameter.</p>'
    description: The request parameters represent the input of a request to run a SQL statement against a database.
  Metadata:
    type: array
    items:
      $ref: '#/definitions/ColumnMetadata'
  FieldList:
    type: array
    items:
      $ref: '#/definitions/Field'
  RecordsUpdated:
    type: integer
  SqlRecords:
    type: array
    items:
      $ref: '#/definitions/FieldList'
  Field:
    type: object
    properties:
      arrayValue:
        $ref: '#/definitions/ArrayValue'
        description: An array of values.
      blobValue:
        $ref: '#/definitions/Blob'
        description: A value of BLOB data type.
      booleanValue:
        $ref: '#/definitions/BoxedBoolean'
        description: A value of Boolean data type.
      doubleValue:
        $ref: '#/definitions/BoxedDouble'
        description: A value of double data type.
      isNull:
        $ref: '#/definitions/BoxedBoolean'
        description: A NULL value.
      longValue:
        $ref: '#/definitions/BoxedLong'
        description: A value of long data type.
      stringValue:
        $ref: '#/definitions/String'
        description: A value of string data type.
    description: Contains a value.
  Long:
    type: integer
  ParameterName:
    type: string
  Row:
    type: array
    items:
      $ref: '#/definitions/Value'
  Record:
    type: object
    properties:
      values:
        $ref: '#/definitions/Row'
        description: The values returned in the record.
    description: A record returned by a call.
  Records:
    type: array
    items:
      $ref: '#/definitions/Record'
  ResultSetMetadata:
    type: object
    properties:
      columnCount:
        $ref: '#/definitions/Long'
        description: The number of columns in the result set.
      columnMetadata:
        $ref: '#/definitions/Metadata'
        description: The metadata of the columns in the result set.
    description: The metadata of the result set returned by a SQL statement.
  ResultFrame:
    type: object
    properties:
      records:
        $ref: '#/definitions/Records'
        description: The records in the result set.
      resultSetMetadata:
        $ref: '#/definitions/ResultSetMetadata'
        description: The result-set metadata in the result set.
    description: The result set returned by a SQL statement.
  RollbackTransactionRequest:
    type: object
    required:
      - resourceArn
      - secretArn
      - transactionId
    properties:
      resourceArn:
        $ref: '#/definitions/Arn'
        description: The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
      secretArn:
        $ref: '#/definitions/Arn'
        description: The name or ARN of the secret that enables access to the DB cluster.
      transactionId:
        $ref: '#/definitions/Id'
        description: The identifier of the transaction to roll back.
    description: The request parameters represent the input of a request to perform a rollback of a transaction.
  TypeHint:
    type: string
    enum:
      - DATE
      - DECIMAL
      - TIME
      - TIMESTAMP
  SqlStatementResult:
    type: object
    properties:
      numberOfRecordsUpdated:
        $ref: '#/definitions/RecordsUpdated'
        description: The number of records updated by a SQL statement.
      resultFrame:
        $ref: '#/definitions/ResultFrame'
        description: The result set of the SQL statement.
    description: <p>The result of a SQL statement.</p> <pre><code> &lt;important&gt; &lt;p&gt;This data type is deprecated.&lt;/p&gt; &lt;/important&gt; </code></pre>
  StructValue:
    type: object
    properties:
      attributes:
        $ref: '#/definitions/ArrayValueList'
        description: The attributes returned in the record.
    description: A structure value returned by a call.
  UpdateResult:
    type: object
    properties:
      generatedFields:
        $ref: '#/definitions/FieldList'
        description: Values for fields generated during the request.
    description: The response elements represent the results of an update.
