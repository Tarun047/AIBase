swagger: '2.0'
info:
  version: '2018-11-29'
  x-release: v4
  title: AmazonApiGatewayV2
  description: Amazon API Gateway V2
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: apigatewayv2
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/apigatewayv2-2018-11-29.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/apigateway/'
host: apigateway.amazonaws.com
basePath: /
schemes:
  - https
  - http
x-servers:
  - url: 'http://apigateway.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AmazonApiGatewayV2 multi-region endpoint
  - url: 'https://apigateway.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AmazonApiGatewayV2 multi-region endpoint
  - url: 'http://apigateway.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AmazonApiGatewayV2 endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://apigateway.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AmazonApiGatewayV2 endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
consumes:
  - application/json
produces:
  - application/json
parameters:
  X-Amz-Content-Sha256:
    name: X-Amz-Content-Sha256
    in: header
    type: string
    required: false
  X-Amz-Date:
    name: X-Amz-Date
    in: header
    type: string
    required: false
  X-Amz-Algorithm:
    name: X-Amz-Algorithm
    in: header
    type: string
    required: false
  X-Amz-Credential:
    name: X-Amz-Credential
    in: header
    type: string
    required: false
  X-Amz-Security-Token:
    name: X-Amz-Security-Token
    in: header
    type: string
    required: false
  X-Amz-Signature:
    name: X-Amz-Signature
    in: header
    type: string
    required: false
  X-Amz-SignedHeaders:
    name: X-Amz-SignedHeaders
    in: header
    type: string
    required: false
securityDefinitions:
  hmac:
    type: apiKey
    name: Authorization
    in: header
    description: Amazon Signature authorization v4
    x-amazon-apigateway-authtype: awsSigv4
security:
  - hmac: []
paths:
  /v2/apis:
    post:
      operationId: CreateApi
      description: Creates an Api resource.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateApiResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - name
              - protocolType
            properties:
              apiKeySelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
              corsConfiguration:
                description: 'Represents a CORS configuration. Supported only for HTTP APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html">Configuring CORS</a> for more information.'
                type: object
                properties:
                  AllowCredentials:
                    $ref: '#/definitions/__boolean'
                    description: Specifies whether credentials are included in the CORS request. Supported only for HTTP APIs.
                  AllowHeaders:
                    $ref: '#/definitions/CorsHeaderList'
                    description: Represents a collection of allowed headers. Supported only for HTTP APIs.
                  AllowMethods:
                    $ref: '#/definitions/CorsMethodList'
                    description: Represents a collection of allowed HTTP methods. Supported only for HTTP APIs.
                  AllowOrigins:
                    $ref: '#/definitions/CorsOriginList'
                    description: Represents a collection of allowed origins. Supported only for HTTP APIs.
                  ExposeHeaders:
                    $ref: '#/definitions/CorsHeaderList'
                    description: Represents a collection of exposed headers. Supported only for HTTP APIs.
                  MaxAge:
                    $ref: '#/definitions/IntegerWithLengthBetweenMinus1And86400'
                    description: The number of seconds that the browser should cache preflight request results. Supported only for HTTP APIs.
              credentialsArn:
                description: Represents an Amazon Resource Name (ARN).
                type: string
              description:
                description: 'A string with a length between [0-1024].'
                type: string
              disableSchemaValidation:
                description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
                type: boolean
              name:
                description: 'A string with a length between [1-128].'
                type: string
              protocolType:
                description: Represents a protocol type.
                type: string
                enum:
                  - WEBSOCKET
                  - HTTP
              routeKey:
                description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                type: string
              routeSelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
              tags:
                description: Represents a collection of tags associated with the resource.
                type: object
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween1And1600'
              target:
                description: 'A string representation of a URI with a length between [1-2048].'
                type: string
              version:
                description: 'A string with a length between [1-64].'
                type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetApis
      description: Gets a collection of Api resources.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetApisResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          type: string
    put:
      operationId: ImportApi
      description: Imports an API.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/ImportApiResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: basepath
          in: query
          required: false
          description: Represents the base path of the imported API. Supported only for HTTP APIs.
          type: string
        - name: failOnWarnings
          in: query
          required: false
          description: Specifies whether to rollback the API creation (true) or not (false) when a warning is encountered. The default value is false.
          type: boolean
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - body
            properties:
              body:
                description: The OpenAPI definition. Supported only for HTTP APIs.
                type: string
  '/v2/domainnames/{domainName}/apimappings':
    post:
      operationId: CreateApiMapping
      description: Creates an API mapping.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateApiMappingResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: domainName
          in: path
          required: true
          description: The domain name.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - apiId
              - stage
            properties:
              apiId:
                description: The identifier.
                type: string
              apiMappingKey:
                description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                type: string
              stage:
                description: 'A string with a length between [1-128].'
                type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetApiMappings
      description: Gets API mappings.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetApiMappingsResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
      parameters:
        - name: domainName
          in: path
          required: true
          description: The domain name.
          type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          type: string
  '/v2/apis/{apiId}/authorizers':
    post:
      operationId: CreateAuthorizer
      description: Creates an Authorizer for an API.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateAuthorizerResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - authorizerType
              - identitySource
              - name
            properties:
              authorizerCredentialsArn:
                description: Represents an Amazon Resource Name (ARN).
                type: string
              authorizerResultTtlInSeconds:
                description: |2-

                              <p>An integer with a value between [0-3600].</p>
                           
                type: integer
                minimum: 0
                maximum: 3600
              authorizerType:
                description: 'The authorizer type. For WebSocket APIs, specify REQUEST for a Lambda function using incoming request parameters. For HTTP APIs, specify JWT to use JSON Web Tokens.'
                type: string
                enum:
                  - REQUEST
                  - JWT
              authorizerUri:
                description: 'A string representation of a URI with a length between [1-2048].'
                type: string
              identitySource:
                description: 'The identity source for which authorization is requested. For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header, a Name query string parameter are defined as identity sources, this value is $method.request.header.Auth, $method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.'
                type: array
                items:
                  $ref: '#/definitions/__string'
              identityValidationExpression:
                description: 'A string with a length between [0-1024].'
                type: string
              jwtConfiguration:
                description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
                type: object
                properties:
                  Audience:
                    $ref: '#/definitions/__listOf__string'
                    description: 'A list of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list. See <a href="https://tools.ietf.org/html/rfc7519#section-4.1.3">RFC 7519</a>. Supported only for HTTP APIs.'
                  Issuer:
                    $ref: '#/definitions/UriWithLengthBetween1And2048'
                    description: |-
                      The base domain of the identity provider that issues JSON Web Tokens. For example, an Amazon Cognito user pool has the following format: https://cognito-idp.<replaceable>{region}</replaceable>.amazonaws.com/<replaceable>{userPoolId}</replaceable>
                                     . Required for the JWT authorizer type. Supported only for HTTP APIs.
              name:
                description: 'A string with a length between [1-128].'
                type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetAuthorizers
      description: Gets the Authorizers for an API.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetAuthorizersResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          type: string
  '/v2/apis/{apiId}/deployments':
    post:
      operationId: CreateDeployment
      description: Creates a Deployment for an API.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateDeploymentResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              description:
                description: 'A string with a length between [0-1024].'
                type: string
              stageName:
                description: 'A string with a length between [1-128].'
                type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDeployments
      description: Gets the Deployments for an API.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDeploymentsResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          type: string
  /v2/domainnames:
    post:
      operationId: CreateDomainName
      description: Creates a domain name.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateDomainNameResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
        '484':
          description: AccessDeniedException
          schema:
            $ref: '#/definitions/AccessDeniedException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - domainName
            properties:
              domainName:
                description: 'A string with a length between [1-512].'
                type: string
              domainNameConfigurations:
                description: The domain name configurations.
                type: array
                items:
                  $ref: '#/definitions/DomainNameConfiguration'
              tags:
                description: Represents a collection of tags associated with the resource.
                type: object
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween1And1600'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDomainNames
      description: Gets the domain names for an AWS account.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDomainNamesResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          type: string
  '/v2/apis/{apiId}/integrations':
    post:
      operationId: CreateIntegration
      description: Creates an Integration.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateIntegrationResult'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - integrationType
            properties:
              connectionId:
                description: 'A string with a length between [1-1024].'
                type: string
              connectionType:
                description: Represents a connection type.
                type: string
                enum:
                  - INTERNET
                  - VPC_LINK
              contentHandlingStrategy:
                description: Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.
                type: string
                enum:
                  - CONVERT_TO_BINARY
                  - CONVERT_TO_TEXT
              credentialsArn:
                description: Represents an Amazon Resource Name (ARN).
                type: string
              description:
                description: 'A string with a length between [0-1024].'
                type: string
              integrationMethod:
                description: 'A string with a length between [1-64].'
                type: string
              integrationType:
                description: Represents an API method integration type.
                type: string
                enum:
                  - AWS
                  - HTTP
                  - MOCK
                  - HTTP_PROXY
                  - AWS_PROXY
              integrationUri:
                description: 'A string representation of a URI with a length between [1-2048].'
                type: string
              passthroughBehavior:
                description: Represents passthrough behavior for an integration response. Supported only for WebSocket APIs.
                type: string
                enum:
                  - WHEN_NO_MATCH
                  - NEVER
                  - WHEN_NO_TEMPLATES
              payloadFormatVersion:
                description: 'A string with a length between [1-64].'
                type: string
              requestParameters:
                description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
                type: object
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween1And512'
              requestTemplates:
                description: A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.
                type: object
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween0And32K'
              templateSelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
              timeoutInMillis:
                description: |2-

                              <p>An integer with a value between [50-29000].</p>
                           
                type: integer
                minimum: 50
                maximum: 29000
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetIntegrations
      description: Gets the Integrations for an API.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetIntegrationsResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          type: string
  '/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses':
    post:
      operationId: CreateIntegrationResponse
      description: Creates an IntegrationResponses.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateIntegrationResponseResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - integrationResponseKey
            properties:
              contentHandlingStrategy:
                description: Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.
                type: string
                enum:
                  - CONVERT_TO_BINARY
                  - CONVERT_TO_TEXT
              integrationResponseKey:
                description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                type: string
              responseParameters:
                description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
                type: object
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween1And512'
              responseTemplates:
                description: A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.
                type: object
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween0And32K'
              templateSelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetIntegrationResponses
      description: Gets the IntegrationResponses for an Integration.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetIntegrationResponsesResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          type: string
  '/v2/apis/{apiId}/models':
    post:
      operationId: CreateModel
      description: Creates a Model for an API.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateModelResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - name
              - schema
            properties:
              contentType:
                description: 'A string with a length between [1-256].'
                type: string
              description:
                description: 'A string with a length between [0-1024].'
                type: string
              name:
                description: 'A string with a length between [1-128].'
                type: string
              schema:
                description: 'A string with a length between [0-32768].'
                type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetModels
      description: Gets the Models for an API.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetModelsResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          type: string
  '/v2/apis/{apiId}/routes':
    post:
      operationId: CreateRoute
      description: Creates a Route for an API.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateRouteResult'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - routeKey
            properties:
              apiKeyRequired:
                description: Specifies whether an API key is required for the route. Supported only for WebSocket APIs.
                type: boolean
              authorizationScopes:
                description: 'A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.'
                type: array
                items:
                  $ref: '#/definitions/StringWithLengthBetween1And64'
              authorizationType:
                description: 'The authorization type. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer. For HTTP APIs, valid values are NONE for open access, or JWT for using JSON Web Tokens.'
                type: string
                enum:
                  - NONE
                  - AWS_IAM
                  - CUSTOM
                  - JWT
              authorizerId:
                description: The identifier.
                type: string
              modelSelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
              operationName:
                description: 'A string with a length between [1-64].'
                type: string
              requestModels:
                description: The route models.
                type: object
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween1And128'
              requestParameters:
                description: The route parameters.
                type: object
                additionalProperties:
                  $ref: '#/definitions/ParameterConstraints'
              routeKey:
                description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                type: string
              routeResponseSelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
              target:
                description: 'A string with a length between [1-128].'
                type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetRoutes
      description: Gets the Routes for an API.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetRoutesResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          type: string
  '/v2/apis/{apiId}/routes/{routeId}/routeresponses':
    post:
      operationId: CreateRouteResponse
      description: Creates a RouteResponse for a Route.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateRouteResponseResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - routeResponseKey
            properties:
              modelSelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
              responseModels:
                description: The route models.
                type: object
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween1And128'
              responseParameters:
                description: The route parameters.
                type: object
                additionalProperties:
                  $ref: '#/definitions/ParameterConstraints'
              routeResponseKey:
                description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetRouteResponses
      description: Gets the RouteResponses for a Route.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetRouteResponsesResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          type: string
  '/v2/apis/{apiId}/stages':
    post:
      operationId: CreateStage
      description: Creates a Stage for an API.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateStageResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - stageName
            properties:
              accessLogSettings:
                description: Settings for logging access in a stage.
                type: object
                properties:
                  DestinationArn:
                    $ref: '#/definitions/Arn'
                    description: The ARN of the CloudWatch Logs log group to receive access logs.
                  Format:
                    $ref: '#/definitions/StringWithLengthBetween1And1024'
                    description: 'A single line format of the access logs of data, as specified by selected $context variables. The format must include at least $context.requestId.'
              autoDeploy:
                description: Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
                type: boolean
              clientCertificateId:
                description: The identifier.
                type: string
              defaultRouteSettings:
                description: Represents a collection of route settings.
                type: object
                properties:
                  DataTraceEnabled:
                    $ref: '#/definitions/__boolean'
                    description: Specifies whether (true) or not (false) data trace logging is enabled for this route. This property affects the log entries pushed to Amazon CloudWatch Logs. Supported only for WebSocket APIs.
                  DetailedMetricsEnabled:
                    $ref: '#/definitions/__boolean'
                    description: Specifies whether detailed metrics are enabled.
                  LoggingLevel:
                    $ref: '#/definitions/LoggingLevel'
                    description: 'Specifies the logging level for this route: INFO, ERROR, or OFF. This property affects the log entries pushed to Amazon CloudWatch Logs. Supported only for WebSocket APIs.'
                  ThrottlingBurstLimit:
                    $ref: '#/definitions/__integer'
                    description: Specifies the throttling burst limit. Supported only for WebSocket APIs.
                  ThrottlingRateLimit:
                    $ref: '#/definitions/__double'
                    description: Specifies the throttling rate limit. Supported only for WebSocket APIs.
              deploymentId:
                description: The identifier.
                type: string
              description:
                description: 'A string with a length between [0-1024].'
                type: string
              routeSettings:
                description: The route settings map.
                type: object
                additionalProperties:
                  $ref: '#/definitions/RouteSettings'
              stageName:
                description: 'A string with a length between [1-128].'
                type: string
              stageVariables:
                description: The stage variable map.
                type: object
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween0And2048'
              tags:
                description: Represents a collection of tags associated with the resource.
                type: object
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween1And1600'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetStages
      description: Gets the Stages for an API.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetStagesResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          type: string
  '/v2/apis/{apiId}':
    delete:
      operationId: DeleteApi
      description: Deletes an Api resource.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetApi
      description: Gets an Api resource.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetApiResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
    put:
      operationId: ReimportApi
      description: Puts an Api resource.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/ReimportApiResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: basepath
          in: query
          required: false
          description: Represents the base path of the imported API. Supported only for HTTP APIs.
          type: string
        - name: failOnWarnings
          in: query
          required: false
          description: Specifies whether to rollback the API creation (true) or not (false) when a warning is encountered. The default value is false.
          type: boolean
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - body
            properties:
              body:
                description: The OpenAPI definition. Supported only for HTTP APIs.
                type: string
    patch:
      operationId: UpdateApi
      description: Updates an Api resource.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateApiResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              apiKeySelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
              corsConfiguration:
                description: 'Represents a CORS configuration. Supported only for HTTP APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html">Configuring CORS</a> for more information.'
                type: object
                properties:
                  AllowCredentials:
                    $ref: '#/definitions/__boolean'
                    description: Specifies whether credentials are included in the CORS request. Supported only for HTTP APIs.
                  AllowHeaders:
                    $ref: '#/definitions/CorsHeaderList'
                    description: Represents a collection of allowed headers. Supported only for HTTP APIs.
                  AllowMethods:
                    $ref: '#/definitions/CorsMethodList'
                    description: Represents a collection of allowed HTTP methods. Supported only for HTTP APIs.
                  AllowOrigins:
                    $ref: '#/definitions/CorsOriginList'
                    description: Represents a collection of allowed origins. Supported only for HTTP APIs.
                  ExposeHeaders:
                    $ref: '#/definitions/CorsHeaderList'
                    description: Represents a collection of exposed headers. Supported only for HTTP APIs.
                  MaxAge:
                    $ref: '#/definitions/IntegerWithLengthBetweenMinus1And86400'
                    description: The number of seconds that the browser should cache preflight request results. Supported only for HTTP APIs.
              credentialsArn:
                description: Represents an Amazon Resource Name (ARN).
                type: string
              description:
                description: 'A string with a length between [0-1024].'
                type: string
              disableSchemaValidation:
                description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
                type: boolean
              name:
                description: 'A string with a length between [1-128].'
                type: string
              routeKey:
                description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                type: string
              routeSelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
              target:
                description: 'A string representation of a URI with a length between [1-2048].'
                type: string
              version:
                description: 'A string with a length between [1-64].'
                type: string
  '/v2/domainnames/{domainName}/apimappings/{apiMappingId}':
    delete:
      operationId: DeleteApiMapping
      description: Deletes an API mapping.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
      parameters:
        - name: apiMappingId
          in: path
          required: true
          description: The API mapping identifier.
          type: string
        - name: domainName
          in: path
          required: true
          description: The domain name.
          type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetApiMapping
      description: Gets an API mapping.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetApiMappingResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
      parameters:
        - name: apiMappingId
          in: path
          required: true
          description: The API mapping identifier.
          type: string
        - name: domainName
          in: path
          required: true
          description: The domain name.
          type: string
    patch:
      operationId: UpdateApiMapping
      description: The API mapping.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateApiMappingResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: apiMappingId
          in: path
          required: true
          description: The API mapping identifier.
          type: string
        - name: domainName
          in: path
          required: true
          description: The domain name.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - apiId
            properties:
              apiId:
                description: The identifier.
                type: string
              apiMappingKey:
                description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                type: string
              stage:
                description: 'A string with a length between [1-128].'
                type: string
  '/v2/apis/{apiId}/authorizers/{authorizerId}':
    delete:
      operationId: DeleteAuthorizer
      description: Deletes an Authorizer.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: authorizerId
          in: path
          required: true
          description: The authorizer identifier.
          type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetAuthorizer
      description: Gets an Authorizer.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetAuthorizerResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: authorizerId
          in: path
          required: true
          description: The authorizer identifier.
          type: string
    patch:
      operationId: UpdateAuthorizer
      description: Updates an Authorizer.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateAuthorizerResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: authorizerId
          in: path
          required: true
          description: The authorizer identifier.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              authorizerCredentialsArn:
                description: Represents an Amazon Resource Name (ARN).
                type: string
              authorizerResultTtlInSeconds:
                description: |2-

                              <p>An integer with a value between [0-3600].</p>
                           
                type: integer
                minimum: 0
                maximum: 3600
              authorizerType:
                description: 'The authorizer type. For WebSocket APIs, specify REQUEST for a Lambda function using incoming request parameters. For HTTP APIs, specify JWT to use JSON Web Tokens.'
                type: string
                enum:
                  - REQUEST
                  - JWT
              authorizerUri:
                description: 'A string representation of a URI with a length between [1-2048].'
                type: string
              identitySource:
                description: 'The identity source for which authorization is requested. For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header, a Name query string parameter are defined as identity sources, this value is $method.request.header.Auth, $method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.'
                type: array
                items:
                  $ref: '#/definitions/__string'
              identityValidationExpression:
                description: 'A string with a length between [0-1024].'
                type: string
              jwtConfiguration:
                description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
                type: object
                properties:
                  Audience:
                    $ref: '#/definitions/__listOf__string'
                    description: 'A list of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list. See <a href="https://tools.ietf.org/html/rfc7519#section-4.1.3">RFC 7519</a>. Supported only for HTTP APIs.'
                  Issuer:
                    $ref: '#/definitions/UriWithLengthBetween1And2048'
                    description: |-
                      The base domain of the identity provider that issues JSON Web Tokens. For example, an Amazon Cognito user pool has the following format: https://cognito-idp.<replaceable>{region}</replaceable>.amazonaws.com/<replaceable>{userPoolId}</replaceable>
                                     . Required for the JWT authorizer type. Supported only for HTTP APIs.
              name:
                description: 'A string with a length between [1-128].'
                type: string
  '/v2/apis/{apiId}/cors':
    delete:
      operationId: DeleteCorsConfiguration
      description: Deletes a CORS configuration.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/v2/apis/{apiId}/deployments/{deploymentId}':
    delete:
      operationId: DeleteDeployment
      description: Deletes a Deployment.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: deploymentId
          in: path
          required: true
          description: The deployment ID.
          type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDeployment
      description: Gets a Deployment.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDeploymentResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: deploymentId
          in: path
          required: true
          description: The deployment ID.
          type: string
    patch:
      operationId: UpdateDeployment
      description: Updates a Deployment.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateDeploymentResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: deploymentId
          in: path
          required: true
          description: The deployment ID.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              description:
                description: 'A string with a length between [0-1024].'
                type: string
  '/v2/domainnames/{domainName}':
    delete:
      operationId: DeleteDomainName
      description: Deletes a domain name.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: domainName
          in: path
          required: true
          description: The domain name.
          type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDomainName
      description: Gets a domain name.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDomainNameResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: domainName
          in: path
          required: true
          description: The domain name.
          type: string
    patch:
      operationId: UpdateDomainName
      description: Updates a domain name.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateDomainNameResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: domainName
          in: path
          required: true
          description: The domain name.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              domainNameConfigurations:
                description: The domain name configurations.
                type: array
                items:
                  $ref: '#/definitions/DomainNameConfiguration'
  '/v2/apis/{apiId}/integrations/{integrationId}':
    delete:
      operationId: DeleteIntegration
      description: Deletes an Integration.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetIntegration
      description: Gets an Integration.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetIntegrationResult'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          type: string
    patch:
      operationId: UpdateIntegration
      description: Updates an Integration.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateIntegrationResult'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              connectionId:
                description: 'A string with a length between [1-1024].'
                type: string
              connectionType:
                description: Represents a connection type.
                type: string
                enum:
                  - INTERNET
                  - VPC_LINK
              contentHandlingStrategy:
                description: Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.
                type: string
                enum:
                  - CONVERT_TO_BINARY
                  - CONVERT_TO_TEXT
              credentialsArn:
                description: Represents an Amazon Resource Name (ARN).
                type: string
              description:
                description: 'A string with a length between [0-1024].'
                type: string
              integrationMethod:
                description: 'A string with a length between [1-64].'
                type: string
              integrationType:
                description: Represents an API method integration type.
                type: string
                enum:
                  - AWS
                  - HTTP
                  - MOCK
                  - HTTP_PROXY
                  - AWS_PROXY
              integrationUri:
                description: 'A string representation of a URI with a length between [1-2048].'
                type: string
              passthroughBehavior:
                description: Represents passthrough behavior for an integration response. Supported only for WebSocket APIs.
                type: string
                enum:
                  - WHEN_NO_MATCH
                  - NEVER
                  - WHEN_NO_TEMPLATES
              payloadFormatVersion:
                description: 'A string with a length between [1-64].'
                type: string
              requestParameters:
                description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
                type: object
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween1And512'
              requestTemplates:
                description: A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.
                type: object
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween0And32K'
              templateSelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
              timeoutInMillis:
                description: |2-

                              <p>An integer with a value between [50-29000].</p>
                           
                type: integer
                minimum: 50
                maximum: 29000
  '/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses/{integrationResponseId}':
    delete:
      operationId: DeleteIntegrationResponse
      description: Deletes an IntegrationResponses.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          type: string
        - name: integrationResponseId
          in: path
          required: true
          description: The integration response ID.
          type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetIntegrationResponse
      description: Gets an IntegrationResponses.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetIntegrationResponseResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          type: string
        - name: integrationResponseId
          in: path
          required: true
          description: The integration response ID.
          type: string
    patch:
      operationId: UpdateIntegrationResponse
      description: Updates an IntegrationResponses.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateIntegrationResponseResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          type: string
        - name: integrationResponseId
          in: path
          required: true
          description: The integration response ID.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              contentHandlingStrategy:
                description: Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.
                type: string
                enum:
                  - CONVERT_TO_BINARY
                  - CONVERT_TO_TEXT
              integrationResponseKey:
                description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                type: string
              responseParameters:
                description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
                type: object
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween1And512'
              responseTemplates:
                description: A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.
                type: object
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween0And32K'
              templateSelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
  '/v2/apis/{apiId}/models/{modelId}':
    delete:
      operationId: DeleteModel
      description: Deletes a Model.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: modelId
          in: path
          required: true
          description: The model ID.
          type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetModel
      description: Gets a Model.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetModelResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: modelId
          in: path
          required: true
          description: The model ID.
          type: string
    patch:
      operationId: UpdateModel
      description: Updates a Model.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateModelResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: modelId
          in: path
          required: true
          description: The model ID.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              contentType:
                description: 'A string with a length between [1-256].'
                type: string
              description:
                description: 'A string with a length between [0-1024].'
                type: string
              name:
                description: 'A string with a length between [1-128].'
                type: string
              schema:
                description: 'A string with a length between [0-32768].'
                type: string
  '/v2/apis/{apiId}/routes/{routeId}':
    delete:
      operationId: DeleteRoute
      description: Deletes a Route.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetRoute
      description: Gets a Route.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetRouteResult'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          type: string
    patch:
      operationId: UpdateRoute
      description: Updates a Route.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateRouteResult'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              apiKeyRequired:
                description: Specifies whether an API key is required for the route. Supported only for WebSocket APIs.
                type: boolean
              authorizationScopes:
                description: 'A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.'
                type: array
                items:
                  $ref: '#/definitions/StringWithLengthBetween1And64'
              authorizationType:
                description: 'The authorization type. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer. For HTTP APIs, valid values are NONE for open access, or JWT for using JSON Web Tokens.'
                type: string
                enum:
                  - NONE
                  - AWS_IAM
                  - CUSTOM
                  - JWT
              authorizerId:
                description: The identifier.
                type: string
              modelSelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
              operationName:
                description: 'A string with a length between [1-64].'
                type: string
              requestModels:
                description: The route models.
                type: object
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween1And128'
              requestParameters:
                description: The route parameters.
                type: object
                additionalProperties:
                  $ref: '#/definitions/ParameterConstraints'
              routeKey:
                description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                type: string
              routeResponseSelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
              target:
                description: 'A string with a length between [1-128].'
                type: string
  '/v2/apis/{apiId}/routes/{routeId}/routeresponses/{routeResponseId}':
    delete:
      operationId: DeleteRouteResponse
      description: Deletes a RouteResponse.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          type: string
        - name: routeResponseId
          in: path
          required: true
          description: The route response ID.
          type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetRouteResponse
      description: Gets a RouteResponse.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetRouteResponseResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          type: string
        - name: routeResponseId
          in: path
          required: true
          description: The route response ID.
          type: string
    patch:
      operationId: UpdateRouteResponse
      description: Updates a RouteResponse.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateRouteResponseResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          type: string
        - name: routeResponseId
          in: path
          required: true
          description: The route response ID.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              modelSelectionExpression:
                description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                type: string
              responseModels:
                description: The route models.
                type: object
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween1And128'
              responseParameters:
                description: The route parameters.
                type: object
                additionalProperties:
                  $ref: '#/definitions/ParameterConstraints'
              routeResponseKey:
                description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                type: string
  '/v2/apis/{apiId}/stages/{stageName}/routesettings/{routeKey}':
    delete:
      operationId: DeleteRouteSettings
      description: Deletes the RouteSettings for a stage.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: routeKey
          in: path
          required: true
          description: The route key.
          type: string
        - name: stageName
          in: path
          required: true
          description: 'The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.'
          type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/v2/apis/{apiId}/stages/{stageName}':
    delete:
      operationId: DeleteStage
      description: Deletes a Stage.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: stageName
          in: path
          required: true
          description: 'The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.'
          type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetStage
      description: Gets a Stage.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetStageResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: stageName
          in: path
          required: true
          description: 'The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.'
          type: string
    patch:
      operationId: UpdateStage
      description: Updates a Stage.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateStageResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: stageName
          in: path
          required: true
          description: 'The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.'
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              accessLogSettings:
                description: Settings for logging access in a stage.
                type: object
                properties:
                  DestinationArn:
                    $ref: '#/definitions/Arn'
                    description: The ARN of the CloudWatch Logs log group to receive access logs.
                  Format:
                    $ref: '#/definitions/StringWithLengthBetween1And1024'
                    description: 'A single line format of the access logs of data, as specified by selected $context variables. The format must include at least $context.requestId.'
              autoDeploy:
                description: Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
                type: boolean
              clientCertificateId:
                description: The identifier.
                type: string
              defaultRouteSettings:
                description: Represents a collection of route settings.
                type: object
                properties:
                  DataTraceEnabled:
                    $ref: '#/definitions/__boolean'
                    description: Specifies whether (true) or not (false) data trace logging is enabled for this route. This property affects the log entries pushed to Amazon CloudWatch Logs. Supported only for WebSocket APIs.
                  DetailedMetricsEnabled:
                    $ref: '#/definitions/__boolean'
                    description: Specifies whether detailed metrics are enabled.
                  LoggingLevel:
                    $ref: '#/definitions/LoggingLevel'
                    description: 'Specifies the logging level for this route: INFO, ERROR, or OFF. This property affects the log entries pushed to Amazon CloudWatch Logs. Supported only for WebSocket APIs.'
                  ThrottlingBurstLimit:
                    $ref: '#/definitions/__integer'
                    description: Specifies the throttling burst limit. Supported only for WebSocket APIs.
                  ThrottlingRateLimit:
                    $ref: '#/definitions/__double'
                    description: Specifies the throttling rate limit. Supported only for WebSocket APIs.
              deploymentId:
                description: The identifier.
                type: string
              description:
                description: 'A string with a length between [0-1024].'
                type: string
              routeSettings:
                description: The route settings map.
                type: object
                additionalProperties:
                  $ref: '#/definitions/RouteSettings'
              stageVariables:
                description: The stage variable map.
                type: object
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween0And2048'
  '/v2/apis/{apiId}/models/{modelId}/template':
    get:
      operationId: GetModelTemplate
      description: Gets a model template.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetModelTemplateResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          type: string
        - name: modelId
          in: path
          required: true
          description: The model ID.
          type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/v2/tags/{resource-arn}':
    get:
      operationId: GetTags
      description: Gets a collection of Tag resources.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetTagsResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: resource-arn
          in: path
          required: true
          description: The resource ARN for the tag.
          type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      operationId: TagResource
      description: Creates a new Tag resource to represent a tag.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/TagResourceResponse'
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: resource-arn
          in: path
          required: true
          description: The resource ARN for the tag.
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              tags:
                description: Represents a collection of tags associated with the resource.
                type: object
                additionalProperties:
                  $ref: '#/definitions/StringWithLengthBetween1And1600'
  '/v2/tags/{resource-arn}#tagKeys':
    delete:
      operationId: UntagResource
      description: Deletes a Tag.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          schema:
            $ref: '#/definitions/NotFoundException'
        '481':
          description: TooManyRequestsException
          schema:
            $ref: '#/definitions/TooManyRequestsException'
        '482':
          description: BadRequestException
          schema:
            $ref: '#/definitions/BadRequestException'
        '483':
          description: ConflictException
          schema:
            $ref: '#/definitions/ConflictException'
      parameters:
        - name: resource-arn
          in: path
          required: true
          description: The resource ARN for the tag.
          type: string
        - name: tagKeys
          in: query
          required: true
          description: |2-

                        <p>The Tag keys to delete.</p>
                     
          type: array
          items:
            type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
definitions:
  CreateApiResponse:
    type: object
    properties:
      ApiEndpoint:
        $ref: '#/definitions/__string'
        description: 'The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.'
      ApiId:
        $ref: '#/definitions/Id'
        description: The API ID.
      ApiKeySelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
      CorsConfiguration:
        $ref: '#/definitions/Cors'
        description: A CORS configuration. Supported only for HTTP APIs.
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the API was created.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the API.
      DisableSchemaValidation:
        $ref: '#/definitions/__boolean'
        description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
      ImportInfo:
        $ref: '#/definitions/__listOf__string'
        description: The validation information during API import. This may include particular properties of your OpenAPI definition which are ignored during import. Supported only for HTTP APIs.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the API.
      ProtocolType:
        $ref: '#/definitions/ProtocolType'
        description: The API protocol.
      RouteSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.'
      Tags:
        $ref: '#/definitions/Tags'
        description: A collection of tags associated with the API.
      Version:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: A version identifier for the API.
      Warnings:
        $ref: '#/definitions/__listOf__string'
        description: The warning messages reported when failonwarnings is turned on during API import.
  __boolean:
    type: boolean
  CorsHeaderList:
    type: array
    description: Represents a collection of allowed headers. Supported only for HTTP APIs.
    items:
      $ref: '#/definitions/__string'
  CorsMethodList:
    type: array
    description: Represents a collection of methods. Supported only for HTTP APIs.
    items:
      $ref: '#/definitions/StringWithLengthBetween1And64'
  CorsOriginList:
    type: array
    description: Represents a collection of origins. Supported only for HTTP APIs.
    items:
      $ref: '#/definitions/__string'
  IntegerWithLengthBetweenMinus1And86400:
    type: integer
    description: |2-

                  <p>An integer with a value between [-1-86400].</p>
               
    minimum: -1
    maximum: 86400
  StringWithLengthBetween1And1600:
    type: string
    description: 'A string with a length between [0-1600].'
  NotFoundException: {}
  TooManyRequestsException: {}
  BadRequestException: {}
  ConflictException: {}
  CreateApiMappingResponse:
    type: object
    properties:
      ApiId:
        $ref: '#/definitions/Id'
        description: The API identifier.
      ApiMappingId:
        $ref: '#/definitions/Id'
        description: The API mapping identifier.
      ApiMappingKey:
        $ref: '#/definitions/SelectionKey'
        description: The API mapping key.
      Stage:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The API stage.
  CreateAuthorizerResponse:
    type: object
    properties:
      AuthorizerCredentialsArn:
        $ref: '#/definitions/Arn'
        description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null. Supported only for REQUEST authorizers.'
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: The authorizer identifier.
      AuthorizerResultTtlInSeconds:
        $ref: '#/definitions/IntegerWithLengthBetween0And3600'
        description: Authorizer caching is not currently supported. Don't specify this value for authorizers.
      AuthorizerType:
        $ref: '#/definitions/AuthorizerType'
        description: 'The authorizer type. For WebSocket APIs, specify REQUEST for a Lambda function using incoming request parameters. For HTTP APIs, specify JWT to use JSON Web Tokens.'
      AuthorizerUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: |-
          The authorizer's Uniform Resource Identifier (URI). ForREQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                         , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
      IdentitySource:
        $ref: '#/definitions/IdentitySourceList'
        description: '<p>The identity source for which authorization is requested.</p> <p>For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. Currently, the identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name. These parameters will be used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function.</p> <p>For JWT, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example "$request.header.Authorization".</p>'
      IdentityValidationExpression:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The validation expression does not apply to the REQUEST authorizer.
      JwtConfiguration:
        $ref: '#/definitions/JWTConfiguration'
        description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the authorizer.
  __string:
    type: string
  __listOf__string:
    type: array
    items:
      $ref: '#/definitions/__string'
  UriWithLengthBetween1And2048:
    type: string
    description: 'A string representation of a URI with a length between [1-2048].'
  CreateDeploymentResponse:
    type: object
    properties:
      AutoDeployed:
        $ref: '#/definitions/__boolean'
        description: Specifies whether a deployment was automatically released.
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The date and time when the Deployment resource was created.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: The identifier for the deployment.
      DeploymentStatus:
        $ref: '#/definitions/DeploymentStatus'
        description: 'The status of the deployment: PENDING, FAILED, or SUCCEEDED.'
      DeploymentStatusMessage:
        $ref: '#/definitions/__string'
        description: May contain additional feedback on the status of an API deployment.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description for the deployment.
  CreateDomainNameResponse:
    type: object
    properties:
      ApiMappingSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The API mapping selection expression.
      DomainName:
        $ref: '#/definitions/StringWithLengthBetween1And512'
        description: The name of the DomainName resource.
      DomainNameConfigurations:
        $ref: '#/definitions/DomainNameConfigurations'
        description: The domain name configurations.
      Tags:
        $ref: '#/definitions/Tags'
        description: The collection of tags associated with a domain name.
  DomainNameConfiguration:
    type: object
    properties:
      ApiGatewayDomainName:
        $ref: '#/definitions/__string'
        description: A domain name for the API.
      CertificateArn:
        $ref: '#/definitions/Arn'
        description: An AWS-managed certificate that will be used by the edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.
      CertificateName:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The user-friendly name of the certificate that will be used by the edge-optimized endpoint for this domain name.
      CertificateUploadDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the certificate that was used by edge-optimized endpoint for this domain name was uploaded.
      DomainNameStatus:
        $ref: '#/definitions/DomainNameStatus'
        description: 'The status of the domain name migration. The valid values are AVAILABLE and UPDATING. If the status is UPDATING, the domain cannot be modified further until the existing operation is complete. If it is AVAILABLE, the domain can be updated.'
      DomainNameStatusMessage:
        $ref: '#/definitions/__string'
        description: An optional text message containing detailed information about status of the domain name migration.
      EndpointType:
        $ref: '#/definitions/EndpointType'
        description: The endpoint type.
      HostedZoneId:
        $ref: '#/definitions/__string'
        description: The Amazon Route 53 Hosted Zone ID of the endpoint.
      SecurityPolicy:
        $ref: '#/definitions/SecurityPolicy'
        description: The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are TLS_1_0 and TLS_1_2.
    description: The domain name configuration.
  AccessDeniedException: {}
  CreateIntegrationResult:
    type: object
    properties:
      ApiGatewayManaged:
        $ref: '#/definitions/__boolean'
        description: 'Specifies whether an integration is managed by API Gateway. If you created an API using using quick create, the resulting integration is managed by API Gateway. You can update a managed integration, but you can''t delete it.'
      ConnectionId:
        $ref: '#/definitions/StringWithLengthBetween1And1024'
        description: The connection ID.
      ConnectionType:
        $ref: '#/definitions/ConnectionType'
        description: 'The type of the network connection to the integration endpoint. Currently the only valid value is INTERNET, for connections through the public routable internet.'
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
      CredentialsArn:
        $ref: '#/definitions/Arn'
        description: 'Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: Represents the description of an integration.
      IntegrationId:
        $ref: '#/definitions/Id'
        description: Represents the identifier of an integration.
      IntegrationMethod:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: Specifies the integration's HTTP method type.
      IntegrationResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'The integration response selection expression for the integration. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions">Integration Response Selection Expressions</a>.'
      IntegrationType:
        $ref: '#/definitions/IntegrationType'
        description: '<p>The integration type of an integration. One of the following:</p> <p>AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY: for integrating the route or method request with the Lambda function-invoking action with the client request passed through as-is. This integration is also referred to as Lambda proxy integration.</p> <p>HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs.</p> <p>HTTP_PROXY: for integrating route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration.</p> <p>MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.</p>'
      IntegrationUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: 'For a Lambda proxy integration, this is the URI of the Lambda function.'
      PassthroughBehavior:
        $ref: '#/definitions/PassthroughBehavior'
        description: '<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p> <p>WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p> <p>NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>'
      PayloadFormatVersion:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: 'Specifies the format of the payload sent to an integration. Required for HTTP APIs. Currently, the only supported value is 1.0.'
      RequestParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: |-
          A key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                         , where 
                            <replaceable>{location}</replaceable>
                          is querystring, path, or header; and 
                            <replaceable>{name}</replaceable>
                          must be a valid and unique method request parameter name. Supported only for WebSocket APIs.
      RequestTemplates:
        $ref: '#/definitions/TemplateMap'
        description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.'
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expression for the integration. Supported only for WebSocket APIs.
      TimeoutInMillis:
        $ref: '#/definitions/IntegerWithLengthBetween50And29000'
        description: 'Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds for WebSocket APIs. The default value is 5,000 milliseconds, or 5 seconds for HTTP APIs.'
  StringWithLengthBetween1And512:
    type: string
    description: 'A string with a length between [1-512].'
  StringWithLengthBetween0And32K:
    type: string
    description: 'A string with a length between [0-32768].'
  CreateIntegrationResponseResponse:
    type: object
    properties:
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
      IntegrationResponseId:
        $ref: '#/definitions/Id'
        description: The integration response ID.
      IntegrationResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: The integration response key.
      ResponseParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
      ResponseTemplates:
        $ref: '#/definitions/TemplateMap'
        description: 'The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.'
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expressions for the integration response.
  CreateModelResponse:
    type: object
    properties:
      ContentType:
        $ref: '#/definitions/StringWithLengthBetween1And256'
        description: 'The content-type for the model, for example, "application/json".'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the model.
      ModelId:
        $ref: '#/definitions/Id'
        description: The model identifier.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the model. Must be alphanumeric.
      Schema:
        $ref: '#/definitions/StringWithLengthBetween0And32K'
        description: 'The schema for the model. For application/json models, this should be JSON schema draft 4 model.'
  CreateRouteResult:
    type: object
    properties:
      ApiGatewayManaged:
        $ref: '#/definitions/__boolean'
        description: 'Specifies whether a route is managed by API Gateway. If you created an API using quick create, the $default route is managed by API Gateway. You can''t modify the $default route key.'
      ApiKeyRequired:
        $ref: '#/definitions/__boolean'
        description: Specifies whether an API key is required for this route. Supported only for WebSocket APIs.
      AuthorizationScopes:
        $ref: '#/definitions/AuthorizationScopes'
        description: 'A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.'
      AuthorizationType:
        $ref: '#/definitions/AuthorizationType'
        description: 'The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, or JWT for using JSON Web Tokens.'
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The model selection expression for the route. Supported only for WebSocket APIs.
      OperationName:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: The operation name for the route.
      RequestModels:
        $ref: '#/definitions/RouteModels'
        description: The request models for the route. Supported only for WebSocket APIs.
      RequestParameters:
        $ref: '#/definitions/RouteParameters'
        description: The request parameters for the route. Supported only for WebSocket APIs.
      RouteId:
        $ref: '#/definitions/Id'
        description: The route ID.
      RouteKey:
        $ref: '#/definitions/SelectionKey'
        description: The route key for the route.
      RouteResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route response selection expression for the route. Supported only for WebSocket APIs.
      Target:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The target for the route.
  StringWithLengthBetween1And64:
    type: string
    description: 'A string with a length between [1-64].'
  StringWithLengthBetween1And128:
    type: string
    description: 'A string with a length between [1-128].'
  ParameterConstraints:
    type: object
    properties:
      Required:
        $ref: '#/definitions/__boolean'
        description: Whether or not the parameter is required.
    description: 'Validation constraints imposed on parameters of a request (path, query string, headers).'
  CreateRouteResponseResponse:
    type: object
    properties:
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: Represents the model selection expression of a route response. Supported only for WebSocket APIs.
      ResponseModels:
        $ref: '#/definitions/RouteModels'
        description: Represents the response models of a route response.
      ResponseParameters:
        $ref: '#/definitions/RouteParameters'
        description: Represents the response parameters of a route response.
      RouteResponseId:
        $ref: '#/definitions/Id'
        description: Represents the identifier of a route response.
      RouteResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: Represents the route response key of a route response.
  CreateStageResponse:
    type: object
    properties:
      AccessLogSettings:
        $ref: '#/definitions/AccessLogSettings'
        description: Settings for logging access in this stage.
      ApiGatewayManaged:
        $ref: '#/definitions/__boolean'
        description: 'Specifies whether a stage is managed by API Gateway. If you created an API using quick create, the $default stage is managed by API Gateway. You can''t modify the $default stage.'
      AutoDeploy:
        $ref: '#/definitions/__boolean'
        description: Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
      ClientCertificateId:
        $ref: '#/definitions/Id'
        description: The identifier of a client certificate for a Stage. Supported only for WebSocket APIs.
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the stage was created.
      DefaultRouteSettings:
        $ref: '#/definitions/RouteSettings'
        description: Default route settings for the stage.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: The identifier of the Deployment that the Stage is associated with. Can't be updated if autoDeploy is enabled.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the stage.
      LastDeploymentStatusMessage:
        $ref: '#/definitions/__string'
        description: Describes the status of the last deployment of a stage. Supported only for stages with autoDeploy enabled.
      LastUpdatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the stage was last updated.
      RouteSettings:
        $ref: '#/definitions/RouteSettingsMap'
        description: 'Route settings for the stage, by routeKey.'
      StageName:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the stage.
      StageVariables:
        $ref: '#/definitions/StageVariablesMap'
        description: 'A map that defines the stage variables for a stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+. Supported only for WebSocket APIs.'
      Tags:
        $ref: '#/definitions/Tags'
        description: The collection of tags. Each tag element is associated with a given resource.
  Arn:
    type: string
    description: Represents an Amazon Resource Name (ARN).
  StringWithLengthBetween1And1024:
    type: string
    description: 'A string with a length between [1-1024].'
  LoggingLevel:
    type: string
    enum:
      - ERROR
      - INFO
      - 'false'
    description: The logging level.
  __integer:
    type: integer
  __double:
    type: number
    format: double
  RouteSettings:
    type: object
    properties:
      DataTraceEnabled:
        $ref: '#/definitions/__boolean'
        description: Specifies whether (true) or not (false) data trace logging is enabled for this route. This property affects the log entries pushed to Amazon CloudWatch Logs. Supported only for WebSocket APIs.
      DetailedMetricsEnabled:
        $ref: '#/definitions/__boolean'
        description: Specifies whether detailed metrics are enabled.
      LoggingLevel:
        $ref: '#/definitions/LoggingLevel'
        description: 'Specifies the logging level for this route: INFO, ERROR, or OFF. This property affects the log entries pushed to Amazon CloudWatch Logs. Supported only for WebSocket APIs.'
      ThrottlingBurstLimit:
        $ref: '#/definitions/__integer'
        description: Specifies the throttling burst limit. Supported only for WebSocket APIs.
      ThrottlingRateLimit:
        $ref: '#/definitions/__double'
        description: Specifies the throttling rate limit. Supported only for WebSocket APIs.
    description: Represents a collection of route settings.
  StringWithLengthBetween0And2048:
    type: string
    description: 'A string with a length between [0-2048].'
  GetApiResponse:
    type: object
    properties:
      ApiEndpoint:
        $ref: '#/definitions/__string'
        description: 'The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.'
      ApiId:
        $ref: '#/definitions/Id'
        description: The API ID.
      ApiKeySelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
      CorsConfiguration:
        $ref: '#/definitions/Cors'
        description: A CORS configuration. Supported only for HTTP APIs.
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the API was created.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the API.
      DisableSchemaValidation:
        $ref: '#/definitions/__boolean'
        description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
      ImportInfo:
        $ref: '#/definitions/__listOf__string'
        description: The validation information during API import. This may include particular properties of your OpenAPI definition which are ignored during import. Supported only for HTTP APIs.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the API.
      ProtocolType:
        $ref: '#/definitions/ProtocolType'
        description: The API protocol.
      RouteSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.'
      Tags:
        $ref: '#/definitions/Tags'
        description: A collection of tags associated with the API.
      Version:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: A version identifier for the API.
      Warnings:
        $ref: '#/definitions/__listOf__string'
        description: The warning messages reported when failonwarnings is turned on during API import.
  GetApiMappingResponse:
    type: object
    properties:
      ApiId:
        $ref: '#/definitions/Id'
        description: The API identifier.
      ApiMappingId:
        $ref: '#/definitions/Id'
        description: The API mapping identifier.
      ApiMappingKey:
        $ref: '#/definitions/SelectionKey'
        description: The API mapping key.
      Stage:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The API stage.
  GetApiMappingsResponse:
    type: object
    properties:
      Items:
        $ref: '#/definitions/__listOfApiMapping'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: The next page of elements from this collection. Not valid for the last element of the collection.
  GetApisResponse:
    type: object
    properties:
      Items:
        $ref: '#/definitions/__listOfApi'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: The next page of elements from this collection. Not valid for the last element of the collection.
  GetAuthorizerResponse:
    type: object
    properties:
      AuthorizerCredentialsArn:
        $ref: '#/definitions/Arn'
        description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null. Supported only for REQUEST authorizers.'
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: The authorizer identifier.
      AuthorizerResultTtlInSeconds:
        $ref: '#/definitions/IntegerWithLengthBetween0And3600'
        description: Authorizer caching is not currently supported. Don't specify this value for authorizers.
      AuthorizerType:
        $ref: '#/definitions/AuthorizerType'
        description: 'The authorizer type. For WebSocket APIs, specify REQUEST for a Lambda function using incoming request parameters. For HTTP APIs, specify JWT to use JSON Web Tokens.'
      AuthorizerUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: |-
          The authorizer's Uniform Resource Identifier (URI). ForREQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                         , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
      IdentitySource:
        $ref: '#/definitions/IdentitySourceList'
        description: '<p>The identity source for which authorization is requested.</p> <p>For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. Currently, the identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name. These parameters will be used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function.</p> <p>For JWT, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example "$request.header.Authorization".</p>'
      IdentityValidationExpression:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The validation expression does not apply to the REQUEST authorizer.
      JwtConfiguration:
        $ref: '#/definitions/JWTConfiguration'
        description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the authorizer.
  GetAuthorizersResponse:
    type: object
    properties:
      Items:
        $ref: '#/definitions/__listOfAuthorizer'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: The next page of elements from this collection. Not valid for the last element of the collection.
  GetDeploymentResponse:
    type: object
    properties:
      AutoDeployed:
        $ref: '#/definitions/__boolean'
        description: Specifies whether a deployment was automatically released.
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The date and time when the Deployment resource was created.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: The identifier for the deployment.
      DeploymentStatus:
        $ref: '#/definitions/DeploymentStatus'
        description: 'The status of the deployment: PENDING, FAILED, or SUCCEEDED.'
      DeploymentStatusMessage:
        $ref: '#/definitions/__string'
        description: May contain additional feedback on the status of an API deployment.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description for the deployment.
  GetDeploymentsResponse:
    type: object
    properties:
      Items:
        $ref: '#/definitions/__listOfDeployment'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: The next page of elements from this collection. Not valid for the last element of the collection.
  GetDomainNameResponse:
    type: object
    properties:
      ApiMappingSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The API mapping selection expression.
      DomainName:
        $ref: '#/definitions/StringWithLengthBetween1And512'
        description: The name of the DomainName resource.
      DomainNameConfigurations:
        $ref: '#/definitions/DomainNameConfigurations'
        description: The domain name configurations.
      Tags:
        $ref: '#/definitions/Tags'
        description: The collection of tags associated with a domain name.
  GetDomainNamesResponse:
    type: object
    properties:
      Items:
        $ref: '#/definitions/__listOfDomainName'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: The next page of elements from this collection. Not valid for the last element of the collection.
  GetIntegrationResult:
    type: object
    properties:
      ApiGatewayManaged:
        $ref: '#/definitions/__boolean'
        description: 'Specifies whether an integration is managed by API Gateway. If you created an API using using quick create, the resulting integration is managed by API Gateway. You can update a managed integration, but you can''t delete it.'
      ConnectionId:
        $ref: '#/definitions/StringWithLengthBetween1And1024'
        description: The connection ID.
      ConnectionType:
        $ref: '#/definitions/ConnectionType'
        description: 'The type of the network connection to the integration endpoint. Currently the only valid value is INTERNET, for connections through the public routable internet.'
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
      CredentialsArn:
        $ref: '#/definitions/Arn'
        description: 'Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: Represents the description of an integration.
      IntegrationId:
        $ref: '#/definitions/Id'
        description: Represents the identifier of an integration.
      IntegrationMethod:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: Specifies the integration's HTTP method type.
      IntegrationResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'The integration response selection expression for the integration. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions">Integration Response Selection Expressions</a>.'
      IntegrationType:
        $ref: '#/definitions/IntegrationType'
        description: '<p>The integration type of an integration. One of the following:</p> <p>AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY: for integrating the route or method request with the Lambda function-invoking action with the client request passed through as-is. This integration is also referred to as Lambda proxy integration.</p> <p>HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs.</p> <p>HTTP_PROXY: for integrating route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration.</p> <p>MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.</p>'
      IntegrationUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: 'For a Lambda proxy integration, this is the URI of the Lambda function.'
      PassthroughBehavior:
        $ref: '#/definitions/PassthroughBehavior'
        description: '<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p> <p>WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p> <p>NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>'
      PayloadFormatVersion:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: 'Specifies the format of the payload sent to an integration. Required for HTTP APIs. Currently, the only supported value is 1.0.'
      RequestParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: |-
          A key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                         , where 
                            <replaceable>{location}</replaceable>
                          is querystring, path, or header; and 
                            <replaceable>{name}</replaceable>
                          must be a valid and unique method request parameter name. Supported only for WebSocket APIs.
      RequestTemplates:
        $ref: '#/definitions/TemplateMap'
        description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.'
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expression for the integration. Supported only for WebSocket APIs.
      TimeoutInMillis:
        $ref: '#/definitions/IntegerWithLengthBetween50And29000'
        description: 'Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds for WebSocket APIs. The default value is 5,000 milliseconds, or 5 seconds for HTTP APIs.'
  GetIntegrationResponseResponse:
    type: object
    properties:
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
      IntegrationResponseId:
        $ref: '#/definitions/Id'
        description: The integration response ID.
      IntegrationResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: The integration response key.
      ResponseParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
      ResponseTemplates:
        $ref: '#/definitions/TemplateMap'
        description: 'The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.'
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expressions for the integration response.
  GetIntegrationResponsesResponse:
    type: object
    properties:
      Items:
        $ref: '#/definitions/__listOfIntegrationResponse'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: The next page of elements from this collection. Not valid for the last element of the collection.
  GetIntegrationsResponse:
    type: object
    properties:
      Items:
        $ref: '#/definitions/__listOfIntegration'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: The next page of elements from this collection. Not valid for the last element of the collection.
  GetModelResponse:
    type: object
    properties:
      ContentType:
        $ref: '#/definitions/StringWithLengthBetween1And256'
        description: 'The content-type for the model, for example, "application/json".'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the model.
      ModelId:
        $ref: '#/definitions/Id'
        description: The model identifier.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the model. Must be alphanumeric.
      Schema:
        $ref: '#/definitions/StringWithLengthBetween0And32K'
        description: 'The schema for the model. For application/json models, this should be JSON schema draft 4 model.'
  GetModelTemplateResponse:
    type: object
    properties:
      Value:
        $ref: '#/definitions/__string'
        description: The template value.
  GetModelsResponse:
    type: object
    properties:
      Items:
        $ref: '#/definitions/__listOfModel'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: The next page of elements from this collection. Not valid for the last element of the collection.
  GetRouteResult:
    type: object
    properties:
      ApiGatewayManaged:
        $ref: '#/definitions/__boolean'
        description: 'Specifies whether a route is managed by API Gateway. If you created an API using quick create, the $default route is managed by API Gateway. You can''t modify the $default route key.'
      ApiKeyRequired:
        $ref: '#/definitions/__boolean'
        description: Specifies whether an API key is required for this route. Supported only for WebSocket APIs.
      AuthorizationScopes:
        $ref: '#/definitions/AuthorizationScopes'
        description: 'A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.'
      AuthorizationType:
        $ref: '#/definitions/AuthorizationType'
        description: 'The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, or JWT for using JSON Web Tokens.'
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The model selection expression for the route. Supported only for WebSocket APIs.
      OperationName:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: The operation name for the route.
      RequestModels:
        $ref: '#/definitions/RouteModels'
        description: The request models for the route. Supported only for WebSocket APIs.
      RequestParameters:
        $ref: '#/definitions/RouteParameters'
        description: The request parameters for the route. Supported only for WebSocket APIs.
      RouteId:
        $ref: '#/definitions/Id'
        description: The route ID.
      RouteKey:
        $ref: '#/definitions/SelectionKey'
        description: The route key for the route.
      RouteResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route response selection expression for the route. Supported only for WebSocket APIs.
      Target:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The target for the route.
  GetRouteResponseResponse:
    type: object
    properties:
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: Represents the model selection expression of a route response. Supported only for WebSocket APIs.
      ResponseModels:
        $ref: '#/definitions/RouteModels'
        description: Represents the response models of a route response.
      ResponseParameters:
        $ref: '#/definitions/RouteParameters'
        description: Represents the response parameters of a route response.
      RouteResponseId:
        $ref: '#/definitions/Id'
        description: Represents the identifier of a route response.
      RouteResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: Represents the route response key of a route response.
  GetRouteResponsesResponse:
    type: object
    properties:
      Items:
        $ref: '#/definitions/__listOfRouteResponse'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: The next page of elements from this collection. Not valid for the last element of the collection.
  GetRoutesResponse:
    type: object
    properties:
      Items:
        $ref: '#/definitions/__listOfRoute'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: The next page of elements from this collection. Not valid for the last element of the collection.
  GetStageResponse:
    type: object
    properties:
      AccessLogSettings:
        $ref: '#/definitions/AccessLogSettings'
        description: Settings for logging access in this stage.
      ApiGatewayManaged:
        $ref: '#/definitions/__boolean'
        description: 'Specifies whether a stage is managed by API Gateway. If you created an API using quick create, the $default stage is managed by API Gateway. You can''t modify the $default stage.'
      AutoDeploy:
        $ref: '#/definitions/__boolean'
        description: Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
      ClientCertificateId:
        $ref: '#/definitions/Id'
        description: The identifier of a client certificate for a Stage. Supported only for WebSocket APIs.
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the stage was created.
      DefaultRouteSettings:
        $ref: '#/definitions/RouteSettings'
        description: Default route settings for the stage.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: The identifier of the Deployment that the Stage is associated with. Can't be updated if autoDeploy is enabled.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the stage.
      LastDeploymentStatusMessage:
        $ref: '#/definitions/__string'
        description: Describes the status of the last deployment of a stage. Supported only for stages with autoDeploy enabled.
      LastUpdatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the stage was last updated.
      RouteSettings:
        $ref: '#/definitions/RouteSettingsMap'
        description: 'Route settings for the stage, by routeKey.'
      StageName:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the stage.
      StageVariables:
        $ref: '#/definitions/StageVariablesMap'
        description: 'A map that defines the stage variables for a stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+. Supported only for WebSocket APIs.'
      Tags:
        $ref: '#/definitions/Tags'
        description: The collection of tags. Each tag element is associated with a given resource.
  GetStagesResponse:
    type: object
    properties:
      Items:
        $ref: '#/definitions/__listOfStage'
        description: The elements from this collection.
      NextToken:
        $ref: '#/definitions/NextToken'
        description: The next page of elements from this collection. Not valid for the last element of the collection.
  GetTagsResponse:
    type: object
    required:
      - Tags
    properties:
      Tags:
        $ref: '#/definitions/Tags'
  ImportApiResponse:
    type: object
    properties:
      ApiEndpoint:
        $ref: '#/definitions/__string'
        description: 'The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.'
      ApiId:
        $ref: '#/definitions/Id'
        description: The API ID.
      ApiKeySelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
      CorsConfiguration:
        $ref: '#/definitions/Cors'
        description: A CORS configuration. Supported only for HTTP APIs.
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the API was created.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the API.
      DisableSchemaValidation:
        $ref: '#/definitions/__boolean'
        description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
      ImportInfo:
        $ref: '#/definitions/__listOf__string'
        description: The validation information during API import. This may include particular properties of your OpenAPI definition which are ignored during import. Supported only for HTTP APIs.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the API.
      ProtocolType:
        $ref: '#/definitions/ProtocolType'
        description: The API protocol.
      RouteSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.'
      Tags:
        $ref: '#/definitions/Tags'
        description: A collection of tags associated with the API.
      Version:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: A version identifier for the API.
      Warnings:
        $ref: '#/definitions/__listOf__string'
        description: The warning messages reported when failonwarnings is turned on during API import.
  ReimportApiResponse:
    type: object
    properties:
      ApiEndpoint:
        $ref: '#/definitions/__string'
        description: 'The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.'
      ApiId:
        $ref: '#/definitions/Id'
        description: The API ID.
      ApiKeySelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
      CorsConfiguration:
        $ref: '#/definitions/Cors'
        description: A CORS configuration. Supported only for HTTP APIs.
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the API was created.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the API.
      DisableSchemaValidation:
        $ref: '#/definitions/__boolean'
        description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
      ImportInfo:
        $ref: '#/definitions/__listOf__string'
        description: The validation information during API import. This may include particular properties of your OpenAPI definition which are ignored during import. Supported only for HTTP APIs.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the API.
      ProtocolType:
        $ref: '#/definitions/ProtocolType'
        description: The API protocol.
      RouteSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.'
      Tags:
        $ref: '#/definitions/Tags'
        description: A collection of tags associated with the API.
      Version:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: A version identifier for the API.
      Warnings:
        $ref: '#/definitions/__listOf__string'
        description: The warning messages reported when failonwarnings is turned on during API import.
  TagResourceResponse:
    type: object
    properties: {}
  UpdateApiResponse:
    type: object
    properties:
      ApiEndpoint:
        $ref: '#/definitions/__string'
        description: 'The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.'
      ApiId:
        $ref: '#/definitions/Id'
        description: The API ID.
      ApiKeySelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
      CorsConfiguration:
        $ref: '#/definitions/Cors'
        description: A CORS configuration. Supported only for HTTP APIs.
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the API was created.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the API.
      DisableSchemaValidation:
        $ref: '#/definitions/__boolean'
        description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
      ImportInfo:
        $ref: '#/definitions/__listOf__string'
        description: The validation information during API import. This may include particular properties of your OpenAPI definition which are ignored during import. Supported only for HTTP APIs.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the API.
      ProtocolType:
        $ref: '#/definitions/ProtocolType'
        description: The API protocol.
      RouteSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.'
      Tags:
        $ref: '#/definitions/Tags'
        description: A collection of tags associated with the API.
      Version:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: A version identifier for the API.
      Warnings:
        $ref: '#/definitions/__listOf__string'
        description: The warning messages reported when failonwarnings is turned on during API import.
  UpdateApiMappingResponse:
    type: object
    properties:
      ApiId:
        $ref: '#/definitions/Id'
        description: The API identifier.
      ApiMappingId:
        $ref: '#/definitions/Id'
        description: The API mapping identifier.
      ApiMappingKey:
        $ref: '#/definitions/SelectionKey'
        description: The API mapping key.
      Stage:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The API stage.
  UpdateAuthorizerResponse:
    type: object
    properties:
      AuthorizerCredentialsArn:
        $ref: '#/definitions/Arn'
        description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null. Supported only for REQUEST authorizers.'
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: The authorizer identifier.
      AuthorizerResultTtlInSeconds:
        $ref: '#/definitions/IntegerWithLengthBetween0And3600'
        description: Authorizer caching is not currently supported. Don't specify this value for authorizers.
      AuthorizerType:
        $ref: '#/definitions/AuthorizerType'
        description: 'The authorizer type. For WebSocket APIs, specify REQUEST for a Lambda function using incoming request parameters. For HTTP APIs, specify JWT to use JSON Web Tokens.'
      AuthorizerUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: |-
          The authorizer's Uniform Resource Identifier (URI). ForREQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                         , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
      IdentitySource:
        $ref: '#/definitions/IdentitySourceList'
        description: '<p>The identity source for which authorization is requested.</p> <p>For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. Currently, the identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name. These parameters will be used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function.</p> <p>For JWT, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example "$request.header.Authorization".</p>'
      IdentityValidationExpression:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The validation expression does not apply to the REQUEST authorizer.
      JwtConfiguration:
        $ref: '#/definitions/JWTConfiguration'
        description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the authorizer.
  UpdateDeploymentResponse:
    type: object
    properties:
      AutoDeployed:
        $ref: '#/definitions/__boolean'
        description: Specifies whether a deployment was automatically released.
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The date and time when the Deployment resource was created.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: The identifier for the deployment.
      DeploymentStatus:
        $ref: '#/definitions/DeploymentStatus'
        description: 'The status of the deployment: PENDING, FAILED, or SUCCEEDED.'
      DeploymentStatusMessage:
        $ref: '#/definitions/__string'
        description: May contain additional feedback on the status of an API deployment.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description for the deployment.
  UpdateDomainNameResponse:
    type: object
    properties:
      ApiMappingSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The API mapping selection expression.
      DomainName:
        $ref: '#/definitions/StringWithLengthBetween1And512'
        description: The name of the DomainName resource.
      DomainNameConfigurations:
        $ref: '#/definitions/DomainNameConfigurations'
        description: The domain name configurations.
      Tags:
        $ref: '#/definitions/Tags'
        description: The collection of tags associated with a domain name.
  UpdateIntegrationResult:
    type: object
    properties:
      ApiGatewayManaged:
        $ref: '#/definitions/__boolean'
        description: 'Specifies whether an integration is managed by API Gateway. If you created an API using using quick create, the resulting integration is managed by API Gateway. You can update a managed integration, but you can''t delete it.'
      ConnectionId:
        $ref: '#/definitions/StringWithLengthBetween1And1024'
        description: The connection ID.
      ConnectionType:
        $ref: '#/definitions/ConnectionType'
        description: 'The type of the network connection to the integration endpoint. Currently the only valid value is INTERNET, for connections through the public routable internet.'
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
      CredentialsArn:
        $ref: '#/definitions/Arn'
        description: 'Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: Represents the description of an integration.
      IntegrationId:
        $ref: '#/definitions/Id'
        description: Represents the identifier of an integration.
      IntegrationMethod:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: Specifies the integration's HTTP method type.
      IntegrationResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'The integration response selection expression for the integration. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions">Integration Response Selection Expressions</a>.'
      IntegrationType:
        $ref: '#/definitions/IntegrationType'
        description: '<p>The integration type of an integration. One of the following:</p> <p>AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY: for integrating the route or method request with the Lambda function-invoking action with the client request passed through as-is. This integration is also referred to as Lambda proxy integration.</p> <p>HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs.</p> <p>HTTP_PROXY: for integrating route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration.</p> <p>MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.</p>'
      IntegrationUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: 'For a Lambda proxy integration, this is the URI of the Lambda function.'
      PassthroughBehavior:
        $ref: '#/definitions/PassthroughBehavior'
        description: '<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p> <p>WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p> <p>NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>'
      PayloadFormatVersion:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: 'Specifies the format of the payload sent to an integration. Required for HTTP APIs. Currently, the only supported value is 1.0.'
      RequestParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: |-
          A key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                         , where 
                            <replaceable>{location}</replaceable>
                          is querystring, path, or header; and 
                            <replaceable>{name}</replaceable>
                          must be a valid and unique method request parameter name. Supported only for WebSocket APIs.
      RequestTemplates:
        $ref: '#/definitions/TemplateMap'
        description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.'
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expression for the integration. Supported only for WebSocket APIs.
      TimeoutInMillis:
        $ref: '#/definitions/IntegerWithLengthBetween50And29000'
        description: 'Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds for WebSocket APIs. The default value is 5,000 milliseconds, or 5 seconds for HTTP APIs.'
  UpdateIntegrationResponseResponse:
    type: object
    properties:
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
      IntegrationResponseId:
        $ref: '#/definitions/Id'
        description: The integration response ID.
      IntegrationResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: The integration response key.
      ResponseParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
      ResponseTemplates:
        $ref: '#/definitions/TemplateMap'
        description: 'The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.'
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expressions for the integration response.
  UpdateModelResponse:
    type: object
    properties:
      ContentType:
        $ref: '#/definitions/StringWithLengthBetween1And256'
        description: 'The content-type for the model, for example, "application/json".'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the model.
      ModelId:
        $ref: '#/definitions/Id'
        description: The model identifier.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the model. Must be alphanumeric.
      Schema:
        $ref: '#/definitions/StringWithLengthBetween0And32K'
        description: 'The schema for the model. For application/json models, this should be JSON schema draft 4 model.'
  UpdateRouteResult:
    type: object
    properties:
      ApiGatewayManaged:
        $ref: '#/definitions/__boolean'
        description: 'Specifies whether a route is managed by API Gateway. If you created an API using quick create, the $default route is managed by API Gateway. You can''t modify the $default route key.'
      ApiKeyRequired:
        $ref: '#/definitions/__boolean'
        description: Specifies whether an API key is required for this route. Supported only for WebSocket APIs.
      AuthorizationScopes:
        $ref: '#/definitions/AuthorizationScopes'
        description: 'A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.'
      AuthorizationType:
        $ref: '#/definitions/AuthorizationType'
        description: 'The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, or JWT for using JSON Web Tokens.'
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The model selection expression for the route. Supported only for WebSocket APIs.
      OperationName:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: The operation name for the route.
      RequestModels:
        $ref: '#/definitions/RouteModels'
        description: The request models for the route. Supported only for WebSocket APIs.
      RequestParameters:
        $ref: '#/definitions/RouteParameters'
        description: The request parameters for the route. Supported only for WebSocket APIs.
      RouteId:
        $ref: '#/definitions/Id'
        description: The route ID.
      RouteKey:
        $ref: '#/definitions/SelectionKey'
        description: The route key for the route.
      RouteResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route response selection expression for the route. Supported only for WebSocket APIs.
      Target:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The target for the route.
  UpdateRouteResponseResponse:
    type: object
    properties:
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: Represents the model selection expression of a route response. Supported only for WebSocket APIs.
      ResponseModels:
        $ref: '#/definitions/RouteModels'
        description: Represents the response models of a route response.
      ResponseParameters:
        $ref: '#/definitions/RouteParameters'
        description: Represents the response parameters of a route response.
      RouteResponseId:
        $ref: '#/definitions/Id'
        description: Represents the identifier of a route response.
      RouteResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: Represents the route response key of a route response.
  UpdateStageResponse:
    type: object
    properties:
      AccessLogSettings:
        $ref: '#/definitions/AccessLogSettings'
        description: Settings for logging access in this stage.
      ApiGatewayManaged:
        $ref: '#/definitions/__boolean'
        description: 'Specifies whether a stage is managed by API Gateway. If you created an API using quick create, the $default stage is managed by API Gateway. You can''t modify the $default stage.'
      AutoDeploy:
        $ref: '#/definitions/__boolean'
        description: Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
      ClientCertificateId:
        $ref: '#/definitions/Id'
        description: The identifier of a client certificate for a Stage. Supported only for WebSocket APIs.
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the stage was created.
      DefaultRouteSettings:
        $ref: '#/definitions/RouteSettings'
        description: Default route settings for the stage.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: The identifier of the Deployment that the Stage is associated with. Can't be updated if autoDeploy is enabled.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the stage.
      LastDeploymentStatusMessage:
        $ref: '#/definitions/__string'
        description: Describes the status of the last deployment of a stage. Supported only for stages with autoDeploy enabled.
      LastUpdatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the stage was last updated.
      RouteSettings:
        $ref: '#/definitions/RouteSettingsMap'
        description: 'Route settings for the stage, by routeKey.'
      StageName:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the stage.
      StageVariables:
        $ref: '#/definitions/StageVariablesMap'
        description: 'A map that defines the stage variables for a stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+. Supported only for WebSocket APIs.'
      Tags:
        $ref: '#/definitions/Tags'
        description: The collection of tags. Each tag element is associated with a given resource.
  AccessLogSettings:
    type: object
    properties:
      DestinationArn:
        $ref: '#/definitions/Arn'
        description: The ARN of the CloudWatch Logs log group to receive access logs.
      Format:
        $ref: '#/definitions/StringWithLengthBetween1And1024'
        description: 'A single line format of the access logs of data, as specified by selected $context variables. The format must include at least $context.requestId.'
    description: Settings for logging access in a stage.
  Id:
    type: string
    description: The identifier.
  SelectionExpression:
    type: string
    description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
  Cors:
    type: object
    properties:
      AllowCredentials:
        $ref: '#/definitions/__boolean'
        description: Specifies whether credentials are included in the CORS request. Supported only for HTTP APIs.
      AllowHeaders:
        $ref: '#/definitions/CorsHeaderList'
        description: Represents a collection of allowed headers. Supported only for HTTP APIs.
      AllowMethods:
        $ref: '#/definitions/CorsMethodList'
        description: Represents a collection of allowed HTTP methods. Supported only for HTTP APIs.
      AllowOrigins:
        $ref: '#/definitions/CorsOriginList'
        description: Represents a collection of allowed origins. Supported only for HTTP APIs.
      ExposeHeaders:
        $ref: '#/definitions/CorsHeaderList'
        description: Represents a collection of exposed headers. Supported only for HTTP APIs.
      MaxAge:
        $ref: '#/definitions/IntegerWithLengthBetweenMinus1And86400'
        description: The number of seconds that the browser should cache preflight request results. Supported only for HTTP APIs.
    description: 'Represents a CORS configuration. Supported only for HTTP APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html">Configuring CORS</a> for more information.'
  __timestampIso8601:
    type: string
    format: date-time
  StringWithLengthBetween0And1024:
    type: string
    description: 'A string with a length between [0-1024].'
  ProtocolType:
    type: string
    enum:
      - WEBSOCKET
      - HTTP
    description: Represents a protocol type.
  Tags:
    type: object
    description: Represents a collection of tags associated with the resource.
    additionalProperties:
      $ref: '#/definitions/StringWithLengthBetween1And1600'
  Api:
    type: object
    required:
      - RouteSelectionExpression
      - Name
      - ProtocolType
    properties:
      ApiEndpoint:
        $ref: '#/definitions/__string'
        description: 'The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.'
      ApiId:
        $ref: '#/definitions/Id'
        description: The API ID.
      ApiKeySelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
      CorsConfiguration:
        $ref: '#/definitions/Cors'
        description: A CORS configuration. Supported only for HTTP APIs.
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the API was created.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the API.
      DisableSchemaValidation:
        $ref: '#/definitions/__boolean'
        description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
      ImportInfo:
        $ref: '#/definitions/__listOf__string'
        description: The validation information during API import. This may include particular properties of your OpenAPI definition which are ignored during import. Supported only for HTTP APIs.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the API.
      ProtocolType:
        $ref: '#/definitions/ProtocolType'
        description: The API protocol.
      RouteSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.'
      Tags:
        $ref: '#/definitions/Tags'
        description: A collection of tags associated with the API.
      Version:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: A version identifier for the API.
      Warnings:
        $ref: '#/definitions/__listOf__string'
        description: The warning messages reported when failonwarnings is turned on during API import.
    description: Represents an API.
  SelectionKey:
    type: string
    description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
  ApiMapping:
    type: object
    required:
      - Stage
      - ApiId
    properties:
      ApiId:
        $ref: '#/definitions/Id'
        description: The API identifier.
      ApiMappingId:
        $ref: '#/definitions/Id'
        description: The API mapping identifier.
      ApiMappingKey:
        $ref: '#/definitions/SelectionKey'
        description: The API mapping key.
      Stage:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The API stage.
    description: Represents an API mapping.
  AuthorizationScopes:
    type: array
    description: 'A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.'
    items:
      $ref: '#/definitions/StringWithLengthBetween1And64'
  AuthorizationType:
    type: string
    enum:
      - NONE
      - AWS_IAM
      - CUSTOM
      - JWT
    description: 'The authorization type. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer. For HTTP APIs, valid values are NONE for open access, or JWT for using JSON Web Tokens.'
  IntegerWithLengthBetween0And3600:
    type: integer
    description: |2-

                  <p>An integer with a value between [0-3600].</p>
               
    minimum: 0
    maximum: 3600
  AuthorizerType:
    type: string
    enum:
      - REQUEST
      - JWT
    description: 'The authorizer type. For WebSocket APIs, specify REQUEST for a Lambda function using incoming request parameters. For HTTP APIs, specify JWT to use JSON Web Tokens.'
  IdentitySourceList:
    type: array
    description: 'The identity source for which authorization is requested. For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header, a Name query string parameter are defined as identity sources, this value is $method.request.header.Auth, $method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.'
    items:
      $ref: '#/definitions/__string'
  JWTConfiguration:
    type: object
    properties:
      Audience:
        $ref: '#/definitions/__listOf__string'
        description: 'A list of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list. See <a href="https://tools.ietf.org/html/rfc7519#section-4.1.3">RFC 7519</a>. Supported only for HTTP APIs.'
      Issuer:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: |-
          The base domain of the identity provider that issues JSON Web Tokens. For example, an Amazon Cognito user pool has the following format: https://cognito-idp.<replaceable>{region}</replaceable>.amazonaws.com/<replaceable>{userPoolId}</replaceable>
                         . Required for the JWT authorizer type. Supported only for HTTP APIs.
    description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
  Authorizer:
    type: object
    required:
      - Name
    properties:
      AuthorizerCredentialsArn:
        $ref: '#/definitions/Arn'
        description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null. Supported only for REQUEST authorizers.'
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: The authorizer identifier.
      AuthorizerResultTtlInSeconds:
        $ref: '#/definitions/IntegerWithLengthBetween0And3600'
        description: Authorizer caching is not currently supported. Don't specify this value for authorizers.
      AuthorizerType:
        $ref: '#/definitions/AuthorizerType'
        description: 'The authorizer type. For WebSocket APIs, specify REQUEST for a Lambda function using incoming request parameters. For HTTP APIs, specify JWT to use JSON Web Tokens.'
      AuthorizerUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: |-
          The authorizer's Uniform Resource Identifier (URI). ForREQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                         , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
      IdentitySource:
        $ref: '#/definitions/IdentitySourceList'
        description: '<p>The identity source for which authorization is requested.</p> <p>For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. Currently, the identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name. These parameters will be used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function.</p> <p>For JWT, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example "$request.header.Authorization".</p>'
      IdentityValidationExpression:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The validation expression does not apply to the REQUEST authorizer.
      JwtConfiguration:
        $ref: '#/definitions/JWTConfiguration'
        description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the authorizer.
    description: Represents an authorizer.
  ConnectionType:
    type: string
    enum:
      - INTERNET
      - VPC_LINK
    description: Represents a connection type.
  ContentHandlingStrategy:
    type: string
    enum:
      - CONVERT_TO_BINARY
      - CONVERT_TO_TEXT
    description: Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.
  CreateApiMappingRequest:
    type: object
    required:
      - Stage
      - ApiId
    properties:
      ApiId:
        $ref: '#/definitions/Id'
        description: The API identifier.
      ApiMappingKey:
        $ref: '#/definitions/SelectionKey'
        description: The API mapping key.
      Stage:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The API stage.
    description: Creates a new ApiMapping resource to represent an API mapping.
  CreateApiRequest:
    type: object
    required:
      - ProtocolType
      - Name
    properties:
      ApiKeySelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
      CorsConfiguration:
        $ref: '#/definitions/Cors'
        description: 'A CORS configuration. Supported only for HTTP APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html">Configuring CORS</a> for more information.'
      CredentialsArn:
        $ref: '#/definitions/Arn'
        description: 'This property is part of quick create. It specifies the credentials required for the integration, if any. For a Lambda integration, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null. Currently, this property is not used for HTTP integrations. Supported only for HTTP APIs.'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the API.
      DisableSchemaValidation:
        $ref: '#/definitions/__boolean'
        description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the API.
      ProtocolType:
        $ref: '#/definitions/ProtocolType'
        description: The API protocol.
      RouteKey:
        $ref: '#/definitions/SelectionKey'
        description: 'This property is part of quick create. If you don''t specify a routeKey, a default route of $default is created. The $default route acts as a catch-all for any request made to your API, for a particular stage. The $default route key can''t be modified. You can add routes after creating the API, and you can update the route keys of additional routes. Supported only for HTTP APIs.'
      RouteSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.'
      Tags:
        $ref: '#/definitions/Tags'
        description: The collection of tags. Each tag element is associated with a given resource.
      Target:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: 'This property is part of quick create. Quick create produces an API with an integration, a default catch-all route, and a default stage which is configured to automatically deploy changes. For HTTP integrations, specify a fully qualified URL. For Lambda integrations, specify a function ARN. The type of the integration will be HTTP_PROXY or AWS_PROXY, respectively. Supported only for HTTP APIs.'
      Version:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: A version identifier for the API.
    description: Creates a new Api resource to represent an API.
  CreateAuthorizerRequest:
    type: object
    required:
      - AuthorizerType
      - IdentitySource
      - Name
    properties:
      AuthorizerCredentialsArn:
        $ref: '#/definitions/Arn'
        description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null. Supported only for REQUEST authorizers.'
      AuthorizerResultTtlInSeconds:
        $ref: '#/definitions/IntegerWithLengthBetween0And3600'
        description: Authorizer caching is not currently supported. Don't specify this value for authorizers.
      AuthorizerType:
        $ref: '#/definitions/AuthorizerType'
        description: 'The authorizer type. For WebSocket APIs, specify REQUEST for a Lambda function using incoming request parameters. For HTTP APIs, specify JWT to use JSON Web Tokens.'
      AuthorizerUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: |-
          The authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                         , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
      IdentitySource:
        $ref: '#/definitions/IdentitySourceList'
        description: '<p>The identity source for which authorization is requested.</p> <p>For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. Currently, the identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name. These parameters will be used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function.</p> <p>For JWT, a single entry that specifies where to extract the JSON Web Token (JWT )from inbound requests. Currently only header-based and query parameter-based selections are supported, for example "$request.header.Authorization".</p>'
      IdentityValidationExpression:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: This parameter is not used.
      JwtConfiguration:
        $ref: '#/definitions/JWTConfiguration'
        description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the authorizer.
    description: Creates a new Authorizer resource to represent an authorizer.
  CreateDeploymentRequest:
    type: object
    properties:
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description for the deployment resource.
      StageName:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the Stage resource for the Deployment resource to create.
    description: Creates a new Deployment resource to represent a deployment.
  DeploymentStatus:
    type: string
    enum:
      - PENDING
      - FAILED
      - DEPLOYED
    description: Represents a deployment status.
  DomainNameConfigurations:
    type: array
    description: The domain name configurations.
    items:
      $ref: '#/definitions/DomainNameConfiguration'
  CreateDomainNameRequest:
    type: object
    required:
      - DomainName
    properties:
      DomainName:
        $ref: '#/definitions/StringWithLengthBetween1And512'
        description: The domain name.
      DomainNameConfigurations:
        $ref: '#/definitions/DomainNameConfigurations'
        description: The domain name configurations.
      Tags:
        $ref: '#/definitions/Tags'
        description: The collection of tags associated with a domain name.
    description: Creates a new DomainName resource to represent a domain name.
  IntegrationType:
    type: string
    enum:
      - AWS
      - HTTP
      - MOCK
      - HTTP_PROXY
      - AWS_PROXY
    description: Represents an API method integration type.
  PassthroughBehavior:
    type: string
    enum:
      - WHEN_NO_MATCH
      - NEVER
      - WHEN_NO_TEMPLATES
    description: Represents passthrough behavior for an integration response. Supported only for WebSocket APIs.
  IntegrationParameters:
    type: object
    description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
    additionalProperties:
      $ref: '#/definitions/StringWithLengthBetween1And512'
  TemplateMap:
    type: object
    description: A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.
    additionalProperties:
      $ref: '#/definitions/StringWithLengthBetween0And32K'
  IntegerWithLengthBetween50And29000:
    type: integer
    description: |2-

                  <p>An integer with a value between [50-29000].</p>
               
    minimum: 50
    maximum: 29000
  CreateIntegrationRequest:
    type: object
    required:
      - IntegrationType
    properties:
      ConnectionId:
        $ref: '#/definitions/StringWithLengthBetween1And1024'
        description: The connection ID.
      ConnectionType:
        $ref: '#/definitions/ConnectionType'
        description: 'The type of the network connection to the integration endpoint. Currently the only valid value is INTERNET, for connections through the public routable internet.'
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
      CredentialsArn:
        $ref: '#/definitions/Arn'
        description: 'Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the integration.
      IntegrationMethod:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: Specifies the integration's HTTP method type.
      IntegrationType:
        $ref: '#/definitions/IntegrationType'
        description: '<p>The integration type of an integration. One of the following:</p> <p>AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY: for integrating the route or method request with the Lambda function-invoking action with the client request passed through as-is. This integration is also referred to as Lambda proxy integration.</p> <p>HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs.</p> <p>HTTP_PROXY: for integrating route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration.</p> <p>MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.</p>'
      IntegrationUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: 'For a Lambda proxy integration, this is the URI of the Lambda function.'
      PassthroughBehavior:
        $ref: '#/definitions/PassthroughBehavior'
        description: '<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p> <p>WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p> <p>NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>'
      PayloadFormatVersion:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: 'Specifies the format of the payload sent to an integration. Required for HTTP APIs. Currently, the only supported value is 1.0.'
      RequestParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: |-
          A key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                         , where 
                            <replaceable>{location}</replaceable>
                          is querystring, path, or header; and 
                            <replaceable>{name}</replaceable>
                          must be a valid and unique method request parameter name. Supported only for WebSocket APIs.
      RequestTemplates:
        $ref: '#/definitions/TemplateMap'
        description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.'
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expression for the integration.
      TimeoutInMillis:
        $ref: '#/definitions/IntegerWithLengthBetween50And29000'
        description: 'Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds for WebSocket APIs. The default value is 5,000 milliseconds, or 5 seconds for HTTP APIs.'
    description: Creates a new Integration resource to represent an integration.
  CreateIntegrationResponseRequest:
    type: object
    required:
      - IntegrationResponseKey
    properties:
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: '<p>Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
      IntegrationResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: The integration response key.
      ResponseParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where {name} is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where {name} is a valid and unique response header name and {JSON-expression} is a valid JSON expression without the $ prefix.'
      ResponseTemplates:
        $ref: '#/definitions/TemplateMap'
        description: 'The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.'
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expression for the integration response. Supported only for WebSocket APIs.
    description: Creates a new IntegrationResponse resource to represent an integration response.
  StringWithLengthBetween1And256:
    type: string
    description: 'A string with a length between [1-256].'
  CreateModelRequest:
    type: object
    required:
      - Schema
      - Name
    properties:
      ContentType:
        $ref: '#/definitions/StringWithLengthBetween1And256'
        description: 'The content-type for the model, for example, "application/json".'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the model.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the model. Must be alphanumeric.
      Schema:
        $ref: '#/definitions/StringWithLengthBetween0And32K'
        description: 'The schema for the model. For application/json models, this should be JSON schema draft 4 model.'
    description: Creates a new Model.
  RouteModels:
    type: object
    description: The route models.
    additionalProperties:
      $ref: '#/definitions/StringWithLengthBetween1And128'
  RouteParameters:
    type: object
    description: The route parameters.
    additionalProperties:
      $ref: '#/definitions/ParameterConstraints'
  CreateRouteRequest:
    type: object
    required:
      - RouteKey
    properties:
      ApiKeyRequired:
        $ref: '#/definitions/__boolean'
        description: Specifies whether an API key is required for the route. Supported only for WebSocket APIs.
      AuthorizationScopes:
        $ref: '#/definitions/AuthorizationScopes'
        description: The authorization scopes supported by this route.
      AuthorizationType:
        $ref: '#/definitions/AuthorizationType'
        description: 'The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, or JWT for using JSON Web Tokens.'
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The model selection expression for the route. Supported only for WebSocket APIs.
      OperationName:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: The operation name for the route.
      RequestModels:
        $ref: '#/definitions/RouteModels'
        description: The request models for the route. Supported only for WebSocket APIs.
      RequestParameters:
        $ref: '#/definitions/RouteParameters'
        description: The request parameters for the route. Supported only for WebSocket APIs.
      RouteKey:
        $ref: '#/definitions/SelectionKey'
        description: The route key for the route.
      RouteResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route response selection expression for the route. Supported only for WebSocket APIs.
      Target:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The target for the route.
    description: Creates a new Route resource to represent a route.
  CreateRouteResponseRequest:
    type: object
    required:
      - RouteResponseKey
    properties:
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The model selection expression for the route response. Supported only for WebSocket APIs.
      ResponseModels:
        $ref: '#/definitions/RouteModels'
        description: The response models for the route response.
      ResponseParameters:
        $ref: '#/definitions/RouteParameters'
        description: The route response parameters.
      RouteResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: The route response key.
    description: Creates a new RouteResponse resource to represent a route response.
  RouteSettingsMap:
    type: object
    description: The route settings map.
    additionalProperties:
      $ref: '#/definitions/RouteSettings'
  StageVariablesMap:
    type: object
    description: The stage variable map.
    additionalProperties:
      $ref: '#/definitions/StringWithLengthBetween0And2048'
  CreateStageRequest:
    type: object
    required:
      - StageName
    properties:
      AccessLogSettings:
        $ref: '#/definitions/AccessLogSettings'
        description: Settings for logging access in this stage.
      AutoDeploy:
        $ref: '#/definitions/__boolean'
        description: Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
      ClientCertificateId:
        $ref: '#/definitions/Id'
        description: The identifier of a client certificate for a Stage. Supported only for WebSocket APIs.
      DefaultRouteSettings:
        $ref: '#/definitions/RouteSettings'
        description: The default route settings for the stage.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: The deployment identifier of the API stage.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description for the API stage.
      RouteSettings:
        $ref: '#/definitions/RouteSettingsMap'
        description: 'Route settings for the stage, by routeKey.'
      StageName:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the stage.
      StageVariables:
        $ref: '#/definitions/StageVariablesMap'
        description: 'A map that defines the stage variables for a Stage. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+. Supported only for WebSocket APIs.'
      Tags:
        $ref: '#/definitions/Tags'
        description: The collection of tags. Each tag element is associated with a given resource.
    description: Creates a new Stage resource to represent a stage.
  DeleteApiMappingRequest:
    type: object
    properties: {}
  DeleteApiRequest:
    type: object
    properties: {}
  DeleteAuthorizerRequest:
    type: object
    properties: {}
  DeleteCorsConfigurationRequest:
    type: object
    properties: {}
  DeleteDeploymentRequest:
    type: object
    properties: {}
  DeleteDomainNameRequest:
    type: object
    properties: {}
  DeleteIntegrationRequest:
    type: object
    properties: {}
  DeleteIntegrationResponseRequest:
    type: object
    properties: {}
  DeleteModelRequest:
    type: object
    properties: {}
  DeleteRouteRequest:
    type: object
    properties: {}
  DeleteRouteResponseRequest:
    type: object
    properties: {}
  DeleteRouteSettingsRequest:
    type: object
    properties: {}
  DeleteStageRequest:
    type: object
    properties: {}
  Deployment:
    type: object
    properties:
      AutoDeployed:
        $ref: '#/definitions/__boolean'
        description: Specifies whether a deployment was automatically released.
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The date and time when the Deployment resource was created.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: The identifier for the deployment.
      DeploymentStatus:
        $ref: '#/definitions/DeploymentStatus'
        description: 'The status of the deployment: PENDING, FAILED, or SUCCEEDED.'
      DeploymentStatusMessage:
        $ref: '#/definitions/__string'
        description: May contain additional feedback on the status of an API deployment.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description for the deployment.
    description: An immutable representation of an API that can be called by users. A Deployment must be associated with a Stage for it to be callable over the internet.
  DomainName:
    type: object
    required:
      - DomainName
    properties:
      ApiMappingSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The API mapping selection expression.
      DomainName:
        $ref: '#/definitions/StringWithLengthBetween1And512'
        description: The name of the DomainName resource.
      DomainNameConfigurations:
        $ref: '#/definitions/DomainNameConfigurations'
        description: The domain name configurations.
      Tags:
        $ref: '#/definitions/Tags'
        description: The collection of tags associated with a domain name.
    description: Represents a domain name.
  DomainNameStatus:
    type: string
    enum:
      - AVAILABLE
      - UPDATING
    description: 'The status of the domain name migration. The valid values are AVAILABLE and UPDATING. If the status is UPDATING, the domain cannot be modified further until the existing operation is complete. If it is AVAILABLE, the domain can be updated.'
  EndpointType:
    type: string
    enum:
      - REGIONAL
      - EDGE
    description: Represents an endpoint type.
  SecurityPolicy:
    type: string
    enum:
      - TLS_1_0
      - TLS_1_2
    description: The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are TLS_1_0 and TLS_1_2.
  GetApiMappingRequest:
    type: object
    properties: {}
  GetApiMappingsRequest:
    type: object
    properties: {}
  __listOfApiMapping:
    type: array
    items:
      $ref: '#/definitions/ApiMapping'
  NextToken:
    type: string
    description: The next page of elements from this collection. Not valid for the last element of the collection.
  GetApiRequest:
    type: object
    properties: {}
  GetApisRequest:
    type: object
    properties: {}
  __listOfApi:
    type: array
    items:
      $ref: '#/definitions/Api'
  GetAuthorizerRequest:
    type: object
    properties: {}
  GetAuthorizersRequest:
    type: object
    properties: {}
  __listOfAuthorizer:
    type: array
    items:
      $ref: '#/definitions/Authorizer'
  GetDeploymentRequest:
    type: object
    properties: {}
  GetDeploymentsRequest:
    type: object
    properties: {}
  __listOfDeployment:
    type: array
    items:
      $ref: '#/definitions/Deployment'
  GetDomainNameRequest:
    type: object
    properties: {}
  GetDomainNamesRequest:
    type: object
    properties: {}
  __listOfDomainName:
    type: array
    items:
      $ref: '#/definitions/DomainName'
  GetIntegrationRequest:
    type: object
    properties: {}
  GetIntegrationResponseRequest:
    type: object
    properties: {}
  GetIntegrationResponsesRequest:
    type: object
    properties: {}
  __listOfIntegrationResponse:
    type: array
    items:
      $ref: '#/definitions/IntegrationResponse'
  GetIntegrationsRequest:
    type: object
    properties: {}
  __listOfIntegration:
    type: array
    items:
      $ref: '#/definitions/Integration'
  GetModelRequest:
    type: object
    properties: {}
  GetModelTemplateRequest:
    type: object
    properties: {}
  GetModelsRequest:
    type: object
    properties: {}
  __listOfModel:
    type: array
    items:
      $ref: '#/definitions/Model'
  GetRouteRequest:
    type: object
    properties: {}
  GetRouteResponseRequest:
    type: object
    properties: {}
  GetRouteResponsesRequest:
    type: object
    properties: {}
  __listOfRouteResponse:
    type: array
    items:
      $ref: '#/definitions/RouteResponse'
  GetRoutesRequest:
    type: object
    properties: {}
  __listOfRoute:
    type: array
    items:
      $ref: '#/definitions/Route'
  GetStageRequest:
    type: object
    properties: {}
  GetStagesRequest:
    type: object
    properties: {}
  __listOfStage:
    type: array
    items:
      $ref: '#/definitions/Stage'
  GetTagsRequest:
    type: object
    properties: {}
  ImportApiRequest:
    type: object
    required:
      - Body
    properties:
      Body:
        $ref: '#/definitions/__string'
        description: The OpenAPI definition. Supported only for HTTP APIs.
    description: ''
  Integration:
    type: object
    properties:
      ApiGatewayManaged:
        $ref: '#/definitions/__boolean'
        description: 'Specifies whether an integration is managed by API Gateway. If you created an API using using quick create, the resulting integration is managed by API Gateway. You can update a managed integration, but you can''t delete it.'
      ConnectionId:
        $ref: '#/definitions/StringWithLengthBetween1And1024'
        description: The connection ID.
      ConnectionType:
        $ref: '#/definitions/ConnectionType'
        description: 'The type of the network connection to the integration endpoint. Currently the only valid value is INTERNET, for connections through the public routable internet.'
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
      CredentialsArn:
        $ref: '#/definitions/Arn'
        description: 'Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: Represents the description of an integration.
      IntegrationId:
        $ref: '#/definitions/Id'
        description: Represents the identifier of an integration.
      IntegrationMethod:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: Specifies the integration's HTTP method type.
      IntegrationResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'The integration response selection expression for the integration. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions">Integration Response Selection Expressions</a>.'
      IntegrationType:
        $ref: '#/definitions/IntegrationType'
        description: '<p>The integration type of an integration. One of the following:</p> <p>AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY: for integrating the route or method request with the Lambda function-invoking action with the client request passed through as-is. This integration is also referred to as Lambda proxy integration.</p> <p>HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs.</p> <p>HTTP_PROXY: for integrating route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration.</p> <p>MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.</p>'
      IntegrationUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: 'For a Lambda proxy integration, this is the URI of the Lambda function.'
      PassthroughBehavior:
        $ref: '#/definitions/PassthroughBehavior'
        description: '<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p> <p>WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p> <p>NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>'
      PayloadFormatVersion:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: 'Specifies the format of the payload sent to an integration. Required for HTTP APIs. Currently, the only supported value is 1.0.'
      RequestParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: |-
          A key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                         , where 
                            <replaceable>{location}</replaceable>
                          is querystring, path, or header; and 
                            <replaceable>{name}</replaceable>
                          must be a valid and unique method request parameter name. Supported only for WebSocket APIs.
      RequestTemplates:
        $ref: '#/definitions/TemplateMap'
        description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.'
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expression for the integration. Supported only for WebSocket APIs.
      TimeoutInMillis:
        $ref: '#/definitions/IntegerWithLengthBetween50And29000'
        description: 'Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds for WebSocket APIs. The default value is 5,000 milliseconds, or 5 seconds for HTTP APIs.'
    description: Represents an integration.
  IntegrationResponse:
    type: object
    required:
      - IntegrationResponseKey
    properties:
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
      IntegrationResponseId:
        $ref: '#/definitions/Id'
        description: The integration response ID.
      IntegrationResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: The integration response key.
      ResponseParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
      ResponseTemplates:
        $ref: '#/definitions/TemplateMap'
        description: 'The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.'
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expressions for the integration response.
    description: Represents an integration response.
  Model:
    type: object
    required:
      - Name
    properties:
      ContentType:
        $ref: '#/definitions/StringWithLengthBetween1And256'
        description: 'The content-type for the model, for example, "application/json".'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the model.
      ModelId:
        $ref: '#/definitions/Id'
        description: The model identifier.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the model. Must be alphanumeric.
      Schema:
        $ref: '#/definitions/StringWithLengthBetween0And32K'
        description: 'The schema for the model. For application/json models, this should be JSON schema draft 4 model.'
    description: 'Represents a data model for an API. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html">Create Models and Mapping Templates for Request and Response Mappings</a>.'
  ReimportApiRequest:
    type: object
    required:
      - Body
    properties:
      Body:
        $ref: '#/definitions/__string'
        description: The OpenAPI definition. Supported only for HTTP APIs.
    description: ''
  Route:
    type: object
    required:
      - RouteKey
    properties:
      ApiGatewayManaged:
        $ref: '#/definitions/__boolean'
        description: 'Specifies whether a route is managed by API Gateway. If you created an API using quick create, the $default route is managed by API Gateway. You can''t modify the $default route key.'
      ApiKeyRequired:
        $ref: '#/definitions/__boolean'
        description: Specifies whether an API key is required for this route. Supported only for WebSocket APIs.
      AuthorizationScopes:
        $ref: '#/definitions/AuthorizationScopes'
        description: 'A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.'
      AuthorizationType:
        $ref: '#/definitions/AuthorizationType'
        description: 'The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, or JWT for using JSON Web Tokens.'
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The model selection expression for the route. Supported only for WebSocket APIs.
      OperationName:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: The operation name for the route.
      RequestModels:
        $ref: '#/definitions/RouteModels'
        description: The request models for the route. Supported only for WebSocket APIs.
      RequestParameters:
        $ref: '#/definitions/RouteParameters'
        description: The request parameters for the route. Supported only for WebSocket APIs.
      RouteId:
        $ref: '#/definitions/Id'
        description: The route ID.
      RouteKey:
        $ref: '#/definitions/SelectionKey'
        description: The route key for the route.
      RouteResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route response selection expression for the route. Supported only for WebSocket APIs.
      Target:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The target for the route.
    description: Represents a route.
  RouteResponse:
    type: object
    required:
      - RouteResponseKey
    properties:
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: Represents the model selection expression of a route response. Supported only for WebSocket APIs.
      ResponseModels:
        $ref: '#/definitions/RouteModels'
        description: Represents the response models of a route response.
      ResponseParameters:
        $ref: '#/definitions/RouteParameters'
        description: Represents the response parameters of a route response.
      RouteResponseId:
        $ref: '#/definitions/Id'
        description: Represents the identifier of a route response.
      RouteResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: Represents the route response key of a route response.
    description: Represents a route response.
  Stage:
    type: object
    required:
      - StageName
    properties:
      AccessLogSettings:
        $ref: '#/definitions/AccessLogSettings'
        description: Settings for logging access in this stage.
      ApiGatewayManaged:
        $ref: '#/definitions/__boolean'
        description: 'Specifies whether a stage is managed by API Gateway. If you created an API using quick create, the $default stage is managed by API Gateway. You can''t modify the $default stage.'
      AutoDeploy:
        $ref: '#/definitions/__boolean'
        description: Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
      ClientCertificateId:
        $ref: '#/definitions/Id'
        description: The identifier of a client certificate for a Stage. Supported only for WebSocket APIs.
      CreatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the stage was created.
      DefaultRouteSettings:
        $ref: '#/definitions/RouteSettings'
        description: Default route settings for the stage.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: The identifier of the Deployment that the Stage is associated with. Can't be updated if autoDeploy is enabled.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the stage.
      LastDeploymentStatusMessage:
        $ref: '#/definitions/__string'
        description: Describes the status of the last deployment of a stage. Supported only for stages with autoDeploy enabled.
      LastUpdatedDate:
        $ref: '#/definitions/__timestampIso8601'
        description: The timestamp when the stage was last updated.
      RouteSettings:
        $ref: '#/definitions/RouteSettingsMap'
        description: 'Route settings for the stage, by routeKey.'
      StageName:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the stage.
      StageVariables:
        $ref: '#/definitions/StageVariablesMap'
        description: 'A map that defines the stage variables for a stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+. Supported only for WebSocket APIs.'
      Tags:
        $ref: '#/definitions/Tags'
        description: The collection of tags. Each tag element is associated with a given resource.
    description: Represents an API stage.
  TagResourceRequest:
    type: object
    properties:
      Tags:
        $ref: '#/definitions/Tags'
        description: The collection of tags. Each tag element is associated with a given resource.
    description: Creates a new Tag resource to represent a tag.
  UntagResourceRequest:
    type: object
    properties: {}
  UpdateApiMappingRequest:
    type: object
    required:
      - ApiId
    properties:
      ApiId:
        $ref: '#/definitions/Id'
        description: The API identifier.
      ApiMappingKey:
        $ref: '#/definitions/SelectionKey'
        description: The API mapping key.
      Stage:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The API stage.
    description: Updates an ApiMapping.
  UpdateApiRequest:
    type: object
    properties:
      ApiKeySelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
      CorsConfiguration:
        $ref: '#/definitions/Cors'
        description: A CORS configuration. Supported only for HTTP APIs.
      CredentialsArn:
        $ref: '#/definitions/Arn'
        description: 'This property is part of quick create. It specifies the credentials required for the integration, if any. For a Lambda integration, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null. Currently, this property is not used for HTTP integrations. If provided, this value replaces the credentials associated with the quick create integration. Supported only for HTTP APIs.'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the API.
      DisableSchemaValidation:
        $ref: '#/definitions/__boolean'
        description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the API.
      RouteKey:
        $ref: '#/definitions/SelectionKey'
        description: 'This property is part of quick create. If not specified, the route created using quick create is kept. Otherwise, this value replaces the route key of the quick create route. Additional routes may still be added after the API is updated. Supported only for HTTP APIs.'
      RouteSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: 'The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.'
      Target:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: 'This property is part of quick create. For HTTP integrations, specify a fully qualified URL. For Lambda integrations, specify a function ARN. The type of the integration will be HTTP_PROXY or AWS_PROXY, respectively. The value provided updates the integration URI and integration type. You can update a quick-created target, but you can''t remove it from an API. Supported only for HTTP APIs.'
      Version:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: A version identifier for the API.
    description: Updates an Api.
  UpdateAuthorizerRequest:
    type: object
    properties:
      AuthorizerCredentialsArn:
        $ref: '#/definitions/Arn'
        description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.'
      AuthorizerResultTtlInSeconds:
        $ref: '#/definitions/IntegerWithLengthBetween0And3600'
        description: Authorizer caching is not currently supported. Don't specify this value for authorizers.
      AuthorizerType:
        $ref: '#/definitions/AuthorizerType'
        description: 'The authorizer type. For WebSocket APIs, specify REQUEST for a Lambda function using incoming request parameters. For HTTP APIs, specify JWT to use JSON Web Tokens.'
      AuthorizerUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: |-
          The authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                         , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
      IdentitySource:
        $ref: '#/definitions/IdentitySourceList'
        description: '<p>The identity source for which authorization is requested.</p> <p>For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. Currently, the identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name. These parameters will be used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function.</p> <p>For JWT, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example "$request.header.Authorization".</p>'
      IdentityValidationExpression:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: This parameter is not used.
      JwtConfiguration:
        $ref: '#/definitions/JWTConfiguration'
        description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the authorizer.
    description: Updates an Authorizer.
  UpdateDeploymentRequest:
    type: object
    properties:
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description for the deployment resource.
    description: Updates a Deployment.
  UpdateDomainNameRequest:
    type: object
    properties:
      DomainNameConfigurations:
        $ref: '#/definitions/DomainNameConfigurations'
        description: The domain name configurations.
    description: Updates a DomainName.
  UpdateIntegrationRequest:
    type: object
    properties:
      ConnectionId:
        $ref: '#/definitions/StringWithLengthBetween1And1024'
        description: The connection ID.
      ConnectionType:
        $ref: '#/definitions/ConnectionType'
        description: 'The type of the network connection to the integration endpoint. Currently the only valid value is INTERNET, for connections through the public routable internet.'
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
      CredentialsArn:
        $ref: '#/definitions/Arn'
        description: 'Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the integration
      IntegrationMethod:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: Specifies the integration's HTTP method type.
      IntegrationType:
        $ref: '#/definitions/IntegrationType'
        description: '<p>The integration type of an integration. One of the following:</p> <p>AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY: for integrating the route or method request with the Lambda function-invoking action with the client request passed through as-is. This integration is also referred to as Lambda proxy integration.</p> <p>HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs.</p> <p>HTTP_PROXY: for integrating route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration.</p> <p>MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.</p>'
      IntegrationUri:
        $ref: '#/definitions/UriWithLengthBetween1And2048'
        description: 'For a Lambda proxy integration, this is the URI of the Lambda function.'
      PassthroughBehavior:
        $ref: '#/definitions/PassthroughBehavior'
        description: '<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p> <p>WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p> <p>NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>'
      PayloadFormatVersion:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: 'Specifies the format of the payload sent to an integration. Required for HTTP APIs. Currently, the only supported value is 1.0.'
      RequestParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: |-
          A key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                         , where 
                            <replaceable>{location}</replaceable>
                          is querystring, path, or header; and 
                            <replaceable>{name}</replaceable>
                          must be a valid and unique method request parameter name. Supported only for WebSocket APIs.
      RequestTemplates:
        $ref: '#/definitions/TemplateMap'
        description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.'
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expression for the integration.
      TimeoutInMillis:
        $ref: '#/definitions/IntegerWithLengthBetween50And29000'
        description: 'Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds for WebSocket APIs. The default value is 5,000 milliseconds, or 5 seconds for HTTP APIs.'
    description: Updates an Integration.
  UpdateIntegrationResponseRequest:
    type: object
    properties:
      ContentHandlingStrategy:
        $ref: '#/definitions/ContentHandlingStrategy'
        description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
      IntegrationResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: The integration response key.
      ResponseParameters:
        $ref: '#/definitions/IntegrationParameters'
        description: |-
          A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.<replaceable>{name}</replaceable>
                         , where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.<replaceable>{name}</replaceable>
                          or integration.response.body.<replaceable>{JSON-expression}</replaceable>
                         , where 
                            <replaceable>{name}</replaceable>
                          is a valid and unique response header name and 
                            <replaceable>{JSON-expression}</replaceable>
                          is a valid JSON expression without the $ prefix.
      ResponseTemplates:
        $ref: '#/definitions/TemplateMap'
        description: 'The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.'
      TemplateSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The template selection expression for the integration response. Supported only for WebSocket APIs.
    description: Updates an IntegrationResponses.
  UpdateModelRequest:
    type: object
    properties:
      ContentType:
        $ref: '#/definitions/StringWithLengthBetween1And256'
        description: 'The content-type for the model, for example, "application/json".'
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description of the model.
      Name:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The name of the model.
      Schema:
        $ref: '#/definitions/StringWithLengthBetween0And32K'
        description: 'The schema for the model. For application/json models, this should be JSON schema draft 4 model.'
    description: Updates a Model.
  UpdateRouteRequest:
    type: object
    properties:
      ApiKeyRequired:
        $ref: '#/definitions/__boolean'
        description: Specifies whether an API key is required for the route. Supported only for WebSocket APIs.
      AuthorizationScopes:
        $ref: '#/definitions/AuthorizationScopes'
        description: The authorization scopes supported by this route.
      AuthorizationType:
        $ref: '#/definitions/AuthorizationType'
        description: 'The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, or JWT for using JSON Web Tokens.'
      AuthorizerId:
        $ref: '#/definitions/Id'
        description: The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The model selection expression for the route. Supported only for WebSocket APIs.
      OperationName:
        $ref: '#/definitions/StringWithLengthBetween1And64'
        description: The operation name for the route.
      RequestModels:
        $ref: '#/definitions/RouteModels'
        description: The request models for the route. Supported only for WebSocket APIs.
      RequestParameters:
        $ref: '#/definitions/RouteParameters'
        description: The request parameters for the route. Supported only for WebSocket APIs.
      RouteKey:
        $ref: '#/definitions/SelectionKey'
        description: The route key for the route.
      RouteResponseSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The route response selection expression for the route. Supported only for WebSocket APIs.
      Target:
        $ref: '#/definitions/StringWithLengthBetween1And128'
        description: The target for the route.
    description: Updates a Route.
  UpdateRouteResponseRequest:
    type: object
    properties:
      ModelSelectionExpression:
        $ref: '#/definitions/SelectionExpression'
        description: The model selection expression for the route response. Supported only for WebSocket APIs.
      ResponseModels:
        $ref: '#/definitions/RouteModels'
        description: The response models for the route response.
      ResponseParameters:
        $ref: '#/definitions/RouteParameters'
        description: The route response parameters.
      RouteResponseKey:
        $ref: '#/definitions/SelectionKey'
        description: The route response key.
    description: Updates a RouteResponse.
  UpdateStageRequest:
    type: object
    properties:
      AccessLogSettings:
        $ref: '#/definitions/AccessLogSettings'
        description: Settings for logging access in this stage.
      AutoDeploy:
        $ref: '#/definitions/__boolean'
        description: Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
      ClientCertificateId:
        $ref: '#/definitions/Id'
        description: The identifier of a client certificate for a Stage.
      DefaultRouteSettings:
        $ref: '#/definitions/RouteSettings'
        description: The default route settings for the stage.
      DeploymentId:
        $ref: '#/definitions/Id'
        description: The deployment identifier for the API stage. Can't be updated if autoDeploy is enabled.
      Description:
        $ref: '#/definitions/StringWithLengthBetween0And1024'
        description: The description for the API stage.
      RouteSettings:
        $ref: '#/definitions/RouteSettingsMap'
        description: Route settings for the stage.
      StageVariables:
        $ref: '#/definitions/StageVariablesMap'
        description: 'A map that defines the stage variables for a Stage. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+. Supported only for WebSocket APIs.'
    description: Updates a Stage.
