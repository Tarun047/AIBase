swagger: '2.0'
info:
  version: '2015-04-13'
  x-release: v4
  title: AWS CodeCommit
  description: '<fullname>AWS CodeCommit</fullname> <p>This is the <i>AWS CodeCommit API Reference</i>. This reference provides descriptions of the operations and data types for AWS CodeCommit API along with usage examples.</p> <p>You can use the AWS CodeCommit API to work with the following objects:</p> <p>Repositories, by calling the following:</p> <ul> <li> <p> <a>BatchGetRepositories</a>, which returns information about one or more repositories associated with your AWS account.</p> </li> <li> <p> <a>CreateRepository</a>, which creates an AWS CodeCommit repository.</p> </li> <li> <p> <a>DeleteRepository</a>, which deletes an AWS CodeCommit repository.</p> </li> <li> <p> <a>GetRepository</a>, which returns information about a specified repository.</p> </li> <li> <p> <a>ListRepositories</a>, which lists all AWS CodeCommit repositories associated with your AWS account.</p> </li> <li> <p> <a>UpdateRepositoryDescription</a>, which sets or updates the description of the repository.</p> </li> <li> <p> <a>UpdateRepositoryName</a>, which changes the name of the repository. If you change the name of a repository, no other users of that repository can access it until you send them the new HTTPS or SSH URL to use.</p> </li> </ul> <p>Branches, by calling the following:</p> <ul> <li> <p> <a>CreateBranch</a>, which creates a branch in a specified repository.</p> </li> <li> <p> <a>DeleteBranch</a>, which deletes the specified branch in a repository unless it is the default branch.</p> </li> <li> <p> <a>GetBranch</a>, which returns information about a specified branch.</p> </li> <li> <p> <a>ListBranches</a>, which lists all branches for a specified repository.</p> </li> <li> <p> <a>UpdateDefaultBranch</a>, which changes the default branch for a repository.</p> </li> </ul> <p>Files, by calling the following:</p> <ul> <li> <p> <a>DeleteFile</a>, which deletes the content of a specified file from a specified branch.</p> </li> <li> <p> <a>GetBlob</a>, which returns the base-64 encoded content of an individual Git blob object in a repository.</p> </li> <li> <p> <a>GetFile</a>, which returns the base-64 encoded content of a specified file.</p> </li> <li> <p> <a>GetFolder</a>, which returns the contents of a specified folder or directory.</p> </li> <li> <p> <a>PutFile</a>, which adds or modifies a single file in a specified repository and branch.</p> </li> </ul> <p>Commits, by calling the following:</p> <ul> <li> <p> <a>BatchGetCommits</a>, which returns information about one or more commits in a repository.</p> </li> <li> <p> <a>CreateCommit</a>, which creates a commit for changes to a repository.</p> </li> <li> <p> <a>GetCommit</a>, which returns information about a commit, including commit messages and author and committer information.</p> </li> <li> <p> <a>GetDifferences</a>, which returns information about the differences in a valid commit specifier (such as a branch, tag, HEAD, commit ID, or other fully qualified reference).</p> </li> </ul> <p>Merges, by calling the following:</p> <ul> <li> <p> <a>BatchDescribeMergeConflicts</a>, which returns information about conflicts in a merge between commits in a repository.</p> </li> <li> <p> <a>CreateUnreferencedMergeCommit</a>, which creates an unreferenced commit between two branches or commits for the purpose of comparing them and identifying any potential conflicts.</p> </li> <li> <p> <a>DescribeMergeConflicts</a>, which returns information about merge conflicts between the base, source, and destination versions of a file in a potential merge.</p> </li> <li> <p> <a>GetMergeCommit</a>, which returns information about the merge between a source and destination commit. </p> </li> <li> <p> <a>GetMergeConflicts</a>, which returns information about merge conflicts between the source and destination branch in a pull request.</p> </li> <li> <p> <a>GetMergeOptions</a>, which returns information about the available merge options between two branches or commit specifiers.</p> </li> <li> <p> <a>MergeBranchesByFastForward</a>, which merges two branches using the fast-forward merge option.</p> </li> <li> <p> <a>MergeBranchesBySquash</a>, which merges two branches using the squash merge option.</p> </li> <li> <p> <a>MergeBranchesByThreeWay</a>, which merges two branches using the three-way merge option.</p> </li> </ul> <p>Pull requests, by calling the following:</p> <ul> <li> <p> <a>CreatePullRequest</a>, which creates a pull request in a specified repository.</p> </li> <li> <p> <a>CreatePullRequestApprovalRule</a>, which creates an approval rule for a specified pull request.</p> </li> <li> <p> <a>DeletePullRequestApprovalRule</a>, which deletes an approval rule for a specified pull request.</p> </li> <li> <p> <a>DescribePullRequestEvents</a>, which returns information about one or more pull request events.</p> </li> <li> <p> <a>EvaluatePullRequestApprovalRules</a>, which evaluates whether a pull request has met all the conditions specified in its associated approval rules.</p> </li> <li> <p> <a>GetCommentsForPullRequest</a>, which returns information about comments on a specified pull request.</p> </li> <li> <p> <a>GetPullRequest</a>, which returns information about a specified pull request.</p> </li> <li> <p> <a>GetPullRequestApprovalStates</a>, which returns information about the approval states for a specified pull request.</p> </li> <li> <p> <a>GetPullRequestOverrideState</a>, which returns information about whether approval rules have been set aside (overriden) for a pull request, and if so, the Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request.</p> </li> <li> <p> <a>ListPullRequests</a>, which lists all pull requests for a repository.</p> </li> <li> <p> <a>MergePullRequestByFastForward</a>, which merges the source destination branch of a pull request into the specified destination branch for that pull request using the fast-forward merge option.</p> </li> <li> <p> <a>MergePullRequestBySquash</a>, which merges the source destination branch of a pull request into the specified destination branch for that pull request using the squash merge option.</p> </li> <li> <p> <a>MergePullRequestByThreeWay</a>. which merges the source destination branch of a pull request into the specified destination branch for that pull request using the three-way merge option.</p> </li> <li> <p> <a>OverridePullRequestApprovalRules</a>, which sets aside all approval rule requirements for a pull request.</p> </li> <li> <p> <a>PostCommentForPullRequest</a>, which posts a comment to a pull request at the specified line, file, or request.</p> </li> <li> <p> <a>UpdatePullRequestApprovalRuleContent</a>, which updates the structure of an approval rule for a pull request.</p> </li> <li> <p> <a>UpdatePullRequestApprovalState</a>, which updates the state of an approval on a pull request.</p> </li> <li> <p> <a>UpdatePullRequestDescription</a>, which updates the description of a pull request.</p> </li> <li> <p> <a>UpdatePullRequestStatus</a>, which updates the status of a pull request.</p> </li> <li> <p> <a>UpdatePullRequestTitle</a>, which updates the title of a pull request.</p> </li> </ul> <p>Approval rule templates, by calling the following:</p> <ul> <li> <p> <a>AssociateApprovalRuleTemplateWithRepository</a>, which associates a template with a specified repository. After the template is associated with a repository, AWS CodeCommit creates approval rules that match the template conditions on every pull request created in the specified repository.</p> </li> <li> <p> <a>BatchAssociateApprovalRuleTemplateWithRepositories</a>, which associates a template with one or more specified repositories. After the template is associated with a repository, AWS CodeCommit creates approval rules that match the template conditions on every pull request created in the specified repositories.</p> </li> <li> <p> <a>BatchDisassociateApprovalRuleTemplateFromRepositories</a>, which removes the association between a template and specified repositories so that approval rules based on the template are not automatically created when pull requests are created in those repositories.</p> </li> <li> <p> <a>CreateApprovalRuleTemplate</a>, which creates a template for approval rules that can then be associated with one or more repositories in your AWS account.</p> </li> <li> <p> <a>DeleteApprovalRuleTemplate</a>, which deletes the specified template. It does not remove approval rules on pull requests already created with the template.</p> </li> <li> <p> <a>DisassociateApprovalRuleTemplateFromRepository</a>, which removes the association between a template and a repository so that approval rules based on the template are not automatically created when pull requests are created in the specified repository.</p> </li> <li> <p> <a>GetApprovalRuleTemplate</a>, which returns information about an approval rule template.</p> </li> <li> <p> <a>ListApprovalRuleTemplates</a>, which lists all approval rule templates in the AWS Region in your AWS account.</p> </li> <li> <p> <a>ListAssociatedApprovalRuleTemplatesForRepository</a>, which lists all approval rule templates that are associated with a specified repository.</p> </li> <li> <p> <a>ListRepositoriesForApprovalRuleTemplate</a>, which lists all repositories associated with the specified approval rule template.</p> </li> <li> <p> <a>UpdateApprovalRuleTemplateDescription</a>, which updates the description of an approval rule template.</p> </li> <li> <p> <a>UpdateApprovalRuleTemplateName</a>, which updates the name of an approval rule template.</p> </li> <li> <p> <a>UpdateApprovalRuleTemplateContent</a>, which updates the content of an approval rule template.</p> </li> </ul> <p>Comments in a repository, by calling the following:</p> <ul> <li> <p> <a>DeleteCommentContent</a>, which deletes the content of a comment on a commit in a repository.</p> </li> <li> <p> <a>GetComment</a>, which returns information about a comment on a commit.</p> </li> <li> <p> <a>GetCommentsForComparedCommit</a>, which returns information about comments on the comparison between two commit specifiers in a repository.</p> </li> <li> <p> <a>PostCommentForComparedCommit</a>, which creates a comment on the comparison between two commit specifiers in a repository.</p> </li> <li> <p> <a>PostCommentReply</a>, which creates a reply to a comment.</p> </li> <li> <p> <a>UpdateComment</a>, which updates the content of a comment on a commit in a repository.</p> </li> </ul> <p>Tags used to tag resources in AWS CodeCommit (not Git tags), by calling the following:</p> <ul> <li> <p> <a>ListTagsForResource</a>, which gets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS CodeCommit.</p> </li> <li> <p> <a>TagResource</a>, which adds or updates tags for a resource in AWS CodeCommit.</p> </li> <li> <p> <a>UntagResource</a>, which removes tags for a resource in AWS CodeCommit.</p> </li> </ul> <p>Triggers, by calling the following:</p> <ul> <li> <p> <a>GetRepositoryTriggers</a>, which returns information about triggers configured for a repository.</p> </li> <li> <p> <a>PutRepositoryTriggers</a>, which replaces all triggers for a repository and can be used to create or delete triggers.</p> </li> <li> <p> <a>TestRepositoryTriggers</a>, which tests the functionality of a repository trigger by sending data to the trigger target.</p> </li> </ul> <p>For information about how to use AWS CodeCommit, see the <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html">AWS CodeCommit User Guide</a>.</p>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: codecommit
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/codecommit-2015-04-13.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/codecommit/'
host: codecommit.amazonaws.com
basePath: /
schemes:
  - https
  - http
x-servers:
  - url: 'http://codecommit.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The CodeCommit multi-region endpoint
  - url: 'https://codecommit.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The CodeCommit multi-region endpoint
  - url: 'http://codecommit.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CodeCommit endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://codecommit.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The CodeCommit endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
consumes:
  - application/json
produces:
  - application/json
parameters:
  X-Amz-Content-Sha256:
    name: X-Amz-Content-Sha256
    in: header
    type: string
    required: false
  X-Amz-Date:
    name: X-Amz-Date
    in: header
    type: string
    required: false
  X-Amz-Algorithm:
    name: X-Amz-Algorithm
    in: header
    type: string
    required: false
  X-Amz-Credential:
    name: X-Amz-Credential
    in: header
    type: string
    required: false
  X-Amz-Security-Token:
    name: X-Amz-Security-Token
    in: header
    type: string
    required: false
  X-Amz-Signature:
    name: X-Amz-Signature
    in: header
    type: string
    required: false
  X-Amz-SignedHeaders:
    name: X-Amz-SignedHeaders
    in: header
    type: string
    required: false
securityDefinitions:
  hmac:
    type: apiKey
    name: Authorization
    in: header
    description: Amazon Signature authorization v4
    x-amazon-apigateway-authtype: awsSigv4
security:
  - hmac: []
paths:
  '/#X-Amz-Target=CodeCommit_20150413.AssociateApprovalRuleTemplateWithRepository':
    post:
      operationId: AssociateApprovalRuleTemplateWithRepository
      description: 'Creates an association between an approval rule template and a specified repository. Then, the next time a pull request is created in the repository where the destination reference (if specified) matches the destination reference (branch) for the pull request, an approval rule that matches the template conditions is automatically created for that pull request. If no destination references are specified in the template, an approval rule that matches the template contents is created for all pull requests in that repository.'
      responses:
        '200':
          description: Success
        '480':
          description: ApprovalRuleTemplateNameRequiredException
          schema:
            $ref: '#/definitions/ApprovalRuleTemplateNameRequiredException'
        '481':
          description: InvalidApprovalRuleTemplateNameException
          schema:
            $ref: '#/definitions/InvalidApprovalRuleTemplateNameException'
        '482':
          description: ApprovalRuleTemplateDoesNotExistException
          schema:
            $ref: '#/definitions/ApprovalRuleTemplateDoesNotExistException'
        '483':
          description: MaximumRuleTemplatesAssociatedWithRepositoryException
          schema:
            $ref: '#/definitions/MaximumRuleTemplatesAssociatedWithRepositoryException'
        '484':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '485':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '486':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '487':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '488':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '489':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '490':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '491':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/AssociateApprovalRuleTemplateWithRepositoryInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.AssociateApprovalRuleTemplateWithRepository
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.BatchAssociateApprovalRuleTemplateWithRepositories':
    post:
      operationId: BatchAssociateApprovalRuleTemplateWithRepositories
      description: 'Creates an association between an approval rule template and one or more specified repositories. '
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BatchAssociateApprovalRuleTemplateWithRepositoriesOutput'
        '480':
          description: ApprovalRuleTemplateNameRequiredException
          schema:
            $ref: '#/definitions/ApprovalRuleTemplateNameRequiredException'
        '481':
          description: InvalidApprovalRuleTemplateNameException
          schema:
            $ref: '#/definitions/InvalidApprovalRuleTemplateNameException'
        '482':
          description: ApprovalRuleTemplateDoesNotExistException
          schema:
            $ref: '#/definitions/ApprovalRuleTemplateDoesNotExistException'
        '483':
          description: RepositoryNamesRequiredException
          schema:
            $ref: '#/definitions/RepositoryNamesRequiredException'
        '484':
          description: MaximumRepositoryNamesExceededException
          schema:
            $ref: '#/definitions/MaximumRepositoryNamesExceededException'
        '485':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '486':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '487':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '488':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '489':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/BatchAssociateApprovalRuleTemplateWithRepositoriesInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.BatchAssociateApprovalRuleTemplateWithRepositories
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.BatchDescribeMergeConflicts':
    post:
      operationId: BatchDescribeMergeConflicts
      description: Returns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BatchDescribeMergeConflictsOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: MergeOptionRequiredException
          schema:
            $ref: '#/definitions/MergeOptionRequiredException'
        '484':
          description: InvalidMergeOptionException
          schema:
            $ref: '#/definitions/InvalidMergeOptionException'
        '485':
          description: InvalidContinuationTokenException
          schema:
            $ref: '#/definitions/InvalidContinuationTokenException'
        '486':
          description: CommitRequiredException
          schema:
            $ref: '#/definitions/CommitRequiredException'
        '487':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '488':
          description: InvalidCommitException
          schema:
            $ref: '#/definitions/InvalidCommitException'
        '489':
          description: TipsDivergenceExceededException
          schema:
            $ref: '#/definitions/TipsDivergenceExceededException'
        '490':
          description: InvalidMaxConflictFilesException
          schema:
            $ref: '#/definitions/InvalidMaxConflictFilesException'
        '491':
          description: InvalidMaxMergeHunksException
          schema:
            $ref: '#/definitions/InvalidMaxMergeHunksException'
        '492':
          description: InvalidConflictDetailLevelException
          schema:
            $ref: '#/definitions/InvalidConflictDetailLevelException'
        '493':
          description: InvalidConflictResolutionStrategyException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionStrategyException'
        '494':
          description: MaximumFileContentToLoadExceededException
          schema:
            $ref: '#/definitions/MaximumFileContentToLoadExceededException'
        '495':
          description: MaximumItemsToCompareExceededException
          schema:
            $ref: '#/definitions/MaximumItemsToCompareExceededException'
        '496':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '497':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '498':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '499':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '500':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/BatchDescribeMergeConflictsInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.BatchDescribeMergeConflicts
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.BatchDisassociateApprovalRuleTemplateFromRepositories':
    post:
      operationId: BatchDisassociateApprovalRuleTemplateFromRepositories
      description: 'Removes the association between an approval rule template and one or more specified repositories. '
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput'
        '480':
          description: ApprovalRuleTemplateNameRequiredException
          schema:
            $ref: '#/definitions/ApprovalRuleTemplateNameRequiredException'
        '481':
          description: InvalidApprovalRuleTemplateNameException
          schema:
            $ref: '#/definitions/InvalidApprovalRuleTemplateNameException'
        '482':
          description: ApprovalRuleTemplateDoesNotExistException
          schema:
            $ref: '#/definitions/ApprovalRuleTemplateDoesNotExistException'
        '483':
          description: RepositoryNamesRequiredException
          schema:
            $ref: '#/definitions/RepositoryNamesRequiredException'
        '484':
          description: MaximumRepositoryNamesExceededException
          schema:
            $ref: '#/definitions/MaximumRepositoryNamesExceededException'
        '485':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '486':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '487':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '488':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '489':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/BatchDisassociateApprovalRuleTemplateFromRepositoriesInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.BatchDisassociateApprovalRuleTemplateFromRepositories
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.BatchGetCommits':
    post:
      operationId: BatchGetCommits
      description: Returns information about the contents of one or more commits in a repository.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BatchGetCommitsOutput'
        '480':
          description: CommitIdsListRequiredException
          schema:
            $ref: '#/definitions/CommitIdsListRequiredException'
        '481':
          description: CommitIdsLimitExceededException
          schema:
            $ref: '#/definitions/CommitIdsLimitExceededException'
        '482':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '483':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '484':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '485':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '486':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '487':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '488':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '489':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/BatchGetCommitsInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.BatchGetCommits
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.BatchGetRepositories':
    post:
      operationId: BatchGetRepositories
      description: <p>Returns information about one or more repositories.</p> <note> <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.</p> </note>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BatchGetRepositoriesOutput'
        '480':
          description: RepositoryNamesRequiredException
          schema:
            $ref: '#/definitions/RepositoryNamesRequiredException'
        '481':
          description: MaximumRepositoryNamesExceededException
          schema:
            $ref: '#/definitions/MaximumRepositoryNamesExceededException'
        '482':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '483':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '484':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '485':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '486':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '487':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/BatchGetRepositoriesInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.BatchGetRepositories
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.CreateApprovalRuleTemplate':
    post:
      operationId: CreateApprovalRuleTemplate
      description: 'Creates a template for approval rules that can then be associated with one or more repositories in your AWS account. When you associate a template with a repository, AWS CodeCommit creates an approval rule that matches the conditions of the template for all pull requests that meet the conditions of the template. For more information, see <a>AssociateApprovalRuleTemplateWithRepository</a>.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateApprovalRuleTemplateOutput'
        '480':
          description: ApprovalRuleTemplateNameRequiredException
          schema:
            $ref: '#/definitions/ApprovalRuleTemplateNameRequiredException'
        '481':
          description: InvalidApprovalRuleTemplateNameException
          schema:
            $ref: '#/definitions/InvalidApprovalRuleTemplateNameException'
        '482':
          description: ApprovalRuleTemplateNameAlreadyExistsException
          schema:
            $ref: '#/definitions/ApprovalRuleTemplateNameAlreadyExistsException'
        '483':
          description: ApprovalRuleTemplateContentRequiredException
          schema:
            $ref: '#/definitions/ApprovalRuleTemplateContentRequiredException'
        '484':
          description: InvalidApprovalRuleTemplateContentException
          schema:
            $ref: '#/definitions/InvalidApprovalRuleTemplateContentException'
        '485':
          description: InvalidApprovalRuleTemplateDescriptionException
          schema:
            $ref: '#/definitions/InvalidApprovalRuleTemplateDescriptionException'
        '486':
          description: NumberOfRuleTemplatesExceededException
          schema:
            $ref: '#/definitions/NumberOfRuleTemplatesExceededException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateApprovalRuleTemplateInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.CreateApprovalRuleTemplate
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.CreateBranch':
    post:
      operationId: CreateBranch
      description: '<p>Creates a branch in a repository and points the branch to a commit.</p> <note> <p>Calling the create branch operation does not set a repository''s default branch. To do this, call the update default branch operation.</p> </note>'
      responses:
        '200':
          description: Success
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: BranchNameRequiredException
          schema:
            $ref: '#/definitions/BranchNameRequiredException'
        '484':
          description: BranchNameExistsException
          schema:
            $ref: '#/definitions/BranchNameExistsException'
        '485':
          description: InvalidBranchNameException
          schema:
            $ref: '#/definitions/InvalidBranchNameException'
        '486':
          description: CommitIdRequiredException
          schema:
            $ref: '#/definitions/CommitIdRequiredException'
        '487':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '488':
          description: InvalidCommitIdException
          schema:
            $ref: '#/definitions/InvalidCommitIdException'
        '489':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '490':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '491':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '492':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '493':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateBranchInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.CreateBranch
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.CreateCommit':
    post:
      operationId: CreateCommit
      description: Creates a commit for a repository on the tip of a specified branch.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateCommitOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: ParentCommitIdRequiredException
          schema:
            $ref: '#/definitions/ParentCommitIdRequiredException'
        '484':
          description: InvalidParentCommitIdException
          schema:
            $ref: '#/definitions/InvalidParentCommitIdException'
        '485':
          description: ParentCommitDoesNotExistException
          schema:
            $ref: '#/definitions/ParentCommitDoesNotExistException'
        '486':
          description: ParentCommitIdOutdatedException
          schema:
            $ref: '#/definitions/ParentCommitIdOutdatedException'
        '487':
          description: BranchNameRequiredException
          schema:
            $ref: '#/definitions/BranchNameRequiredException'
        '488':
          description: InvalidBranchNameException
          schema:
            $ref: '#/definitions/InvalidBranchNameException'
        '489':
          description: BranchDoesNotExistException
          schema:
            $ref: '#/definitions/BranchDoesNotExistException'
        '490':
          description: BranchNameIsTagNameException
          schema:
            $ref: '#/definitions/BranchNameIsTagNameException'
        '491':
          description: FileEntryRequiredException
          schema:
            $ref: '#/definitions/FileEntryRequiredException'
        '492':
          description: MaximumFileEntriesExceededException
          schema:
            $ref: '#/definitions/MaximumFileEntriesExceededException'
        '493':
          description: PutFileEntryConflictException
          schema:
            $ref: '#/definitions/PutFileEntryConflictException'
        '494':
          description: SourceFileOrContentRequiredException
          schema:
            $ref: '#/definitions/SourceFileOrContentRequiredException'
        '495':
          description: FileContentAndSourceFileSpecifiedException
          schema:
            $ref: '#/definitions/FileContentAndSourceFileSpecifiedException'
        '496':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '497':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '498':
          description: SamePathRequestException
          schema:
            $ref: '#/definitions/SamePathRequestException'
        '499':
          description: FileDoesNotExistException
          schema:
            $ref: '#/definitions/FileDoesNotExistException'
        '500':
          description: FileContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FileContentSizeLimitExceededException'
        '501':
          description: FolderContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FolderContentSizeLimitExceededException'
        '502':
          description: InvalidDeletionParameterException
          schema:
            $ref: '#/definitions/InvalidDeletionParameterException'
        '503':
          description: RestrictedSourceFileException
          schema:
            $ref: '#/definitions/RestrictedSourceFileException'
        '504':
          description: FileModeRequiredException
          schema:
            $ref: '#/definitions/FileModeRequiredException'
        '505':
          description: InvalidFileModeException
          schema:
            $ref: '#/definitions/InvalidFileModeException'
        '506':
          description: NameLengthExceededException
          schema:
            $ref: '#/definitions/NameLengthExceededException'
        '507':
          description: InvalidEmailException
          schema:
            $ref: '#/definitions/InvalidEmailException'
        '508':
          description: CommitMessageLengthExceededException
          schema:
            $ref: '#/definitions/CommitMessageLengthExceededException'
        '509':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '510':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '511':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '512':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '513':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
        '514':
          description: NoChangeException
          schema:
            $ref: '#/definitions/NoChangeException'
        '515':
          description: FileNameConflictsWithDirectoryNameException
          schema:
            $ref: '#/definitions/FileNameConflictsWithDirectoryNameException'
        '516':
          description: DirectoryNameConflictsWithFileNameException
          schema:
            $ref: '#/definitions/DirectoryNameConflictsWithFileNameException'
        '517':
          description: FilePathConflictsWithSubmodulePathException
          schema:
            $ref: '#/definitions/FilePathConflictsWithSubmodulePathException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateCommitInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.CreateCommit
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.CreatePullRequest':
    post:
      operationId: CreatePullRequest
      description: Creates a pull request in the specified repository.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreatePullRequestOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '484':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '485':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '486':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '487':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
        '488':
          description: ClientRequestTokenRequiredException
          schema:
            $ref: '#/definitions/ClientRequestTokenRequiredException'
        '489':
          description: InvalidClientRequestTokenException
          schema:
            $ref: '#/definitions/InvalidClientRequestTokenException'
        '490':
          description: IdempotencyParameterMismatchException
          schema:
            $ref: '#/definitions/IdempotencyParameterMismatchException'
        '491':
          description: ReferenceNameRequiredException
          schema:
            $ref: '#/definitions/ReferenceNameRequiredException'
        '492':
          description: InvalidReferenceNameException
          schema:
            $ref: '#/definitions/InvalidReferenceNameException'
        '493':
          description: ReferenceDoesNotExistException
          schema:
            $ref: '#/definitions/ReferenceDoesNotExistException'
        '494':
          description: ReferenceTypeNotSupportedException
          schema:
            $ref: '#/definitions/ReferenceTypeNotSupportedException'
        '495':
          description: TitleRequiredException
          schema:
            $ref: '#/definitions/TitleRequiredException'
        '496':
          description: InvalidTitleException
          schema:
            $ref: '#/definitions/InvalidTitleException'
        '497':
          description: InvalidDescriptionException
          schema:
            $ref: '#/definitions/InvalidDescriptionException'
        '498':
          description: TargetsRequiredException
          schema:
            $ref: '#/definitions/TargetsRequiredException'
        '499':
          description: InvalidTargetsException
          schema:
            $ref: '#/definitions/InvalidTargetsException'
        '500':
          description: TargetRequiredException
          schema:
            $ref: '#/definitions/TargetRequiredException'
        '501':
          description: InvalidTargetException
          schema:
            $ref: '#/definitions/InvalidTargetException'
        '502':
          description: MultipleRepositoriesInPullRequestException
          schema:
            $ref: '#/definitions/MultipleRepositoriesInPullRequestException'
        '503':
          description: MaximumOpenPullRequestsExceededException
          schema:
            $ref: '#/definitions/MaximumOpenPullRequestsExceededException'
        '504':
          description: SourceAndDestinationAreSameException
          schema:
            $ref: '#/definitions/SourceAndDestinationAreSameException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreatePullRequestInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.CreatePullRequest
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.CreatePullRequestApprovalRule':
    post:
      operationId: CreatePullRequestApprovalRule
      description: Creates an approval rule for a pull request.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreatePullRequestApprovalRuleOutput'
        '480':
          description: ApprovalRuleNameRequiredException
          schema:
            $ref: '#/definitions/ApprovalRuleNameRequiredException'
        '481':
          description: InvalidApprovalRuleNameException
          schema:
            $ref: '#/definitions/InvalidApprovalRuleNameException'
        '482':
          description: ApprovalRuleNameAlreadyExistsException
          schema:
            $ref: '#/definitions/ApprovalRuleNameAlreadyExistsException'
        '483':
          description: ApprovalRuleContentRequiredException
          schema:
            $ref: '#/definitions/ApprovalRuleContentRequiredException'
        '484':
          description: InvalidApprovalRuleContentException
          schema:
            $ref: '#/definitions/InvalidApprovalRuleContentException'
        '485':
          description: NumberOfRulesExceededException
          schema:
            $ref: '#/definitions/NumberOfRulesExceededException'
        '486':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '487':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '488':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '489':
          description: PullRequestAlreadyClosedException
          schema:
            $ref: '#/definitions/PullRequestAlreadyClosedException'
        '490':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '491':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '492':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '493':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '494':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreatePullRequestApprovalRuleInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.CreatePullRequestApprovalRule
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.CreateRepository':
    post:
      operationId: CreateRepository
      description: 'Creates a new, empty repository.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateRepositoryOutput'
        '480':
          description: RepositoryNameExistsException
          schema:
            $ref: '#/definitions/RepositoryNameExistsException'
        '481':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '482':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '483':
          description: InvalidRepositoryDescriptionException
          schema:
            $ref: '#/definitions/InvalidRepositoryDescriptionException'
        '484':
          description: RepositoryLimitExceededException
          schema:
            $ref: '#/definitions/RepositoryLimitExceededException'
        '485':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '486':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '487':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '488':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '489':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
        '490':
          description: InvalidTagsMapException
          schema:
            $ref: '#/definitions/InvalidTagsMapException'
        '491':
          description: TooManyTagsException
          schema:
            $ref: '#/definitions/TooManyTagsException'
        '492':
          description: InvalidSystemTagUsageException
          schema:
            $ref: '#/definitions/InvalidSystemTagUsageException'
        '493':
          description: TagPolicyException
          schema:
            $ref: '#/definitions/TagPolicyException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateRepositoryInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.CreateRepository
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.CreateUnreferencedMergeCommit':
    post:
      operationId: CreateUnreferencedMergeCommit
      description: '<p>Creates an unreferenced commit that represents the result of merging two branches using a specified merge strategy. This can help you determine the outcome of a potential merge. This API cannot be used with the fast-forward merge strategy because that strategy does not create a merge commit.</p> <note> <p>This unreferenced merge commit can only be accessed using the GetCommit API or through git commands such as git fetch. To retrieve this commit, you must specify its commit ID or otherwise reference it.</p> </note>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateUnreferencedMergeCommitOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: TipsDivergenceExceededException
          schema:
            $ref: '#/definitions/TipsDivergenceExceededException'
        '484':
          description: CommitRequiredException
          schema:
            $ref: '#/definitions/CommitRequiredException'
        '485':
          description: InvalidCommitException
          schema:
            $ref: '#/definitions/InvalidCommitException'
        '486':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '487':
          description: MergeOptionRequiredException
          schema:
            $ref: '#/definitions/MergeOptionRequiredException'
        '488':
          description: InvalidMergeOptionException
          schema:
            $ref: '#/definitions/InvalidMergeOptionException'
        '489':
          description: InvalidConflictDetailLevelException
          schema:
            $ref: '#/definitions/InvalidConflictDetailLevelException'
        '490':
          description: InvalidConflictResolutionStrategyException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionStrategyException'
        '491':
          description: InvalidConflictResolutionException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionException'
        '492':
          description: ManualMergeRequiredException
          schema:
            $ref: '#/definitions/ManualMergeRequiredException'
        '493':
          description: MaximumConflictResolutionEntriesExceededException
          schema:
            $ref: '#/definitions/MaximumConflictResolutionEntriesExceededException'
        '494':
          description: MultipleConflictResolutionEntriesException
          schema:
            $ref: '#/definitions/MultipleConflictResolutionEntriesException'
        '495':
          description: ReplacementTypeRequiredException
          schema:
            $ref: '#/definitions/ReplacementTypeRequiredException'
        '496':
          description: InvalidReplacementTypeException
          schema:
            $ref: '#/definitions/InvalidReplacementTypeException'
        '497':
          description: ReplacementContentRequiredException
          schema:
            $ref: '#/definitions/ReplacementContentRequiredException'
        '498':
          description: InvalidReplacementContentException
          schema:
            $ref: '#/definitions/InvalidReplacementContentException'
        '499':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '500':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '501':
          description: FileContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FileContentSizeLimitExceededException'
        '502':
          description: FolderContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FolderContentSizeLimitExceededException'
        '503':
          description: MaximumFileContentToLoadExceededException
          schema:
            $ref: '#/definitions/MaximumFileContentToLoadExceededException'
        '504':
          description: MaximumItemsToCompareExceededException
          schema:
            $ref: '#/definitions/MaximumItemsToCompareExceededException'
        '505':
          description: ConcurrentReferenceUpdateException
          schema:
            $ref: '#/definitions/ConcurrentReferenceUpdateException'
        '506':
          description: FileModeRequiredException
          schema:
            $ref: '#/definitions/FileModeRequiredException'
        '507':
          description: InvalidFileModeException
          schema:
            $ref: '#/definitions/InvalidFileModeException'
        '508':
          description: NameLengthExceededException
          schema:
            $ref: '#/definitions/NameLengthExceededException'
        '509':
          description: InvalidEmailException
          schema:
            $ref: '#/definitions/InvalidEmailException'
        '510':
          description: CommitMessageLengthExceededException
          schema:
            $ref: '#/definitions/CommitMessageLengthExceededException'
        '511':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '512':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '513':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '514':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '515':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateUnreferencedMergeCommitInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.CreateUnreferencedMergeCommit
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.DeleteApprovalRuleTemplate':
    post:
      operationId: DeleteApprovalRuleTemplate
      description: Deletes a specified approval rule template. Deleting a template does not remove approval rules on pull requests already created with the template.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteApprovalRuleTemplateOutput'
        '480':
          description: ApprovalRuleTemplateNameRequiredException
          schema:
            $ref: '#/definitions/ApprovalRuleTemplateNameRequiredException'
        '481':
          description: InvalidApprovalRuleTemplateNameException
          schema:
            $ref: '#/definitions/InvalidApprovalRuleTemplateNameException'
        '482':
          description: ApprovalRuleTemplateInUseException
          schema:
            $ref: '#/definitions/ApprovalRuleTemplateInUseException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteApprovalRuleTemplateInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.DeleteApprovalRuleTemplate
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.DeleteBranch':
    post:
      operationId: DeleteBranch
      description: 'Deletes a branch from a repository, unless that branch is the default branch for the repository. '
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteBranchOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '483':
          description: BranchNameRequiredException
          schema:
            $ref: '#/definitions/BranchNameRequiredException'
        '484':
          description: InvalidBranchNameException
          schema:
            $ref: '#/definitions/InvalidBranchNameException'
        '485':
          description: DefaultBranchCannotBeDeletedException
          schema:
            $ref: '#/definitions/DefaultBranchCannotBeDeletedException'
        '486':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '487':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '488':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '489':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '490':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteBranchInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.DeleteBranch
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.DeleteCommentContent':
    post:
      operationId: DeleteCommentContent
      description: 'Deletes the content of a comment made on a change, file, or commit in a repository.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteCommentContentOutput'
        '480':
          description: CommentDoesNotExistException
          schema:
            $ref: '#/definitions/CommentDoesNotExistException'
        '481':
          description: CommentIdRequiredException
          schema:
            $ref: '#/definitions/CommentIdRequiredException'
        '482':
          description: InvalidCommentIdException
          schema:
            $ref: '#/definitions/InvalidCommentIdException'
        '483':
          description: CommentDeletedException
          schema:
            $ref: '#/definitions/CommentDeletedException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteCommentContentInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.DeleteCommentContent
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.DeleteFile':
    post:
      operationId: DeleteFile
      description: Deletes a specified file from a specified branch. A commit is created on the branch that contains the revision. The file still exists in the commits earlier to the commit that contains the deletion.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteFileOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: ParentCommitIdRequiredException
          schema:
            $ref: '#/definitions/ParentCommitIdRequiredException'
        '484':
          description: InvalidParentCommitIdException
          schema:
            $ref: '#/definitions/InvalidParentCommitIdException'
        '485':
          description: ParentCommitDoesNotExistException
          schema:
            $ref: '#/definitions/ParentCommitDoesNotExistException'
        '486':
          description: ParentCommitIdOutdatedException
          schema:
            $ref: '#/definitions/ParentCommitIdOutdatedException'
        '487':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '488':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '489':
          description: FileDoesNotExistException
          schema:
            $ref: '#/definitions/FileDoesNotExistException'
        '490':
          description: BranchNameRequiredException
          schema:
            $ref: '#/definitions/BranchNameRequiredException'
        '491':
          description: InvalidBranchNameException
          schema:
            $ref: '#/definitions/InvalidBranchNameException'
        '492':
          description: BranchDoesNotExistException
          schema:
            $ref: '#/definitions/BranchDoesNotExistException'
        '493':
          description: BranchNameIsTagNameException
          schema:
            $ref: '#/definitions/BranchNameIsTagNameException'
        '494':
          description: NameLengthExceededException
          schema:
            $ref: '#/definitions/NameLengthExceededException'
        '495':
          description: InvalidEmailException
          schema:
            $ref: '#/definitions/InvalidEmailException'
        '496':
          description: CommitMessageLengthExceededException
          schema:
            $ref: '#/definitions/CommitMessageLengthExceededException'
        '497':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '498':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '499':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '500':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '501':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteFileInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.DeleteFile
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.DeletePullRequestApprovalRule':
    post:
      operationId: DeletePullRequestApprovalRule
      description: 'Deletes an approval rule from a specified pull request. Approval rules can be deleted from a pull request only if the pull request is open, and if the approval rule was created specifically for a pull request and not generated from an approval rule template associated with the repository where the pull request was created. You cannot delete an approval rule from a merged or closed pull request.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeletePullRequestApprovalRuleOutput'
        '480':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '483':
          description: PullRequestAlreadyClosedException
          schema:
            $ref: '#/definitions/PullRequestAlreadyClosedException'
        '484':
          description: ApprovalRuleNameRequiredException
          schema:
            $ref: '#/definitions/ApprovalRuleNameRequiredException'
        '485':
          description: InvalidApprovalRuleNameException
          schema:
            $ref: '#/definitions/InvalidApprovalRuleNameException'
        '486':
          description: CannotDeleteApprovalRuleFromTemplateException
          schema:
            $ref: '#/definitions/CannotDeleteApprovalRuleFromTemplateException'
        '487':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '488':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '489':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '490':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '491':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeletePullRequestApprovalRuleInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.DeletePullRequestApprovalRule
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.DeleteRepository':
    post:
      operationId: DeleteRepository
      description: '<p>Deletes a repository. If a specified repository was already deleted, a null repository ID is returned.</p> <important> <p>Deleting a repository also deletes all associated objects and metadata. After a repository is deleted, all future push calls to the deleted repository fail.</p> </important>'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteRepositoryOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '483':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '484':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '485':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '486':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteRepositoryInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.DeleteRepository
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.DescribeMergeConflicts':
    post:
      operationId: DescribeMergeConflicts
      description: 'Returns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy. If the merge option for the attempted merge is specified as FAST_FORWARD_MERGE, an exception is thrown.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeMergeConflictsOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: MergeOptionRequiredException
          schema:
            $ref: '#/definitions/MergeOptionRequiredException'
        '484':
          description: InvalidMergeOptionException
          schema:
            $ref: '#/definitions/InvalidMergeOptionException'
        '485':
          description: InvalidContinuationTokenException
          schema:
            $ref: '#/definitions/InvalidContinuationTokenException'
        '486':
          description: CommitRequiredException
          schema:
            $ref: '#/definitions/CommitRequiredException'
        '487':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '488':
          description: InvalidCommitException
          schema:
            $ref: '#/definitions/InvalidCommitException'
        '489':
          description: TipsDivergenceExceededException
          schema:
            $ref: '#/definitions/TipsDivergenceExceededException'
        '490':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '491':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '492':
          description: FileDoesNotExistException
          schema:
            $ref: '#/definitions/FileDoesNotExistException'
        '493':
          description: InvalidMaxMergeHunksException
          schema:
            $ref: '#/definitions/InvalidMaxMergeHunksException'
        '494':
          description: InvalidConflictDetailLevelException
          schema:
            $ref: '#/definitions/InvalidConflictDetailLevelException'
        '495':
          description: InvalidConflictResolutionStrategyException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionStrategyException'
        '496':
          description: MaximumFileContentToLoadExceededException
          schema:
            $ref: '#/definitions/MaximumFileContentToLoadExceededException'
        '497':
          description: MaximumItemsToCompareExceededException
          schema:
            $ref: '#/definitions/MaximumItemsToCompareExceededException'
        '498':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '499':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '500':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '501':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '502':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribeMergeConflictsInput'
        - name: maxMergeHunks
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: nextToken
          type: string
          in: query
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.DescribeMergeConflicts
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.DescribePullRequestEvents':
    post:
      operationId: DescribePullRequestEvents
      description: Returns information about one or more pull request events.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribePullRequestEventsOutput'
        '480':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '483':
          description: InvalidPullRequestEventTypeException
          schema:
            $ref: '#/definitions/InvalidPullRequestEventTypeException'
        '484':
          description: InvalidActorArnException
          schema:
            $ref: '#/definitions/InvalidActorArnException'
        '485':
          description: ActorDoesNotExistException
          schema:
            $ref: '#/definitions/ActorDoesNotExistException'
        '486':
          description: InvalidMaxResultsException
          schema:
            $ref: '#/definitions/InvalidMaxResultsException'
        '487':
          description: InvalidContinuationTokenException
          schema:
            $ref: '#/definitions/InvalidContinuationTokenException'
        '488':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '489':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '490':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '491':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '492':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DescribePullRequestEventsInput'
        - name: maxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: nextToken
          type: string
          in: query
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.DescribePullRequestEvents
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.DisassociateApprovalRuleTemplateFromRepository':
    post:
      operationId: DisassociateApprovalRuleTemplateFromRepository
      description: Removes the association between a template and a repository so that approval rules based on the template are not automatically created when pull requests are created in the specified repository. This does not delete any approval rules previously created for pull requests through the template association.
      responses:
        '200':
          description: Success
        '480':
          description: ApprovalRuleTemplateNameRequiredException
          schema:
            $ref: '#/definitions/ApprovalRuleTemplateNameRequiredException'
        '481':
          description: InvalidApprovalRuleTemplateNameException
          schema:
            $ref: '#/definitions/InvalidApprovalRuleTemplateNameException'
        '482':
          description: ApprovalRuleTemplateDoesNotExistException
          schema:
            $ref: '#/definitions/ApprovalRuleTemplateDoesNotExistException'
        '483':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '484':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '485':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '486':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '487':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '488':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '489':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '490':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DisassociateApprovalRuleTemplateFromRepositoryInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.DisassociateApprovalRuleTemplateFromRepository
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.EvaluatePullRequestApprovalRules':
    post:
      operationId: EvaluatePullRequestApprovalRules
      description: Evaluates whether a pull request has met all the conditions specified in its associated approval rules.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/EvaluatePullRequestApprovalRulesOutput'
        '480':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '483':
          description: InvalidRevisionIdException
          schema:
            $ref: '#/definitions/InvalidRevisionIdException'
        '484':
          description: RevisionIdRequiredException
          schema:
            $ref: '#/definitions/RevisionIdRequiredException'
        '485':
          description: RevisionNotCurrentException
          schema:
            $ref: '#/definitions/RevisionNotCurrentException'
        '486':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '487':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '488':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '489':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '490':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/EvaluatePullRequestApprovalRulesInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.EvaluatePullRequestApprovalRules
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.GetApprovalRuleTemplate':
    post:
      operationId: GetApprovalRuleTemplate
      description: Returns information about a specified approval rule template.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetApprovalRuleTemplateOutput'
        '480':
          description: ApprovalRuleTemplateNameRequiredException
          schema:
            $ref: '#/definitions/ApprovalRuleTemplateNameRequiredException'
        '481':
          description: InvalidApprovalRuleTemplateNameException
          schema:
            $ref: '#/definitions/InvalidApprovalRuleTemplateNameException'
        '482':
          description: ApprovalRuleTemplateDoesNotExistException
          schema:
            $ref: '#/definitions/ApprovalRuleTemplateDoesNotExistException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetApprovalRuleTemplateInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.GetApprovalRuleTemplate
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.GetBlob':
    post:
      operationId: GetBlob
      description: Returns the base-64 encoded content of an individual blob in a repository.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetBlobOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: BlobIdRequiredException
          schema:
            $ref: '#/definitions/BlobIdRequiredException'
        '484':
          description: InvalidBlobIdException
          schema:
            $ref: '#/definitions/InvalidBlobIdException'
        '485':
          description: BlobIdDoesNotExistException
          schema:
            $ref: '#/definitions/BlobIdDoesNotExistException'
        '486':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '487':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '488':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '489':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '490':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
        '491':
          description: FileTooLargeException
          schema:
            $ref: '#/definitions/FileTooLargeException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetBlobInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.GetBlob
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.GetBranch':
    post:
      operationId: GetBranch
      description: 'Returns information about a repository branch, including its name and the last commit ID.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetBranchOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '483':
          description: BranchNameRequiredException
          schema:
            $ref: '#/definitions/BranchNameRequiredException'
        '484':
          description: InvalidBranchNameException
          schema:
            $ref: '#/definitions/InvalidBranchNameException'
        '485':
          description: BranchDoesNotExistException
          schema:
            $ref: '#/definitions/BranchDoesNotExistException'
        '486':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '487':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '488':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '489':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '490':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetBranchInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.GetBranch
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.GetComment':
    post:
      operationId: GetComment
      description: 'Returns the content of a comment made on a change, file, or commit in a repository.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetCommentOutput'
        '480':
          description: CommentDoesNotExistException
          schema:
            $ref: '#/definitions/CommentDoesNotExistException'
        '481':
          description: CommentIdRequiredException
          schema:
            $ref: '#/definitions/CommentIdRequiredException'
        '482':
          description: InvalidCommentIdException
          schema:
            $ref: '#/definitions/InvalidCommentIdException'
        '483':
          description: CommentDeletedException
          schema:
            $ref: '#/definitions/CommentDeletedException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetCommentInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.GetComment
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.GetCommentsForComparedCommit':
    post:
      operationId: GetCommentsForComparedCommit
      description: Returns information about comments made on the comparison between two commits.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetCommentsForComparedCommitOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '483':
          description: CommitIdRequiredException
          schema:
            $ref: '#/definitions/CommitIdRequiredException'
        '484':
          description: InvalidCommitIdException
          schema:
            $ref: '#/definitions/InvalidCommitIdException'
        '485':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '486':
          description: InvalidMaxResultsException
          schema:
            $ref: '#/definitions/InvalidMaxResultsException'
        '487':
          description: InvalidContinuationTokenException
          schema:
            $ref: '#/definitions/InvalidContinuationTokenException'
        '488':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '489':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '490':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '491':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '492':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetCommentsForComparedCommitInput'
        - name: maxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: nextToken
          type: string
          in: query
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.GetCommentsForComparedCommit
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.GetCommentsForPullRequest':
    post:
      operationId: GetCommentsForPullRequest
      description: Returns comments made on a pull request.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetCommentsForPullRequestOutput'
        '480':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '481':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '482':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '483':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '484':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '485':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '486':
          description: CommitIdRequiredException
          schema:
            $ref: '#/definitions/CommitIdRequiredException'
        '487':
          description: InvalidCommitIdException
          schema:
            $ref: '#/definitions/InvalidCommitIdException'
        '488':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '489':
          description: InvalidMaxResultsException
          schema:
            $ref: '#/definitions/InvalidMaxResultsException'
        '490':
          description: InvalidContinuationTokenException
          schema:
            $ref: '#/definitions/InvalidContinuationTokenException'
        '491':
          description: RepositoryNotAssociatedWithPullRequestException
          schema:
            $ref: '#/definitions/RepositoryNotAssociatedWithPullRequestException'
        '492':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '493':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '494':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '495':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '496':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetCommentsForPullRequestInput'
        - name: maxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: nextToken
          type: string
          in: query
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.GetCommentsForPullRequest
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.GetCommit':
    post:
      operationId: GetCommit
      description: 'Returns information about a commit, including commit message and committer information.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetCommitOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: CommitIdRequiredException
          schema:
            $ref: '#/definitions/CommitIdRequiredException'
        '484':
          description: InvalidCommitIdException
          schema:
            $ref: '#/definitions/InvalidCommitIdException'
        '485':
          description: CommitIdDoesNotExistException
          schema:
            $ref: '#/definitions/CommitIdDoesNotExistException'
        '486':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '487':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '488':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '489':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '490':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetCommitInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.GetCommit
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.GetDifferences':
    post:
      operationId: GetDifferences
      description: 'Returns information about the differences in a valid commit specifier (such as a branch, tag, HEAD, commit ID, or other fully qualified reference). Results can be limited to a specified path.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetDifferencesOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '483':
          description: InvalidContinuationTokenException
          schema:
            $ref: '#/definitions/InvalidContinuationTokenException'
        '484':
          description: InvalidMaxResultsException
          schema:
            $ref: '#/definitions/InvalidMaxResultsException'
        '485':
          description: InvalidCommitIdException
          schema:
            $ref: '#/definitions/InvalidCommitIdException'
        '486':
          description: CommitRequiredException
          schema:
            $ref: '#/definitions/CommitRequiredException'
        '487':
          description: InvalidCommitException
          schema:
            $ref: '#/definitions/InvalidCommitException'
        '488':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '489':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '490':
          description: PathDoesNotExistException
          schema:
            $ref: '#/definitions/PathDoesNotExistException'
        '491':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '492':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '493':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '494':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '495':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetDifferencesInput'
        - name: MaxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: NextToken
          type: string
          in: query
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.GetDifferences
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.GetFile':
    post:
      operationId: GetFile
      description: Returns the base-64 encoded contents of a specified file and its metadata.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetFileOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: InvalidCommitException
          schema:
            $ref: '#/definitions/InvalidCommitException'
        '484':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '485':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '486':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '487':
          description: FileDoesNotExistException
          schema:
            $ref: '#/definitions/FileDoesNotExistException'
        '488':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '489':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '490':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '491':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '492':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
        '493':
          description: FileTooLargeException
          schema:
            $ref: '#/definitions/FileTooLargeException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetFileInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.GetFile
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.GetFolder':
    post:
      operationId: GetFolder
      description: Returns the contents of a specified folder in a repository.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetFolderOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: InvalidCommitException
          schema:
            $ref: '#/definitions/InvalidCommitException'
        '484':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '485':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '486':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '487':
          description: FolderDoesNotExistException
          schema:
            $ref: '#/definitions/FolderDoesNotExistException'
        '488':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '489':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '490':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '491':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '492':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetFolderInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.GetFolder
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.GetMergeCommit':
    post:
      operationId: GetMergeCommit
      description: Returns information about a specified merge commit.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetMergeCommitOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: CommitRequiredException
          schema:
            $ref: '#/definitions/CommitRequiredException'
        '484':
          description: InvalidCommitException
          schema:
            $ref: '#/definitions/InvalidCommitException'
        '485':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '486':
          description: InvalidConflictDetailLevelException
          schema:
            $ref: '#/definitions/InvalidConflictDetailLevelException'
        '487':
          description: InvalidConflictResolutionStrategyException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionStrategyException'
        '488':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '489':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '490':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '491':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '492':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetMergeCommitInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.GetMergeCommit
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.GetMergeConflicts':
    post:
      operationId: GetMergeConflicts
      description: Returns information about merge conflicts between the before and after commit IDs for a pull request in a repository.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetMergeConflictsOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: MergeOptionRequiredException
          schema:
            $ref: '#/definitions/MergeOptionRequiredException'
        '484':
          description: InvalidMergeOptionException
          schema:
            $ref: '#/definitions/InvalidMergeOptionException'
        '485':
          description: InvalidContinuationTokenException
          schema:
            $ref: '#/definitions/InvalidContinuationTokenException'
        '486':
          description: CommitRequiredException
          schema:
            $ref: '#/definitions/CommitRequiredException'
        '487':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '488':
          description: InvalidCommitException
          schema:
            $ref: '#/definitions/InvalidCommitException'
        '489':
          description: TipsDivergenceExceededException
          schema:
            $ref: '#/definitions/TipsDivergenceExceededException'
        '490':
          description: InvalidMaxConflictFilesException
          schema:
            $ref: '#/definitions/InvalidMaxConflictFilesException'
        '491':
          description: InvalidConflictDetailLevelException
          schema:
            $ref: '#/definitions/InvalidConflictDetailLevelException'
        '492':
          description: InvalidDestinationCommitSpecifierException
          schema:
            $ref: '#/definitions/InvalidDestinationCommitSpecifierException'
        '493':
          description: InvalidSourceCommitSpecifierException
          schema:
            $ref: '#/definitions/InvalidSourceCommitSpecifierException'
        '494':
          description: InvalidConflictResolutionStrategyException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionStrategyException'
        '495':
          description: MaximumFileContentToLoadExceededException
          schema:
            $ref: '#/definitions/MaximumFileContentToLoadExceededException'
        '496':
          description: MaximumItemsToCompareExceededException
          schema:
            $ref: '#/definitions/MaximumItemsToCompareExceededException'
        '497':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '498':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '499':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '500':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '501':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetMergeConflictsInput'
        - name: maxConflictFiles
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: nextToken
          type: string
          in: query
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.GetMergeConflicts
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.GetMergeOptions':
    post:
      operationId: GetMergeOptions
      description: 'Returns information about the merge options available for merging two specified branches. For details about why a merge option is not available, use GetMergeConflicts or DescribeMergeConflicts.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetMergeOptionsOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: CommitRequiredException
          schema:
            $ref: '#/definitions/CommitRequiredException'
        '484':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '485':
          description: InvalidCommitException
          schema:
            $ref: '#/definitions/InvalidCommitException'
        '486':
          description: TipsDivergenceExceededException
          schema:
            $ref: '#/definitions/TipsDivergenceExceededException'
        '487':
          description: InvalidConflictDetailLevelException
          schema:
            $ref: '#/definitions/InvalidConflictDetailLevelException'
        '488':
          description: InvalidConflictResolutionStrategyException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionStrategyException'
        '489':
          description: MaximumFileContentToLoadExceededException
          schema:
            $ref: '#/definitions/MaximumFileContentToLoadExceededException'
        '490':
          description: MaximumItemsToCompareExceededException
          schema:
            $ref: '#/definitions/MaximumItemsToCompareExceededException'
        '491':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '492':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '493':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '494':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '495':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetMergeOptionsInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.GetMergeOptions
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.GetPullRequest':
    post:
      operationId: GetPullRequest
      description: Gets information about a pull request in a specified repository.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetPullRequestOutput'
        '480':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '483':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '484':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '485':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '486':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '487':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetPullRequestInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.GetPullRequest
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.GetPullRequestApprovalStates':
    post:
      operationId: GetPullRequestApprovalStates
      description: Gets information about the approval states for a specified pull request. Approval states only apply to pull requests that have one or more approval rules applied to them.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetPullRequestApprovalStatesOutput'
        '480':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '483':
          description: InvalidRevisionIdException
          schema:
            $ref: '#/definitions/InvalidRevisionIdException'
        '484':
          description: RevisionIdRequiredException
          schema:
            $ref: '#/definitions/RevisionIdRequiredException'
        '485':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '486':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '487':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '488':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '489':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetPullRequestApprovalStatesInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.GetPullRequestApprovalStates
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.GetPullRequestOverrideState':
    post:
      operationId: GetPullRequestOverrideState
      description: 'Returns information about whether approval rules have been set aside (overridden) for a pull request, and if so, the Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetPullRequestOverrideStateOutput'
        '480':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '483':
          description: InvalidRevisionIdException
          schema:
            $ref: '#/definitions/InvalidRevisionIdException'
        '484':
          description: RevisionIdRequiredException
          schema:
            $ref: '#/definitions/RevisionIdRequiredException'
        '485':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '486':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '487':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '488':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '489':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetPullRequestOverrideStateInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.GetPullRequestOverrideState
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.GetRepository':
    post:
      operationId: GetRepository
      description: <p>Returns information about a repository.</p> <note> <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.</p> </note>
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetRepositoryOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '483':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '484':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '485':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '486':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '487':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetRepositoryInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.GetRepository
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.GetRepositoryTriggers':
    post:
      operationId: GetRepositoryTriggers
      description: Gets information about triggers configured for a repository.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GetRepositoryTriggersOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '484':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '485':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '486':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '487':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/GetRepositoryTriggersInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.GetRepositoryTriggers
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.ListApprovalRuleTemplates':
    post:
      operationId: ListApprovalRuleTemplates
      description: 'Lists all approval rule templates in the specified AWS Region in your AWS account. If an AWS Region is not specified, the AWS Region where you are signed in is used.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListApprovalRuleTemplatesOutput'
        '480':
          description: InvalidMaxResultsException
          schema:
            $ref: '#/definitions/InvalidMaxResultsException'
        '481':
          description: InvalidContinuationTokenException
          schema:
            $ref: '#/definitions/InvalidContinuationTokenException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListApprovalRuleTemplatesInput'
        - name: maxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: nextToken
          type: string
          in: query
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.ListApprovalRuleTemplates
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.ListAssociatedApprovalRuleTemplatesForRepository':
    post:
      operationId: ListAssociatedApprovalRuleTemplatesForRepository
      description: Lists all approval rule templates that are associated with a specified repository.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListAssociatedApprovalRuleTemplatesForRepositoryOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: InvalidMaxResultsException
          schema:
            $ref: '#/definitions/InvalidMaxResultsException'
        '484':
          description: InvalidContinuationTokenException
          schema:
            $ref: '#/definitions/InvalidContinuationTokenException'
        '485':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '486':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '487':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '488':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '489':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListAssociatedApprovalRuleTemplatesForRepositoryInput'
        - name: maxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: nextToken
          type: string
          in: query
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.ListAssociatedApprovalRuleTemplatesForRepository
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.ListBranches':
    post:
      operationId: ListBranches
      description: Gets information about one or more branches in a repository.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListBranchesOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '483':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '484':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '485':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '486':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '487':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
        '488':
          description: InvalidContinuationTokenException
          schema:
            $ref: '#/definitions/InvalidContinuationTokenException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListBranchesInput'
        - name: nextToken
          type: string
          in: query
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.ListBranches
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.ListPullRequests':
    post:
      operationId: ListPullRequests
      description: Returns a list of pull requests for a specified repository. The return list can be refined by pull request status or pull request author ARN.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListPullRequestsOutput'
        '480':
          description: InvalidPullRequestStatusException
          schema:
            $ref: '#/definitions/InvalidPullRequestStatusException'
        '481':
          description: InvalidAuthorArnException
          schema:
            $ref: '#/definitions/InvalidAuthorArnException'
        '482':
          description: AuthorDoesNotExistException
          schema:
            $ref: '#/definitions/AuthorDoesNotExistException'
        '483':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '484':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '485':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '486':
          description: InvalidMaxResultsException
          schema:
            $ref: '#/definitions/InvalidMaxResultsException'
        '487':
          description: InvalidContinuationTokenException
          schema:
            $ref: '#/definitions/InvalidContinuationTokenException'
        '488':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '489':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '490':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '491':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '492':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListPullRequestsInput'
        - name: maxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: nextToken
          type: string
          in: query
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.ListPullRequests
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.ListRepositories':
    post:
      operationId: ListRepositories
      description: Gets information about one or more repositories.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListRepositoriesOutput'
        '480':
          description: InvalidSortByException
          schema:
            $ref: '#/definitions/InvalidSortByException'
        '481':
          description: InvalidOrderException
          schema:
            $ref: '#/definitions/InvalidOrderException'
        '482':
          description: InvalidContinuationTokenException
          schema:
            $ref: '#/definitions/InvalidContinuationTokenException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListRepositoriesInput'
        - name: nextToken
          type: string
          in: query
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.ListRepositories
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.ListRepositoriesForApprovalRuleTemplate':
    post:
      operationId: ListRepositoriesForApprovalRuleTemplate
      description: Lists all repositories associated with the specified approval rule template.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListRepositoriesForApprovalRuleTemplateOutput'
        '480':
          description: ApprovalRuleTemplateNameRequiredException
          schema:
            $ref: '#/definitions/ApprovalRuleTemplateNameRequiredException'
        '481':
          description: InvalidApprovalRuleTemplateNameException
          schema:
            $ref: '#/definitions/InvalidApprovalRuleTemplateNameException'
        '482':
          description: ApprovalRuleTemplateDoesNotExistException
          schema:
            $ref: '#/definitions/ApprovalRuleTemplateDoesNotExistException'
        '483':
          description: InvalidMaxResultsException
          schema:
            $ref: '#/definitions/InvalidMaxResultsException'
        '484':
          description: InvalidContinuationTokenException
          schema:
            $ref: '#/definitions/InvalidContinuationTokenException'
        '485':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '486':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '487':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '488':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '489':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListRepositoriesForApprovalRuleTemplateInput'
        - name: maxResults
          type: string
          in: query
          description: Pagination limit
          required: false
        - name: nextToken
          type: string
          in: query
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.ListRepositoriesForApprovalRuleTemplate
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.ListTagsForResource':
    post:
      operationId: ListTagsForResource
      description: 'Gets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats">CodeCommit Resources and Operations</a> in the<i> AWS CodeCommit User Guide</i>.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListTagsForResourceOutput'
        '480':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: ResourceArnRequiredException
          schema:
            $ref: '#/definitions/ResourceArnRequiredException'
        '483':
          description: InvalidResourceArnException
          schema:
            $ref: '#/definitions/InvalidResourceArnException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ListTagsForResourceInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.ListTagsForResource
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.MergeBranchesByFastForward':
    post:
      operationId: MergeBranchesByFastForward
      description: Merges two branches using the fast-forward merge strategy.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MergeBranchesByFastForwardOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: TipsDivergenceExceededException
          schema:
            $ref: '#/definitions/TipsDivergenceExceededException'
        '484':
          description: CommitRequiredException
          schema:
            $ref: '#/definitions/CommitRequiredException'
        '485':
          description: InvalidCommitException
          schema:
            $ref: '#/definitions/InvalidCommitException'
        '486':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '487':
          description: InvalidTargetBranchException
          schema:
            $ref: '#/definitions/InvalidTargetBranchException'
        '488':
          description: InvalidBranchNameException
          schema:
            $ref: '#/definitions/InvalidBranchNameException'
        '489':
          description: BranchNameRequiredException
          schema:
            $ref: '#/definitions/BranchNameRequiredException'
        '490':
          description: BranchNameIsTagNameException
          schema:
            $ref: '#/definitions/BranchNameIsTagNameException'
        '491':
          description: BranchDoesNotExistException
          schema:
            $ref: '#/definitions/BranchDoesNotExistException'
        '492':
          description: ManualMergeRequiredException
          schema:
            $ref: '#/definitions/ManualMergeRequiredException'
        '493':
          description: ConcurrentReferenceUpdateException
          schema:
            $ref: '#/definitions/ConcurrentReferenceUpdateException'
        '494':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '495':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '496':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '497':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '498':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/MergeBranchesByFastForwardInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.MergeBranchesByFastForward
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.MergeBranchesBySquash':
    post:
      operationId: MergeBranchesBySquash
      description: Merges two branches using the squash merge strategy.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MergeBranchesBySquashOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: TipsDivergenceExceededException
          schema:
            $ref: '#/definitions/TipsDivergenceExceededException'
        '484':
          description: CommitRequiredException
          schema:
            $ref: '#/definitions/CommitRequiredException'
        '485':
          description: InvalidCommitException
          schema:
            $ref: '#/definitions/InvalidCommitException'
        '486':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '487':
          description: InvalidTargetBranchException
          schema:
            $ref: '#/definitions/InvalidTargetBranchException'
        '488':
          description: InvalidBranchNameException
          schema:
            $ref: '#/definitions/InvalidBranchNameException'
        '489':
          description: BranchNameRequiredException
          schema:
            $ref: '#/definitions/BranchNameRequiredException'
        '490':
          description: BranchNameIsTagNameException
          schema:
            $ref: '#/definitions/BranchNameIsTagNameException'
        '491':
          description: BranchDoesNotExistException
          schema:
            $ref: '#/definitions/BranchDoesNotExistException'
        '492':
          description: ManualMergeRequiredException
          schema:
            $ref: '#/definitions/ManualMergeRequiredException'
        '493':
          description: InvalidConflictDetailLevelException
          schema:
            $ref: '#/definitions/InvalidConflictDetailLevelException'
        '494':
          description: InvalidConflictResolutionStrategyException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionStrategyException'
        '495':
          description: InvalidConflictResolutionException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionException'
        '496':
          description: MaximumConflictResolutionEntriesExceededException
          schema:
            $ref: '#/definitions/MaximumConflictResolutionEntriesExceededException'
        '497':
          description: MultipleConflictResolutionEntriesException
          schema:
            $ref: '#/definitions/MultipleConflictResolutionEntriesException'
        '498':
          description: ReplacementTypeRequiredException
          schema:
            $ref: '#/definitions/ReplacementTypeRequiredException'
        '499':
          description: InvalidReplacementTypeException
          schema:
            $ref: '#/definitions/InvalidReplacementTypeException'
        '500':
          description: ReplacementContentRequiredException
          schema:
            $ref: '#/definitions/ReplacementContentRequiredException'
        '501':
          description: InvalidReplacementContentException
          schema:
            $ref: '#/definitions/InvalidReplacementContentException'
        '502':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '503':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '504':
          description: FileContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FileContentSizeLimitExceededException'
        '505':
          description: FolderContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FolderContentSizeLimitExceededException'
        '506':
          description: MaximumFileContentToLoadExceededException
          schema:
            $ref: '#/definitions/MaximumFileContentToLoadExceededException'
        '507':
          description: MaximumItemsToCompareExceededException
          schema:
            $ref: '#/definitions/MaximumItemsToCompareExceededException'
        '508':
          description: FileModeRequiredException
          schema:
            $ref: '#/definitions/FileModeRequiredException'
        '509':
          description: InvalidFileModeException
          schema:
            $ref: '#/definitions/InvalidFileModeException'
        '510':
          description: NameLengthExceededException
          schema:
            $ref: '#/definitions/NameLengthExceededException'
        '511':
          description: InvalidEmailException
          schema:
            $ref: '#/definitions/InvalidEmailException'
        '512':
          description: CommitMessageLengthExceededException
          schema:
            $ref: '#/definitions/CommitMessageLengthExceededException'
        '513':
          description: ConcurrentReferenceUpdateException
          schema:
            $ref: '#/definitions/ConcurrentReferenceUpdateException'
        '514':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '515':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '516':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '517':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '518':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/MergeBranchesBySquashInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.MergeBranchesBySquash
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.MergeBranchesByThreeWay':
    post:
      operationId: MergeBranchesByThreeWay
      description: Merges two specified branches using the three-way merge strategy.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MergeBranchesByThreeWayOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: TipsDivergenceExceededException
          schema:
            $ref: '#/definitions/TipsDivergenceExceededException'
        '484':
          description: CommitRequiredException
          schema:
            $ref: '#/definitions/CommitRequiredException'
        '485':
          description: InvalidCommitException
          schema:
            $ref: '#/definitions/InvalidCommitException'
        '486':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '487':
          description: InvalidTargetBranchException
          schema:
            $ref: '#/definitions/InvalidTargetBranchException'
        '488':
          description: InvalidBranchNameException
          schema:
            $ref: '#/definitions/InvalidBranchNameException'
        '489':
          description: BranchNameRequiredException
          schema:
            $ref: '#/definitions/BranchNameRequiredException'
        '490':
          description: BranchNameIsTagNameException
          schema:
            $ref: '#/definitions/BranchNameIsTagNameException'
        '491':
          description: BranchDoesNotExistException
          schema:
            $ref: '#/definitions/BranchDoesNotExistException'
        '492':
          description: ManualMergeRequiredException
          schema:
            $ref: '#/definitions/ManualMergeRequiredException'
        '493':
          description: ConcurrentReferenceUpdateException
          schema:
            $ref: '#/definitions/ConcurrentReferenceUpdateException'
        '494':
          description: InvalidConflictDetailLevelException
          schema:
            $ref: '#/definitions/InvalidConflictDetailLevelException'
        '495':
          description: InvalidConflictResolutionStrategyException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionStrategyException'
        '496':
          description: InvalidConflictResolutionException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionException'
        '497':
          description: MaximumConflictResolutionEntriesExceededException
          schema:
            $ref: '#/definitions/MaximumConflictResolutionEntriesExceededException'
        '498':
          description: MultipleConflictResolutionEntriesException
          schema:
            $ref: '#/definitions/MultipleConflictResolutionEntriesException'
        '499':
          description: ReplacementTypeRequiredException
          schema:
            $ref: '#/definitions/ReplacementTypeRequiredException'
        '500':
          description: InvalidReplacementTypeException
          schema:
            $ref: '#/definitions/InvalidReplacementTypeException'
        '501':
          description: ReplacementContentRequiredException
          schema:
            $ref: '#/definitions/ReplacementContentRequiredException'
        '502':
          description: InvalidReplacementContentException
          schema:
            $ref: '#/definitions/InvalidReplacementContentException'
        '503':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '504':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '505':
          description: FileContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FileContentSizeLimitExceededException'
        '506':
          description: FolderContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FolderContentSizeLimitExceededException'
        '507':
          description: MaximumFileContentToLoadExceededException
          schema:
            $ref: '#/definitions/MaximumFileContentToLoadExceededException'
        '508':
          description: MaximumItemsToCompareExceededException
          schema:
            $ref: '#/definitions/MaximumItemsToCompareExceededException'
        '509':
          description: FileModeRequiredException
          schema:
            $ref: '#/definitions/FileModeRequiredException'
        '510':
          description: InvalidFileModeException
          schema:
            $ref: '#/definitions/InvalidFileModeException'
        '511':
          description: NameLengthExceededException
          schema:
            $ref: '#/definitions/NameLengthExceededException'
        '512':
          description: InvalidEmailException
          schema:
            $ref: '#/definitions/InvalidEmailException'
        '513':
          description: CommitMessageLengthExceededException
          schema:
            $ref: '#/definitions/CommitMessageLengthExceededException'
        '514':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '515':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '516':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '517':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '518':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/MergeBranchesByThreeWayInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.MergeBranchesByThreeWay
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.MergePullRequestByFastForward':
    post:
      operationId: MergePullRequestByFastForward
      description: 'Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the fast-forward merge strategy. If the merge is successful, it closes the pull request.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MergePullRequestByFastForwardOutput'
        '480':
          description: ManualMergeRequiredException
          schema:
            $ref: '#/definitions/ManualMergeRequiredException'
        '481':
          description: PullRequestAlreadyClosedException
          schema:
            $ref: '#/definitions/PullRequestAlreadyClosedException'
        '482':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '483':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '484':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '485':
          description: TipOfSourceReferenceIsDifferentException
          schema:
            $ref: '#/definitions/TipOfSourceReferenceIsDifferentException'
        '486':
          description: ReferenceDoesNotExistException
          schema:
            $ref: '#/definitions/ReferenceDoesNotExistException'
        '487':
          description: InvalidCommitIdException
          schema:
            $ref: '#/definitions/InvalidCommitIdException'
        '488':
          description: RepositoryNotAssociatedWithPullRequestException
          schema:
            $ref: '#/definitions/RepositoryNotAssociatedWithPullRequestException'
        '489':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '490':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '491':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '492':
          description: ConcurrentReferenceUpdateException
          schema:
            $ref: '#/definitions/ConcurrentReferenceUpdateException'
        '493':
          description: PullRequestApprovalRulesNotSatisfiedException
          schema:
            $ref: '#/definitions/PullRequestApprovalRulesNotSatisfiedException'
        '494':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '495':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '496':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '497':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '498':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/MergePullRequestByFastForwardInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.MergePullRequestByFastForward
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.MergePullRequestBySquash':
    post:
      operationId: MergePullRequestBySquash
      description: 'Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the squash merge strategy. If the merge is successful, it closes the pull request.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MergePullRequestBySquashOutput'
        '480':
          description: PullRequestAlreadyClosedException
          schema:
            $ref: '#/definitions/PullRequestAlreadyClosedException'
        '481':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '482':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '483':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '484':
          description: InvalidCommitIdException
          schema:
            $ref: '#/definitions/InvalidCommitIdException'
        '485':
          description: ManualMergeRequiredException
          schema:
            $ref: '#/definitions/ManualMergeRequiredException'
        '486':
          description: TipOfSourceReferenceIsDifferentException
          schema:
            $ref: '#/definitions/TipOfSourceReferenceIsDifferentException'
        '487':
          description: TipsDivergenceExceededException
          schema:
            $ref: '#/definitions/TipsDivergenceExceededException'
        '488':
          description: NameLengthExceededException
          schema:
            $ref: '#/definitions/NameLengthExceededException'
        '489':
          description: InvalidEmailException
          schema:
            $ref: '#/definitions/InvalidEmailException'
        '490':
          description: CommitMessageLengthExceededException
          schema:
            $ref: '#/definitions/CommitMessageLengthExceededException'
        '491':
          description: InvalidConflictDetailLevelException
          schema:
            $ref: '#/definitions/InvalidConflictDetailLevelException'
        '492':
          description: InvalidConflictResolutionStrategyException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionStrategyException'
        '493':
          description: InvalidConflictResolutionException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionException'
        '494':
          description: ReplacementTypeRequiredException
          schema:
            $ref: '#/definitions/ReplacementTypeRequiredException'
        '495':
          description: InvalidReplacementTypeException
          schema:
            $ref: '#/definitions/InvalidReplacementTypeException'
        '496':
          description: MultipleConflictResolutionEntriesException
          schema:
            $ref: '#/definitions/MultipleConflictResolutionEntriesException'
        '497':
          description: ReplacementContentRequiredException
          schema:
            $ref: '#/definitions/ReplacementContentRequiredException'
        '498':
          description: MaximumConflictResolutionEntriesExceededException
          schema:
            $ref: '#/definitions/MaximumConflictResolutionEntriesExceededException'
        '499':
          description: ConcurrentReferenceUpdateException
          schema:
            $ref: '#/definitions/ConcurrentReferenceUpdateException'
        '500':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '501':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '502':
          description: InvalidFileModeException
          schema:
            $ref: '#/definitions/InvalidFileModeException'
        '503':
          description: InvalidReplacementContentException
          schema:
            $ref: '#/definitions/InvalidReplacementContentException'
        '504':
          description: FileContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FileContentSizeLimitExceededException'
        '505':
          description: FolderContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FolderContentSizeLimitExceededException'
        '506':
          description: MaximumFileContentToLoadExceededException
          schema:
            $ref: '#/definitions/MaximumFileContentToLoadExceededException'
        '507':
          description: MaximumItemsToCompareExceededException
          schema:
            $ref: '#/definitions/MaximumItemsToCompareExceededException'
        '508':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '509':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '510':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '511':
          description: RepositoryNotAssociatedWithPullRequestException
          schema:
            $ref: '#/definitions/RepositoryNotAssociatedWithPullRequestException'
        '512':
          description: PullRequestApprovalRulesNotSatisfiedException
          schema:
            $ref: '#/definitions/PullRequestApprovalRulesNotSatisfiedException'
        '513':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '514':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '515':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '516':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '517':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/MergePullRequestBySquashInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.MergePullRequestBySquash
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.MergePullRequestByThreeWay':
    post:
      operationId: MergePullRequestByThreeWay
      description: 'Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the three-way merge strategy. If the merge is successful, it closes the pull request.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MergePullRequestByThreeWayOutput'
        '480':
          description: PullRequestAlreadyClosedException
          schema:
            $ref: '#/definitions/PullRequestAlreadyClosedException'
        '481':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '482':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '483':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '484':
          description: InvalidCommitIdException
          schema:
            $ref: '#/definitions/InvalidCommitIdException'
        '485':
          description: ManualMergeRequiredException
          schema:
            $ref: '#/definitions/ManualMergeRequiredException'
        '486':
          description: TipOfSourceReferenceIsDifferentException
          schema:
            $ref: '#/definitions/TipOfSourceReferenceIsDifferentException'
        '487':
          description: TipsDivergenceExceededException
          schema:
            $ref: '#/definitions/TipsDivergenceExceededException'
        '488':
          description: NameLengthExceededException
          schema:
            $ref: '#/definitions/NameLengthExceededException'
        '489':
          description: InvalidEmailException
          schema:
            $ref: '#/definitions/InvalidEmailException'
        '490':
          description: CommitMessageLengthExceededException
          schema:
            $ref: '#/definitions/CommitMessageLengthExceededException'
        '491':
          description: InvalidConflictDetailLevelException
          schema:
            $ref: '#/definitions/InvalidConflictDetailLevelException'
        '492':
          description: InvalidConflictResolutionStrategyException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionStrategyException'
        '493':
          description: InvalidConflictResolutionException
          schema:
            $ref: '#/definitions/InvalidConflictResolutionException'
        '494':
          description: ReplacementTypeRequiredException
          schema:
            $ref: '#/definitions/ReplacementTypeRequiredException'
        '495':
          description: InvalidReplacementTypeException
          schema:
            $ref: '#/definitions/InvalidReplacementTypeException'
        '496':
          description: MultipleConflictResolutionEntriesException
          schema:
            $ref: '#/definitions/MultipleConflictResolutionEntriesException'
        '497':
          description: ReplacementContentRequiredException
          schema:
            $ref: '#/definitions/ReplacementContentRequiredException'
        '498':
          description: MaximumConflictResolutionEntriesExceededException
          schema:
            $ref: '#/definitions/MaximumConflictResolutionEntriesExceededException'
        '499':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '500':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '501':
          description: InvalidFileModeException
          schema:
            $ref: '#/definitions/InvalidFileModeException'
        '502':
          description: InvalidReplacementContentException
          schema:
            $ref: '#/definitions/InvalidReplacementContentException'
        '503':
          description: FileContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FileContentSizeLimitExceededException'
        '504':
          description: FolderContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FolderContentSizeLimitExceededException'
        '505':
          description: MaximumFileContentToLoadExceededException
          schema:
            $ref: '#/definitions/MaximumFileContentToLoadExceededException'
        '506':
          description: MaximumItemsToCompareExceededException
          schema:
            $ref: '#/definitions/MaximumItemsToCompareExceededException'
        '507':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '508':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '509':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '510':
          description: RepositoryNotAssociatedWithPullRequestException
          schema:
            $ref: '#/definitions/RepositoryNotAssociatedWithPullRequestException'
        '511':
          description: ConcurrentReferenceUpdateException
          schema:
            $ref: '#/definitions/ConcurrentReferenceUpdateException'
        '512':
          description: PullRequestApprovalRulesNotSatisfiedException
          schema:
            $ref: '#/definitions/PullRequestApprovalRulesNotSatisfiedException'
        '513':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '514':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '515':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '516':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '517':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/MergePullRequestByThreeWayInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.MergePullRequestByThreeWay
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.OverridePullRequestApprovalRules':
    post:
      operationId: OverridePullRequestApprovalRules
      description: Sets aside (overrides) all approval rule requirements for a specified pull request.
      responses:
        '200':
          description: Success
        '480':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '483':
          description: InvalidRevisionIdException
          schema:
            $ref: '#/definitions/InvalidRevisionIdException'
        '484':
          description: RevisionIdRequiredException
          schema:
            $ref: '#/definitions/RevisionIdRequiredException'
        '485':
          description: InvalidOverrideStatusException
          schema:
            $ref: '#/definitions/InvalidOverrideStatusException'
        '486':
          description: OverrideStatusRequiredException
          schema:
            $ref: '#/definitions/OverrideStatusRequiredException'
        '487':
          description: OverrideAlreadySetException
          schema:
            $ref: '#/definitions/OverrideAlreadySetException'
        '488':
          description: RevisionNotCurrentException
          schema:
            $ref: '#/definitions/RevisionNotCurrentException'
        '489':
          description: PullRequestAlreadyClosedException
          schema:
            $ref: '#/definitions/PullRequestAlreadyClosedException'
        '490':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '491':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '492':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '493':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '494':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/OverridePullRequestApprovalRulesInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.OverridePullRequestApprovalRules
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.PostCommentForComparedCommit':
    post:
      operationId: PostCommentForComparedCommit
      description: Posts a comment on the comparison between two commits.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PostCommentForComparedCommitOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '483':
          description: ClientRequestTokenRequiredException
          schema:
            $ref: '#/definitions/ClientRequestTokenRequiredException'
        '484':
          description: InvalidClientRequestTokenException
          schema:
            $ref: '#/definitions/InvalidClientRequestTokenException'
        '485':
          description: IdempotencyParameterMismatchException
          schema:
            $ref: '#/definitions/IdempotencyParameterMismatchException'
        '486':
          description: CommentContentRequiredException
          schema:
            $ref: '#/definitions/CommentContentRequiredException'
        '487':
          description: CommentContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/CommentContentSizeLimitExceededException'
        '488':
          description: InvalidFileLocationException
          schema:
            $ref: '#/definitions/InvalidFileLocationException'
        '489':
          description: InvalidRelativeFileVersionEnumException
          schema:
            $ref: '#/definitions/InvalidRelativeFileVersionEnumException'
        '490':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '491':
          description: InvalidFilePositionException
          schema:
            $ref: '#/definitions/InvalidFilePositionException'
        '492':
          description: CommitIdRequiredException
          schema:
            $ref: '#/definitions/CommitIdRequiredException'
        '493':
          description: InvalidCommitIdException
          schema:
            $ref: '#/definitions/InvalidCommitIdException'
        '494':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '495':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '496':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '497':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '498':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
        '499':
          description: BeforeCommitIdAndAfterCommitIdAreSameException
          schema:
            $ref: '#/definitions/BeforeCommitIdAndAfterCommitIdAreSameException'
        '500':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '501':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '502':
          description: PathDoesNotExistException
          schema:
            $ref: '#/definitions/PathDoesNotExistException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PostCommentForComparedCommitInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.PostCommentForComparedCommit
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.PostCommentForPullRequest':
    post:
      operationId: PostCommentForPullRequest
      description: Posts a comment on a pull request.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PostCommentForPullRequestOutput'
        '480':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '483':
          description: RepositoryNotAssociatedWithPullRequestException
          schema:
            $ref: '#/definitions/RepositoryNotAssociatedWithPullRequestException'
        '484':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '485':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '486':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '487':
          description: ClientRequestTokenRequiredException
          schema:
            $ref: '#/definitions/ClientRequestTokenRequiredException'
        '488':
          description: InvalidClientRequestTokenException
          schema:
            $ref: '#/definitions/InvalidClientRequestTokenException'
        '489':
          description: IdempotencyParameterMismatchException
          schema:
            $ref: '#/definitions/IdempotencyParameterMismatchException'
        '490':
          description: CommentContentRequiredException
          schema:
            $ref: '#/definitions/CommentContentRequiredException'
        '491':
          description: CommentContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/CommentContentSizeLimitExceededException'
        '492':
          description: InvalidFileLocationException
          schema:
            $ref: '#/definitions/InvalidFileLocationException'
        '493':
          description: InvalidRelativeFileVersionEnumException
          schema:
            $ref: '#/definitions/InvalidRelativeFileVersionEnumException'
        '494':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '495':
          description: InvalidFilePositionException
          schema:
            $ref: '#/definitions/InvalidFilePositionException'
        '496':
          description: CommitIdRequiredException
          schema:
            $ref: '#/definitions/CommitIdRequiredException'
        '497':
          description: InvalidCommitIdException
          schema:
            $ref: '#/definitions/InvalidCommitIdException'
        '498':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '499':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '500':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '501':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '502':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
        '503':
          description: CommitDoesNotExistException
          schema:
            $ref: '#/definitions/CommitDoesNotExistException'
        '504':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '505':
          description: PathDoesNotExistException
          schema:
            $ref: '#/definitions/PathDoesNotExistException'
        '506':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '507':
          description: BeforeCommitIdAndAfterCommitIdAreSameException
          schema:
            $ref: '#/definitions/BeforeCommitIdAndAfterCommitIdAreSameException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PostCommentForPullRequestInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.PostCommentForPullRequest
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.PostCommentReply':
    post:
      operationId: PostCommentReply
      description: Posts a comment in reply to an existing comment on a comparison between commits or a pull request.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PostCommentReplyOutput'
        '480':
          description: ClientRequestTokenRequiredException
          schema:
            $ref: '#/definitions/ClientRequestTokenRequiredException'
        '481':
          description: InvalidClientRequestTokenException
          schema:
            $ref: '#/definitions/InvalidClientRequestTokenException'
        '482':
          description: IdempotencyParameterMismatchException
          schema:
            $ref: '#/definitions/IdempotencyParameterMismatchException'
        '483':
          description: CommentContentRequiredException
          schema:
            $ref: '#/definitions/CommentContentRequiredException'
        '484':
          description: CommentContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/CommentContentSizeLimitExceededException'
        '485':
          description: CommentDoesNotExistException
          schema:
            $ref: '#/definitions/CommentDoesNotExistException'
        '486':
          description: CommentIdRequiredException
          schema:
            $ref: '#/definitions/CommentIdRequiredException'
        '487':
          description: InvalidCommentIdException
          schema:
            $ref: '#/definitions/InvalidCommentIdException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PostCommentReplyInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.PostCommentReply
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.PutFile':
    post:
      operationId: PutFile
      description: 'Adds or updates a file in a branch in an AWS CodeCommit repository, and generates a commit for the addition in the specified branch.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PutFileOutput'
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '483':
          description: ParentCommitIdRequiredException
          schema:
            $ref: '#/definitions/ParentCommitIdRequiredException'
        '484':
          description: InvalidParentCommitIdException
          schema:
            $ref: '#/definitions/InvalidParentCommitIdException'
        '485':
          description: ParentCommitDoesNotExistException
          schema:
            $ref: '#/definitions/ParentCommitDoesNotExistException'
        '486':
          description: ParentCommitIdOutdatedException
          schema:
            $ref: '#/definitions/ParentCommitIdOutdatedException'
        '487':
          description: FileContentRequiredException
          schema:
            $ref: '#/definitions/FileContentRequiredException'
        '488':
          description: FileContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FileContentSizeLimitExceededException'
        '489':
          description: FolderContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/FolderContentSizeLimitExceededException'
        '490':
          description: PathRequiredException
          schema:
            $ref: '#/definitions/PathRequiredException'
        '491':
          description: InvalidPathException
          schema:
            $ref: '#/definitions/InvalidPathException'
        '492':
          description: BranchNameRequiredException
          schema:
            $ref: '#/definitions/BranchNameRequiredException'
        '493':
          description: InvalidBranchNameException
          schema:
            $ref: '#/definitions/InvalidBranchNameException'
        '494':
          description: BranchDoesNotExistException
          schema:
            $ref: '#/definitions/BranchDoesNotExistException'
        '495':
          description: BranchNameIsTagNameException
          schema:
            $ref: '#/definitions/BranchNameIsTagNameException'
        '496':
          description: InvalidFileModeException
          schema:
            $ref: '#/definitions/InvalidFileModeException'
        '497':
          description: NameLengthExceededException
          schema:
            $ref: '#/definitions/NameLengthExceededException'
        '498':
          description: InvalidEmailException
          schema:
            $ref: '#/definitions/InvalidEmailException'
        '499':
          description: CommitMessageLengthExceededException
          schema:
            $ref: '#/definitions/CommitMessageLengthExceededException'
        '500':
          description: InvalidDeletionParameterException
          schema:
            $ref: '#/definitions/InvalidDeletionParameterException'
        '501':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '502':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '503':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '504':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '505':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
        '506':
          description: SameFileContentException
          schema:
            $ref: '#/definitions/SameFileContentException'
        '507':
          description: FileNameConflictsWithDirectoryNameException
          schema:
            $ref: '#/definitions/FileNameConflictsWithDirectoryNameException'
        '508':
          description: DirectoryNameConflictsWithFileNameException
          schema:
            $ref: '#/definitions/DirectoryNameConflictsWithFileNameException'
        '509':
          description: FilePathConflictsWithSubmodulePathException
          schema:
            $ref: '#/definitions/FilePathConflictsWithSubmodulePathException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PutFileInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.PutFile
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.PutRepositoryTriggers':
    post:
      operationId: PutRepositoryTriggers
      description: Replaces all triggers for a repository. Used to create or delete triggers.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PutRepositoryTriggersOutput'
        '480':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '481':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '482':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '483':
          description: RepositoryTriggersListRequiredException
          schema:
            $ref: '#/definitions/RepositoryTriggersListRequiredException'
        '484':
          description: MaximumRepositoryTriggersExceededException
          schema:
            $ref: '#/definitions/MaximumRepositoryTriggersExceededException'
        '485':
          description: InvalidRepositoryTriggerNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryTriggerNameException'
        '486':
          description: InvalidRepositoryTriggerDestinationArnException
          schema:
            $ref: '#/definitions/InvalidRepositoryTriggerDestinationArnException'
        '487':
          description: InvalidRepositoryTriggerRegionException
          schema:
            $ref: '#/definitions/InvalidRepositoryTriggerRegionException'
        '488':
          description: InvalidRepositoryTriggerCustomDataException
          schema:
            $ref: '#/definitions/InvalidRepositoryTriggerCustomDataException'
        '489':
          description: MaximumBranchesExceededException
          schema:
            $ref: '#/definitions/MaximumBranchesExceededException'
        '490':
          description: InvalidRepositoryTriggerBranchNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryTriggerBranchNameException'
        '491':
          description: InvalidRepositoryTriggerEventsException
          schema:
            $ref: '#/definitions/InvalidRepositoryTriggerEventsException'
        '492':
          description: RepositoryTriggerNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryTriggerNameRequiredException'
        '493':
          description: RepositoryTriggerDestinationArnRequiredException
          schema:
            $ref: '#/definitions/RepositoryTriggerDestinationArnRequiredException'
        '494':
          description: RepositoryTriggerBranchNameListRequiredException
          schema:
            $ref: '#/definitions/RepositoryTriggerBranchNameListRequiredException'
        '495':
          description: RepositoryTriggerEventsListRequiredException
          schema:
            $ref: '#/definitions/RepositoryTriggerEventsListRequiredException'
        '496':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '497':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '498':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '499':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '500':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PutRepositoryTriggersInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.PutRepositoryTriggers
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.TagResource':
    post:
      operationId: TagResource
      description: 'Adds or updates tags for a resource in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats">CodeCommit Resources and Operations</a> in the <i>AWS CodeCommit User Guide</i>.'
      responses:
        '200':
          description: Success
        '480':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: ResourceArnRequiredException
          schema:
            $ref: '#/definitions/ResourceArnRequiredException'
        '483':
          description: InvalidResourceArnException
          schema:
            $ref: '#/definitions/InvalidResourceArnException'
        '484':
          description: TagsMapRequiredException
          schema:
            $ref: '#/definitions/TagsMapRequiredException'
        '485':
          description: InvalidTagsMapException
          schema:
            $ref: '#/definitions/InvalidTagsMapException'
        '486':
          description: TooManyTagsException
          schema:
            $ref: '#/definitions/TooManyTagsException'
        '487':
          description: InvalidSystemTagUsageException
          schema:
            $ref: '#/definitions/InvalidSystemTagUsageException'
        '488':
          description: TagPolicyException
          schema:
            $ref: '#/definitions/TagPolicyException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TagResourceInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.TagResource
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.TestRepositoryTriggers':
    post:
      operationId: TestRepositoryTriggers
      description: 'Tests the functionality of repository triggers by sending information to the trigger target. If real data is available in the repository, the test sends data from the last commit. If no data is available, sample data is generated.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/TestRepositoryTriggersOutput'
        '480':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '481':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '482':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '483':
          description: RepositoryTriggersListRequiredException
          schema:
            $ref: '#/definitions/RepositoryTriggersListRequiredException'
        '484':
          description: MaximumRepositoryTriggersExceededException
          schema:
            $ref: '#/definitions/MaximumRepositoryTriggersExceededException'
        '485':
          description: InvalidRepositoryTriggerNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryTriggerNameException'
        '486':
          description: InvalidRepositoryTriggerDestinationArnException
          schema:
            $ref: '#/definitions/InvalidRepositoryTriggerDestinationArnException'
        '487':
          description: InvalidRepositoryTriggerRegionException
          schema:
            $ref: '#/definitions/InvalidRepositoryTriggerRegionException'
        '488':
          description: InvalidRepositoryTriggerCustomDataException
          schema:
            $ref: '#/definitions/InvalidRepositoryTriggerCustomDataException'
        '489':
          description: MaximumBranchesExceededException
          schema:
            $ref: '#/definitions/MaximumBranchesExceededException'
        '490':
          description: InvalidRepositoryTriggerBranchNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryTriggerBranchNameException'
        '491':
          description: InvalidRepositoryTriggerEventsException
          schema:
            $ref: '#/definitions/InvalidRepositoryTriggerEventsException'
        '492':
          description: RepositoryTriggerNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryTriggerNameRequiredException'
        '493':
          description: RepositoryTriggerDestinationArnRequiredException
          schema:
            $ref: '#/definitions/RepositoryTriggerDestinationArnRequiredException'
        '494':
          description: RepositoryTriggerBranchNameListRequiredException
          schema:
            $ref: '#/definitions/RepositoryTriggerBranchNameListRequiredException'
        '495':
          description: RepositoryTriggerEventsListRequiredException
          schema:
            $ref: '#/definitions/RepositoryTriggerEventsListRequiredException'
        '496':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '497':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '498':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '499':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '500':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TestRepositoryTriggersInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.TestRepositoryTriggers
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.UntagResource':
    post:
      operationId: UntagResource
      description: 'Removes tags for a resource in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/auth-and-access-control-iam-access-control-identity-based.html#arn-formats">CodeCommit Resources and Operations</a> in the <i>AWS CodeCommit User Guide</i>.'
      responses:
        '200':
          description: Success
        '480':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '481':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '482':
          description: ResourceArnRequiredException
          schema:
            $ref: '#/definitions/ResourceArnRequiredException'
        '483':
          description: InvalidResourceArnException
          schema:
            $ref: '#/definitions/InvalidResourceArnException'
        '484':
          description: TagKeysListRequiredException
          schema:
            $ref: '#/definitions/TagKeysListRequiredException'
        '485':
          description: InvalidTagKeysListException
          schema:
            $ref: '#/definitions/InvalidTagKeysListException'
        '486':
          description: TooManyTagsException
          schema:
            $ref: '#/definitions/TooManyTagsException'
        '487':
          description: InvalidSystemTagUsageException
          schema:
            $ref: '#/definitions/InvalidSystemTagUsageException'
        '488':
          description: TagPolicyException
          schema:
            $ref: '#/definitions/TagPolicyException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UntagResourceInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.UntagResource
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.UpdateApprovalRuleTemplateContent':
    post:
      operationId: UpdateApprovalRuleTemplateContent
      description: 'Updates the content of an approval rule template. You can change the number of required approvals, the membership of the approval rule, and whether an approval pool is defined.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateApprovalRuleTemplateContentOutput'
        '480':
          description: InvalidApprovalRuleTemplateNameException
          schema:
            $ref: '#/definitions/InvalidApprovalRuleTemplateNameException'
        '481':
          description: ApprovalRuleTemplateNameRequiredException
          schema:
            $ref: '#/definitions/ApprovalRuleTemplateNameRequiredException'
        '482':
          description: ApprovalRuleTemplateDoesNotExistException
          schema:
            $ref: '#/definitions/ApprovalRuleTemplateDoesNotExistException'
        '483':
          description: InvalidApprovalRuleTemplateContentException
          schema:
            $ref: '#/definitions/InvalidApprovalRuleTemplateContentException'
        '484':
          description: InvalidRuleContentSha256Exception
          schema:
            $ref: '#/definitions/InvalidRuleContentSha256Exception'
        '485':
          description: ApprovalRuleTemplateContentRequiredException
          schema:
            $ref: '#/definitions/ApprovalRuleTemplateContentRequiredException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateApprovalRuleTemplateContentInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.UpdateApprovalRuleTemplateContent
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.UpdateApprovalRuleTemplateDescription':
    post:
      operationId: UpdateApprovalRuleTemplateDescription
      description: Updates the description for a specified approval rule template.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateApprovalRuleTemplateDescriptionOutput'
        '480':
          description: InvalidApprovalRuleTemplateNameException
          schema:
            $ref: '#/definitions/InvalidApprovalRuleTemplateNameException'
        '481':
          description: ApprovalRuleTemplateNameRequiredException
          schema:
            $ref: '#/definitions/ApprovalRuleTemplateNameRequiredException'
        '482':
          description: ApprovalRuleTemplateDoesNotExistException
          schema:
            $ref: '#/definitions/ApprovalRuleTemplateDoesNotExistException'
        '483':
          description: InvalidApprovalRuleTemplateDescriptionException
          schema:
            $ref: '#/definitions/InvalidApprovalRuleTemplateDescriptionException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateApprovalRuleTemplateDescriptionInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.UpdateApprovalRuleTemplateDescription
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.UpdateApprovalRuleTemplateName':
    post:
      operationId: UpdateApprovalRuleTemplateName
      description: Updates the name of a specified approval rule template.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateApprovalRuleTemplateNameOutput'
        '480':
          description: InvalidApprovalRuleTemplateNameException
          schema:
            $ref: '#/definitions/InvalidApprovalRuleTemplateNameException'
        '481':
          description: ApprovalRuleTemplateNameRequiredException
          schema:
            $ref: '#/definitions/ApprovalRuleTemplateNameRequiredException'
        '482':
          description: ApprovalRuleTemplateDoesNotExistException
          schema:
            $ref: '#/definitions/ApprovalRuleTemplateDoesNotExistException'
        '483':
          description: ApprovalRuleTemplateNameAlreadyExistsException
          schema:
            $ref: '#/definitions/ApprovalRuleTemplateNameAlreadyExistsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateApprovalRuleTemplateNameInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.UpdateApprovalRuleTemplateName
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.UpdateComment':
    post:
      operationId: UpdateComment
      description: Replaces the contents of a comment.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateCommentOutput'
        '480':
          description: CommentContentRequiredException
          schema:
            $ref: '#/definitions/CommentContentRequiredException'
        '481':
          description: CommentContentSizeLimitExceededException
          schema:
            $ref: '#/definitions/CommentContentSizeLimitExceededException'
        '482':
          description: CommentDoesNotExistException
          schema:
            $ref: '#/definitions/CommentDoesNotExistException'
        '483':
          description: CommentIdRequiredException
          schema:
            $ref: '#/definitions/CommentIdRequiredException'
        '484':
          description: InvalidCommentIdException
          schema:
            $ref: '#/definitions/InvalidCommentIdException'
        '485':
          description: CommentNotCreatedByCallerException
          schema:
            $ref: '#/definitions/CommentNotCreatedByCallerException'
        '486':
          description: CommentDeletedException
          schema:
            $ref: '#/definitions/CommentDeletedException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateCommentInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.UpdateComment
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.UpdateDefaultBranch':
    post:
      operationId: UpdateDefaultBranch
      description: '<p>Sets or changes the default branch name for the specified repository.</p> <note> <p>If you use this operation to change the default branch name to the current default branch name, a success message is returned even though the default branch did not change.</p> </note>'
      responses:
        '200':
          description: Success
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '483':
          description: BranchNameRequiredException
          schema:
            $ref: '#/definitions/BranchNameRequiredException'
        '484':
          description: InvalidBranchNameException
          schema:
            $ref: '#/definitions/InvalidBranchNameException'
        '485':
          description: BranchDoesNotExistException
          schema:
            $ref: '#/definitions/BranchDoesNotExistException'
        '486':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '487':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '488':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '489':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '490':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateDefaultBranchInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.UpdateDefaultBranch
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestApprovalRuleContent':
    post:
      operationId: UpdatePullRequestApprovalRuleContent
      description: 'Updates the structure of an approval rule created specifically for a pull request. For example, you can change the number of required approvers and the approval pool for approvers. '
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdatePullRequestApprovalRuleContentOutput'
        '480':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '483':
          description: PullRequestAlreadyClosedException
          schema:
            $ref: '#/definitions/PullRequestAlreadyClosedException'
        '484':
          description: ApprovalRuleNameRequiredException
          schema:
            $ref: '#/definitions/ApprovalRuleNameRequiredException'
        '485':
          description: InvalidApprovalRuleNameException
          schema:
            $ref: '#/definitions/InvalidApprovalRuleNameException'
        '486':
          description: ApprovalRuleDoesNotExistException
          schema:
            $ref: '#/definitions/ApprovalRuleDoesNotExistException'
        '487':
          description: InvalidRuleContentSha256Exception
          schema:
            $ref: '#/definitions/InvalidRuleContentSha256Exception'
        '488':
          description: ApprovalRuleContentRequiredException
          schema:
            $ref: '#/definitions/ApprovalRuleContentRequiredException'
        '489':
          description: InvalidApprovalRuleContentException
          schema:
            $ref: '#/definitions/InvalidApprovalRuleContentException'
        '490':
          description: CannotModifyApprovalRuleFromTemplateException
          schema:
            $ref: '#/definitions/CannotModifyApprovalRuleFromTemplateException'
        '491':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '492':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '493':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '494':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '495':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdatePullRequestApprovalRuleContentInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.UpdatePullRequestApprovalRuleContent
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestApprovalState':
    post:
      operationId: UpdatePullRequestApprovalState
      description: Updates the state of a user's approval on a pull request. The user is derived from the signed-in account when the request is made.
      responses:
        '200':
          description: Success
        '480':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '483':
          description: InvalidRevisionIdException
          schema:
            $ref: '#/definitions/InvalidRevisionIdException'
        '484':
          description: RevisionIdRequiredException
          schema:
            $ref: '#/definitions/RevisionIdRequiredException'
        '485':
          description: InvalidApprovalStateException
          schema:
            $ref: '#/definitions/InvalidApprovalStateException'
        '486':
          description: ApprovalStateRequiredException
          schema:
            $ref: '#/definitions/ApprovalStateRequiredException'
        '487':
          description: PullRequestCannotBeApprovedByAuthorException
          schema:
            $ref: '#/definitions/PullRequestCannotBeApprovedByAuthorException'
        '488':
          description: RevisionNotCurrentException
          schema:
            $ref: '#/definitions/RevisionNotCurrentException'
        '489':
          description: PullRequestAlreadyClosedException
          schema:
            $ref: '#/definitions/PullRequestAlreadyClosedException'
        '490':
          description: MaximumNumberOfApprovalsExceededException
          schema:
            $ref: '#/definitions/MaximumNumberOfApprovalsExceededException'
        '491':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '492':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '493':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '494':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '495':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdatePullRequestApprovalStateInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.UpdatePullRequestApprovalState
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestDescription':
    post:
      operationId: UpdatePullRequestDescription
      description: Replaces the contents of the description of a pull request.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdatePullRequestDescriptionOutput'
        '480':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '483':
          description: InvalidDescriptionException
          schema:
            $ref: '#/definitions/InvalidDescriptionException'
        '484':
          description: PullRequestAlreadyClosedException
          schema:
            $ref: '#/definitions/PullRequestAlreadyClosedException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdatePullRequestDescriptionInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.UpdatePullRequestDescription
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestStatus':
    post:
      operationId: UpdatePullRequestStatus
      description: 'Updates the status of a pull request. '
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdatePullRequestStatusOutput'
        '480':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '483':
          description: InvalidPullRequestStatusUpdateException
          schema:
            $ref: '#/definitions/InvalidPullRequestStatusUpdateException'
        '484':
          description: InvalidPullRequestStatusException
          schema:
            $ref: '#/definitions/InvalidPullRequestStatusException'
        '485':
          description: PullRequestStatusRequiredException
          schema:
            $ref: '#/definitions/PullRequestStatusRequiredException'
        '486':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '487':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '488':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '489':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '490':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdatePullRequestStatusInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.UpdatePullRequestStatus
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.UpdatePullRequestTitle':
    post:
      operationId: UpdatePullRequestTitle
      description: Replaces the title of a pull request.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdatePullRequestTitleOutput'
        '480':
          description: PullRequestDoesNotExistException
          schema:
            $ref: '#/definitions/PullRequestDoesNotExistException'
        '481':
          description: InvalidPullRequestIdException
          schema:
            $ref: '#/definitions/InvalidPullRequestIdException'
        '482':
          description: PullRequestIdRequiredException
          schema:
            $ref: '#/definitions/PullRequestIdRequiredException'
        '483':
          description: TitleRequiredException
          schema:
            $ref: '#/definitions/TitleRequiredException'
        '484':
          description: InvalidTitleException
          schema:
            $ref: '#/definitions/InvalidTitleException'
        '485':
          description: PullRequestAlreadyClosedException
          schema:
            $ref: '#/definitions/PullRequestAlreadyClosedException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdatePullRequestTitleInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.UpdatePullRequestTitle
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.UpdateRepositoryDescription':
    post:
      operationId: UpdateRepositoryDescription
      description: <p>Sets or changes the comment or description for a repository.</p> <note> <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.</p> </note>
      responses:
        '200':
          description: Success
        '480':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '481':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '482':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
        '483':
          description: InvalidRepositoryDescriptionException
          schema:
            $ref: '#/definitions/InvalidRepositoryDescriptionException'
        '484':
          description: EncryptionIntegrityChecksFailedException
          schema:
            $ref: '#/definitions/EncryptionIntegrityChecksFailedException'
        '485':
          description: EncryptionKeyAccessDeniedException
          schema:
            $ref: '#/definitions/EncryptionKeyAccessDeniedException'
        '486':
          description: EncryptionKeyDisabledException
          schema:
            $ref: '#/definitions/EncryptionKeyDisabledException'
        '487':
          description: EncryptionKeyNotFoundException
          schema:
            $ref: '#/definitions/EncryptionKeyNotFoundException'
        '488':
          description: EncryptionKeyUnavailableException
          schema:
            $ref: '#/definitions/EncryptionKeyUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateRepositoryDescriptionInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.UpdateRepositoryDescription
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/#X-Amz-Target=CodeCommit_20150413.UpdateRepositoryName':
    post:
      operationId: UpdateRepositoryName
      description: 'Renames a repository. The repository name must be unique across the calling AWS account. Repository names are limited to 100 alphanumeric, dash, and underscore characters, and cannot include certain characters. The suffix .git is prohibited. For more information about the limits on repository names, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html">Limits</a> in the AWS CodeCommit User Guide.'
      responses:
        '200':
          description: Success
        '480':
          description: RepositoryDoesNotExistException
          schema:
            $ref: '#/definitions/RepositoryDoesNotExistException'
        '481':
          description: RepositoryNameExistsException
          schema:
            $ref: '#/definitions/RepositoryNameExistsException'
        '482':
          description: RepositoryNameRequiredException
          schema:
            $ref: '#/definitions/RepositoryNameRequiredException'
        '483':
          description: InvalidRepositoryNameException
          schema:
            $ref: '#/definitions/InvalidRepositoryNameException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateRepositoryNameInput'
        - name: X-Amz-Target
          in: header
          required: true
          type: string
          enum:
            - CodeCommit_20150413.UpdateRepositoryName
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
definitions:
  AssociateApprovalRuleTemplateWithRepositoryInput:
    type: object
    required:
      - approvalRuleTemplateName
      - repositoryName
    properties:
      approvalRuleTemplateName:
        $ref: '#/definitions/ApprovalRuleTemplateName'
        description: 'The name for the approval rule template. '
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that you want to associate with the template.
  ApprovalRuleTemplateNameRequiredException: {}
  InvalidApprovalRuleTemplateNameException: {}
  ApprovalRuleTemplateDoesNotExistException: {}
  MaximumRuleTemplatesAssociatedWithRepositoryException: {}
  RepositoryNameRequiredException: {}
  InvalidRepositoryNameException: {}
  RepositoryDoesNotExistException: {}
  EncryptionIntegrityChecksFailedException: {}
  EncryptionKeyAccessDeniedException: {}
  EncryptionKeyDisabledException: {}
  EncryptionKeyNotFoundException: {}
  EncryptionKeyUnavailableException: {}
  BatchAssociateApprovalRuleTemplateWithRepositoriesOutput:
    type: object
    required:
      - associatedRepositoryNames
      - errors
    properties:
      associatedRepositoryNames:
        $ref: '#/definitions/RepositoryNameList'
        description: A list of names of the repositories that have been associated with the template.
      errors:
        $ref: '#/definitions/BatchAssociateApprovalRuleTemplateWithRepositoriesErrorsList'
        description: A list of any errors that might have occurred while attempting to create the association between the template and the repositories.
  BatchAssociateApprovalRuleTemplateWithRepositoriesInput:
    type: object
    required:
      - approvalRuleTemplateName
      - repositoryNames
    properties:
      approvalRuleTemplateName:
        $ref: '#/definitions/ApprovalRuleTemplateName'
        description: The name of the template you want to associate with one or more repositories.
      repositoryNames:
        $ref: '#/definitions/RepositoryNameList'
        description: <p>The names of the repositories you want to associate with the template.</p> <note> <p>The length constraint limit is for each string in the array. The array itself can be empty.</p> </note>
  RepositoryNamesRequiredException: {}
  MaximumRepositoryNamesExceededException: {}
  BatchDescribeMergeConflictsOutput:
    type: object
    required:
      - conflicts
      - destinationCommitId
      - sourceCommitId
    properties:
      conflicts:
        $ref: '#/definitions/Conflicts'
        description: 'A list of conflicts for each file, including the conflict metadata and the hunks of the differences between the files.'
      nextToken:
        $ref: '#/definitions/NextToken'
        description: An enumeration token that can be used in a request to return the next batch of the results.
      errors:
        $ref: '#/definitions/BatchDescribeMergeConflictsErrors'
        description: A list of any errors returned while describing the merge conflicts for each file.
      destinationCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the destination commit specifier that was used in the merge evaluation.
      sourceCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the source commit specifier that was used in the merge evaluation.
      baseCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the merge base.
  BatchDescribeMergeConflictsInput:
    type: object
    required:
      - repositoryName
      - destinationCommitSpecifier
      - sourceCommitSpecifier
      - mergeOption
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the merge conflicts you want to review.
      destinationCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
      sourceCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
      mergeOption:
        $ref: '#/definitions/MergeOptionTypeEnum'
        description: The merge option or strategy you want to use to merge the code.
      maxMergeHunks:
        $ref: '#/definitions/MaxResults'
        description: The maximum number of merge hunks to include in the output.
      maxConflictFiles:
        $ref: '#/definitions/MaxResults'
        description: The maximum number of files to include in the output.
      filePaths:
        $ref: '#/definitions/FilePaths'
        description: 'The path of the target files used to describe the conflicts. If not specified, the default is all conflict files.'
      conflictDetailLevel:
        $ref: '#/definitions/ConflictDetailLevelTypeEnum'
        description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.'
      conflictResolutionStrategy:
        $ref: '#/definitions/ConflictResolutionStrategyTypeEnum'
        description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.'
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'An enumeration token that, when provided in a request, returns the next batch of the results.'
  MergeOptionRequiredException: {}
  InvalidMergeOptionException: {}
  InvalidContinuationTokenException: {}
  CommitRequiredException: {}
  CommitDoesNotExistException: {}
  InvalidCommitException: {}
  TipsDivergenceExceededException: {}
  InvalidMaxConflictFilesException: {}
  InvalidMaxMergeHunksException: {}
  InvalidConflictDetailLevelException: {}
  InvalidConflictResolutionStrategyException: {}
  MaximumFileContentToLoadExceededException: {}
  MaximumItemsToCompareExceededException: {}
  BatchDisassociateApprovalRuleTemplateFromRepositoriesOutput:
    type: object
    required:
      - disassociatedRepositoryNames
      - errors
    properties:
      disassociatedRepositoryNames:
        $ref: '#/definitions/RepositoryNameList'
        description: A list of repository names that have had their association with the template removed.
      errors:
        $ref: '#/definitions/BatchDisassociateApprovalRuleTemplateFromRepositoriesErrorsList'
        description: A list of any errors that might have occurred while attempting to remove the association between the template and the repositories.
  BatchDisassociateApprovalRuleTemplateFromRepositoriesInput:
    type: object
    required:
      - approvalRuleTemplateName
      - repositoryNames
    properties:
      approvalRuleTemplateName:
        $ref: '#/definitions/ApprovalRuleTemplateName'
        description: The name of the template that you want to disassociate from one or more repositories.
      repositoryNames:
        $ref: '#/definitions/RepositoryNameList'
        description: <p>The repository names that you want to disassociate from the approval rule template.</p> <note> <p>The length constraint limit is for each string in the array. The array itself can be empty.</p> </note>
  BatchGetCommitsOutput:
    type: object
    properties:
      commits:
        $ref: '#/definitions/CommitObjectsList'
        description: 'An array of commit data type objects, each of which contains information about a specified commit.'
      errors:
        $ref: '#/definitions/BatchGetCommitsErrorsList'
        description: 'Returns any commit IDs for which information could not be found. For example, if one of the commit IDs was a shortened SHA ID or that commit was not found in the specified repository, the ID returns an error object with more information.'
  BatchGetCommitsInput:
    type: object
    required:
      - commitIds
      - repositoryName
    properties:
      commitIds:
        $ref: '#/definitions/CommitIdsInputList'
        description: <p>The full commit IDs of the commits to get information about.</p> <note> <p>You must supply the full SHA IDs of each commit. You cannot use shortened SHA IDs.</p> </note>
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the commits.
  CommitIdsListRequiredException: {}
  CommitIdsLimitExceededException: {}
  BatchGetRepositoriesOutput:
    type: object
    properties:
      repositories:
        $ref: '#/definitions/RepositoryMetadataList'
        description: A list of repositories returned by the batch get repositories operation.
      repositoriesNotFound:
        $ref: '#/definitions/RepositoryNotFoundList'
        description: Returns a list of repository names for which information could not be found.
    description: Represents the output of a batch get repositories operation.
  BatchGetRepositoriesInput:
    type: object
    required:
      - repositoryNames
    properties:
      repositoryNames:
        $ref: '#/definitions/RepositoryNameList'
        description: <p>The names of the repositories to get information about.</p> <note> <p>The length constraint limit is for each string in the array. The array itself can be empty.</p> </note>
    description: Represents the input of a batch get repositories operation.
  CreateApprovalRuleTemplateOutput:
    type: object
    required:
      - approvalRuleTemplate
    properties:
      approvalRuleTemplate:
        $ref: '#/definitions/ApprovalRuleTemplate'
        description: The content and structure of the created approval rule template.
  CreateApprovalRuleTemplateInput:
    type: object
    required:
      - approvalRuleTemplateName
      - approvalRuleTemplateContent
    properties:
      approvalRuleTemplateName:
        $ref: '#/definitions/ApprovalRuleTemplateName'
        description: 'The name of the approval rule template. Provide descriptive names, because this name is applied to the approval rules created automatically in associated repositories.'
      approvalRuleTemplateContent:
        $ref: '#/definitions/ApprovalRuleTemplateContent'
        description: '<p>The content of the approval rule that is created on pull requests in associated repositories. If you specify one or more destination references (branches), approval rules are created in an associated repository only if their destination references (branches) match those specified in the template.</p> <note> <p>When you create the content of the approval rule template, you can specify approvers in an approval pool in one of two ways:</p> <ul> <li> <p> <b>CodeCommitApprovers</b>: This option only requires an AWS account and a resource. It can be used for both IAM users and federated access users whose name matches the provided resource name. This is a very powerful option that offers a great deal of flexibility. For example, if you specify the AWS account <i>123456789012</i> and <i>Mary_Major</i>, all of the following are counted as approvals coming from that user:</p> <ul> <li> <p>An IAM user in the account (arn:aws:iam::<i>123456789012</i>:user/<i>Mary_Major</i>)</p> </li> <li> <p>A federated user identified in IAM as Mary_Major (arn:aws:sts::<i>123456789012</i>:federated-user/<i>Mary_Major</i>)</p> </li> </ul> <p>This option does not recognize an active session of someone assuming the role of CodeCommitReview with a role session name of <i>Mary_Major</i> (arn:aws:sts::<i>123456789012</i>:assumed-role/CodeCommitReview/<i>Mary_Major</i>) unless you include a wildcard (*Mary_Major).</p> </li> <li> <p> <b>Fully qualified ARN</b>: This option allows you to specify the fully qualified Amazon Resource Name (ARN) of the IAM user or role. </p> </li> </ul> <p>For more information about IAM ARNs, wildcards, and formats, see <a href="https://docs.aws.amazon.com/iam/latest/UserGuide/reference_identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> </note>'
      approvalRuleTemplateDescription:
        $ref: '#/definitions/ApprovalRuleTemplateDescription'
        description: The description of the approval rule template. Consider providing a description that explains what this template does and when it might be appropriate to associate it with repositories.
  ApprovalRuleTemplateNameAlreadyExistsException: {}
  ApprovalRuleTemplateContentRequiredException: {}
  InvalidApprovalRuleTemplateContentException: {}
  InvalidApprovalRuleTemplateDescriptionException: {}
  NumberOfRuleTemplatesExceededException: {}
  CreateBranchInput:
    type: object
    required:
      - repositoryName
      - branchName
      - commitId
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository in which you want to create the new branch.
      branchName:
        $ref: '#/definitions/BranchName'
        description: The name of the new branch to create.
      commitId:
        $ref: '#/definitions/CommitId'
        description: The ID of the commit to point the new branch to.
    description: Represents the input of a create branch operation.
  BranchNameRequiredException: {}
  BranchNameExistsException: {}
  InvalidBranchNameException: {}
  CommitIdRequiredException: {}
  InvalidCommitIdException: {}
  CreateCommitOutput:
    type: object
    properties:
      commitId:
        $ref: '#/definitions/ObjectId'
        description: The full commit ID of the commit that contains your committed file changes.
      treeId:
        $ref: '#/definitions/ObjectId'
        description: The full SHA-1 pointer of the tree information for the commit that contains the commited file changes.
      filesAdded:
        $ref: '#/definitions/FilesMetadata'
        description: The files added as part of the committed file changes.
      filesUpdated:
        $ref: '#/definitions/FilesMetadata'
        description: The files updated as part of the commited file changes.
      filesDeleted:
        $ref: '#/definitions/FilesMetadata'
        description: The files deleted as part of the committed file changes.
  CreateCommitInput:
    type: object
    required:
      - repositoryName
      - branchName
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you create the commit.
      branchName:
        $ref: '#/definitions/BranchName'
        description: The name of the branch where you create the commit.
      parentCommitId:
        $ref: '#/definitions/CommitId'
        description: The ID of the commit that is the parent of the commit you create. Not required if this is an empty repository.
      authorName:
        $ref: '#/definitions/Name'
        description: The name of the author who created the commit. This information is used as both the author and committer for the commit.
      email:
        $ref: '#/definitions/Email'
        description: The email address of the person who created the commit.
      commitMessage:
        $ref: '#/definitions/Message'
        description: 'The commit message you want to include in the commit. Commit messages are limited to 256 KB. If no message is specified, a default message is used.'
      keepEmptyFolders:
        $ref: '#/definitions/KeepEmptyFolders'
        description: 'If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If true, a ..gitkeep file is created for empty folders. The default is false.'
      putFiles:
        $ref: '#/definitions/PutFileEntries'
        description: The files to add or update in this commit.
      deleteFiles:
        $ref: '#/definitions/DeleteFileEntries'
        description: The files to delete in this commit. These files still exist in earlier commits.
      setFileModes:
        $ref: '#/definitions/SetFileModeEntries'
        description: The file modes to update for files in this commit.
  ParentCommitIdRequiredException: {}
  InvalidParentCommitIdException: {}
  ParentCommitDoesNotExistException: {}
  ParentCommitIdOutdatedException: {}
  BranchDoesNotExistException: {}
  BranchNameIsTagNameException: {}
  FileEntryRequiredException: {}
  MaximumFileEntriesExceededException: {}
  PutFileEntryConflictException: {}
  SourceFileOrContentRequiredException: {}
  FileContentAndSourceFileSpecifiedException: {}
  PathRequiredException: {}
  InvalidPathException: {}
  SamePathRequestException: {}
  FileDoesNotExistException: {}
  FileContentSizeLimitExceededException: {}
  FolderContentSizeLimitExceededException: {}
  InvalidDeletionParameterException: {}
  RestrictedSourceFileException: {}
  FileModeRequiredException: {}
  InvalidFileModeException: {}
  NameLengthExceededException: {}
  InvalidEmailException: {}
  CommitMessageLengthExceededException: {}
  NoChangeException: {}
  FileNameConflictsWithDirectoryNameException: {}
  DirectoryNameConflictsWithFileNameException: {}
  FilePathConflictsWithSubmodulePathException: {}
  CreatePullRequestOutput:
    type: object
    required:
      - pullRequest
    properties:
      pullRequest:
        $ref: '#/definitions/PullRequest'
        description: Information about the newly created pull request.
  CreatePullRequestInput:
    type: object
    required:
      - title
      - targets
    properties:
      title:
        $ref: '#/definitions/Title'
        description: The title of the pull request. This title is used to identify the pull request to other users in the repository.
      description:
        $ref: '#/definitions/Description'
        description: A description of the pull request.
      targets:
        $ref: '#/definitions/TargetList'
        description: 'The targets for the pull request, including the source of the code to be reviewed (the source branch) and the destination where the creator of the pull request intends the code to be merged after the pull request is closed (the destination branch).'
      clientRequestToken:
        $ref: '#/definitions/ClientRequestToken'
        description: '<p>A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.</p> <note> <p>The AWS SDKs prepopulate client request tokens. If you are using an AWS SDK, an idempotency token is created for you.</p> </note>'
  ClientRequestTokenRequiredException: {}
  InvalidClientRequestTokenException: {}
  IdempotencyParameterMismatchException: {}
  ReferenceNameRequiredException: {}
  InvalidReferenceNameException: {}
  ReferenceDoesNotExistException: {}
  ReferenceTypeNotSupportedException: {}
  TitleRequiredException: {}
  InvalidTitleException: {}
  InvalidDescriptionException: {}
  TargetsRequiredException: {}
  InvalidTargetsException: {}
  TargetRequiredException: {}
  InvalidTargetException: {}
  MultipleRepositoriesInPullRequestException: {}
  MaximumOpenPullRequestsExceededException: {}
  SourceAndDestinationAreSameException: {}
  CreatePullRequestApprovalRuleOutput:
    type: object
    required:
      - approvalRule
    properties:
      approvalRule:
        $ref: '#/definitions/ApprovalRule'
        description: Information about the created approval rule.
  CreatePullRequestApprovalRuleInput:
    type: object
    required:
      - pullRequestId
      - approvalRuleName
      - approvalRuleContent
    properties:
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: The system-generated ID of the pull request for which you want to create the approval rule.
      approvalRuleName:
        $ref: '#/definitions/ApprovalRuleName'
        description: The name for the approval rule.
      approvalRuleContent:
        $ref: '#/definitions/ApprovalRuleContent'
        description: '<p>The content of the approval rule, including the number of approvals needed and the structure of an approval pool defined for approvals, if any. For more information about approval pools, see the AWS CodeCommit User Guide.</p> <note> <p>When you create the content of the approval rule, you can specify approvers in an approval pool in one of two ways:</p> <ul> <li> <p> <b>CodeCommitApprovers</b>: This option only requires an AWS account and a resource. It can be used for both IAM users and federated access users whose name matches the provided resource name. This is a very powerful option that offers a great deal of flexibility. For example, if you specify the AWS account <i>123456789012</i> and <i>Mary_Major</i>, all of the following would be counted as approvals coming from that user:</p> <ul> <li> <p>An IAM user in the account (arn:aws:iam::<i>123456789012</i>:user/<i>Mary_Major</i>)</p> </li> <li> <p>A federated user identified in IAM as Mary_Major (arn:aws:sts::<i>123456789012</i>:federated-user/<i>Mary_Major</i>)</p> </li> </ul> <p>This option does not recognize an active session of someone assuming the role of CodeCommitReview with a role session name of <i>Mary_Major</i> (arn:aws:sts::<i>123456789012</i>:assumed-role/CodeCommitReview/<i>Mary_Major</i>) unless you include a wildcard (*Mary_Major).</p> </li> <li> <p> <b>Fully qualified ARN</b>: This option allows you to specify the fully qualified Amazon Resource Name (ARN) of the IAM user or role. </p> </li> </ul> <p>For more information about IAM ARNs, wildcards, and formats, see <a href="https://docs.aws.amazon.com/iam/latest/UserGuide/reference_identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> </note>'
  ApprovalRuleNameRequiredException: {}
  InvalidApprovalRuleNameException: {}
  ApprovalRuleNameAlreadyExistsException: {}
  ApprovalRuleContentRequiredException: {}
  InvalidApprovalRuleContentException: {}
  NumberOfRulesExceededException: {}
  PullRequestDoesNotExistException: {}
  InvalidPullRequestIdException: {}
  PullRequestIdRequiredException: {}
  PullRequestAlreadyClosedException: {}
  CreateRepositoryOutput:
    type: object
    properties:
      repositoryMetadata:
        $ref: '#/definitions/RepositoryMetadata'
        description: Information about the newly created repository.
    description: Represents the output of a create repository operation.
  CreateRepositoryInput:
    type: object
    required:
      - repositoryName
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: '<p>The name of the new repository to be created.</p> <note> <p>The repository name must be unique across the calling AWS account. Repository names are limited to 100 alphanumeric, dash, and underscore characters, and cannot include certain characters. For more information about the limits on repository names, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/limits.html">Limits</a> in the <i>AWS CodeCommit User Guide</i>. The suffix .git is prohibited.</p> </note>'
      repositoryDescription:
        $ref: '#/definitions/RepositoryDescription'
        description: <p>A comment or description about the new repository.</p> <note> <p>The description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.</p> </note>
      tags:
        $ref: '#/definitions/TagsMap'
        description: One or more tag key-value pairs to use when tagging this repository.
    description: Represents the input of a create repository operation.
  RepositoryNameExistsException: {}
  InvalidRepositoryDescriptionException: {}
  RepositoryLimitExceededException: {}
  InvalidTagsMapException: {}
  TooManyTagsException: {}
  InvalidSystemTagUsageException: {}
  TagPolicyException: {}
  CreateUnreferencedMergeCommitOutput:
    type: object
    properties:
      commitId:
        $ref: '#/definitions/ObjectId'
        description: The full commit ID of the commit that contains your merge results.
      treeId:
        $ref: '#/definitions/ObjectId'
        description: The full SHA-1 pointer of the tree information for the commit that contains the merge results.
  CreateUnreferencedMergeCommitInput:
    type: object
    required:
      - repositoryName
      - sourceCommitSpecifier
      - destinationCommitSpecifier
      - mergeOption
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you want to create the unreferenced merge commit.
      sourceCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
      destinationCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
      mergeOption:
        $ref: '#/definitions/MergeOptionTypeEnum'
        description: The merge option or strategy you want to use to merge the code.
      conflictDetailLevel:
        $ref: '#/definitions/ConflictDetailLevelTypeEnum'
        description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.'
      conflictResolutionStrategy:
        $ref: '#/definitions/ConflictResolutionStrategyTypeEnum'
        description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.'
      authorName:
        $ref: '#/definitions/Name'
        description: The name of the author who created the unreferenced commit. This information is used as both the author and committer for the commit.
      email:
        $ref: '#/definitions/Email'
        description: The email address for the person who created the unreferenced commit.
      commitMessage:
        $ref: '#/definitions/Message'
        description: The commit message for the unreferenced commit.
      keepEmptyFolders:
        $ref: '#/definitions/KeepEmptyFolders'
        description: 'If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If this is specified as true, a .gitkeep file is created for empty folders. The default is false.'
      conflictResolution:
        $ref: '#/definitions/ConflictResolution'
        description: 'If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge.'
  InvalidConflictResolutionException: {}
  ManualMergeRequiredException: {}
  MaximumConflictResolutionEntriesExceededException: {}
  MultipleConflictResolutionEntriesException: {}
  ReplacementTypeRequiredException: {}
  InvalidReplacementTypeException: {}
  ReplacementContentRequiredException: {}
  InvalidReplacementContentException: {}
  ConcurrentReferenceUpdateException: {}
  DeleteApprovalRuleTemplateOutput:
    type: object
    required:
      - approvalRuleTemplateId
    properties:
      approvalRuleTemplateId:
        $ref: '#/definitions/ApprovalRuleTemplateId'
        description: 'The system-generated ID of the deleted approval rule template. If the template has been previously deleted, the only response is a 200 OK.'
  DeleteApprovalRuleTemplateInput:
    type: object
    required:
      - approvalRuleTemplateName
    properties:
      approvalRuleTemplateName:
        $ref: '#/definitions/ApprovalRuleTemplateName'
        description: The name of the approval rule template to delete.
  ApprovalRuleTemplateInUseException: {}
  DeleteBranchOutput:
    type: object
    properties:
      deletedBranch:
        $ref: '#/definitions/BranchInfo'
        description: 'Information about the branch deleted by the operation, including the branch name and the commit ID that was the tip of the branch.'
    description: Represents the output of a delete branch operation.
  DeleteBranchInput:
    type: object
    required:
      - repositoryName
      - branchName
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the branch to be deleted.
      branchName:
        $ref: '#/definitions/BranchName'
        description: The name of the branch to delete.
    description: Represents the input of a delete branch operation.
  DefaultBranchCannotBeDeletedException: {}
  DeleteCommentContentOutput:
    type: object
    properties:
      comment:
        $ref: '#/definitions/Comment'
        description: Information about the comment you just deleted.
  DeleteCommentContentInput:
    type: object
    required:
      - commentId
    properties:
      commentId:
        $ref: '#/definitions/CommentId'
        description: 'The unique, system-generated ID of the comment. To get this ID, use <a>GetCommentsForComparedCommit</a> or <a>GetCommentsForPullRequest</a>.'
  CommentDoesNotExistException: {}
  CommentIdRequiredException: {}
  InvalidCommentIdException: {}
  CommentDeletedException: {}
  DeleteFileOutput:
    type: object
    required:
      - commitId
      - blobId
      - treeId
      - filePath
    properties:
      commitId:
        $ref: '#/definitions/ObjectId'
        description: The full commit ID of the commit that contains the change that deletes the file.
      blobId:
        $ref: '#/definitions/ObjectId'
        description: The blob ID removed from the tree as part of deleting the file.
      treeId:
        $ref: '#/definitions/ObjectId'
        description: The full SHA-1 pointer of the tree information for the commit that contains the delete file change.
      filePath:
        $ref: '#/definitions/Path'
        description: 'The fully qualified path to the file to be deleted, including the full name and extension of that file.'
  DeleteFileInput:
    type: object
    required:
      - repositoryName
      - branchName
      - filePath
      - parentCommitId
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the file to delete.
      branchName:
        $ref: '#/definitions/BranchName'
        description: The name of the branch where the commit that deletes the file is made.
      filePath:
        $ref: '#/definitions/Path'
        description: 'The fully qualified path to the file that to be deleted, including the full name and extension of that file. For example, /examples/file.md is a fully qualified path to a file named file.md in a folder named examples.'
      parentCommitId:
        $ref: '#/definitions/CommitId'
        description: The ID of the commit that is the tip of the branch where you want to create the commit that deletes the file. This must be the HEAD commit for the branch. The commit that deletes the file is created from this commit ID.
      keepEmptyFolders:
        $ref: '#/definitions/KeepEmptyFolders'
        description: 'If a file is the only object in the folder or directory, specifies whether to delete the folder or directory that contains the file. By default, empty folders are deleted. This includes empty folders that are part of the directory structure. For example, if the path to a file is dir1/dir2/dir3/dir4, and dir2 and dir3 are empty, deleting the last file in dir4 also deletes the empty folders dir4, dir3, and dir2.'
      commitMessage:
        $ref: '#/definitions/Message'
        description: 'The commit message you want to include as part of deleting the file. Commit messages are limited to 256 KB. If no message is specified, a default message is used.'
      name:
        $ref: '#/definitions/Name'
        description: 'The name of the author of the commit that deletes the file. If no name is specified, the user''s ARN is used as the author name and committer name.'
      email:
        $ref: '#/definitions/Email'
        description: 'The email address for the commit that deletes the file. If no email address is specified, the email address is left blank.'
  DeletePullRequestApprovalRuleOutput:
    type: object
    required:
      - approvalRuleId
    properties:
      approvalRuleId:
        $ref: '#/definitions/ApprovalRuleId'
        description: '<p>The ID of the deleted approval rule. </p> <note> <p>If the approval rule was deleted in an earlier API call, the response is 200 OK without content.</p> </note>'
  DeletePullRequestApprovalRuleInput:
    type: object
    required:
      - pullRequestId
      - approvalRuleName
    properties:
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: The system-generated ID of the pull request that contains the approval rule you want to delete.
      approvalRuleName:
        $ref: '#/definitions/ApprovalRuleName'
        description: The name of the approval rule you want to delete.
  CannotDeleteApprovalRuleFromTemplateException: {}
  DeleteRepositoryOutput:
    type: object
    properties:
      repositoryId:
        $ref: '#/definitions/RepositoryId'
        description: The ID of the repository that was deleted.
    description: Represents the output of a delete repository operation.
  DeleteRepositoryInput:
    type: object
    required:
      - repositoryName
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository to delete.
    description: Represents the input of a delete repository operation.
  DescribeMergeConflictsOutput:
    type: object
    required:
      - conflictMetadata
      - mergeHunks
      - destinationCommitId
      - sourceCommitId
    properties:
      conflictMetadata:
        $ref: '#/definitions/ConflictMetadata'
        description: Contains metadata about the conflicts found in the merge.
      mergeHunks:
        $ref: '#/definitions/MergeHunks'
        description: A list of merge hunks of the differences between the files or lines.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: An enumeration token that can be used in a request to return the next batch of the results.
      destinationCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the destination commit specifier that was used in the merge evaluation.
      sourceCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the source commit specifier that was used in the merge evaluation.
      baseCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the merge base.
  DescribeMergeConflictsInput:
    type: object
    required:
      - repositoryName
      - destinationCommitSpecifier
      - sourceCommitSpecifier
      - mergeOption
      - filePath
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you want to get information about a merge conflict.
      destinationCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
      sourceCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
      mergeOption:
        $ref: '#/definitions/MergeOptionTypeEnum'
        description: The merge option or strategy you want to use to merge the code.
      maxMergeHunks:
        $ref: '#/definitions/MaxResults'
        description: The maximum number of merge hunks to include in the output.
      filePath:
        $ref: '#/definitions/Path'
        description: 'The path of the target files used to describe the conflicts. '
      conflictDetailLevel:
        $ref: '#/definitions/ConflictDetailLevelTypeEnum'
        description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.'
      conflictResolutionStrategy:
        $ref: '#/definitions/ConflictResolutionStrategyTypeEnum'
        description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.'
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'An enumeration token that, when provided in a request, returns the next batch of the results.'
  DescribePullRequestEventsOutput:
    type: object
    required:
      - pullRequestEvents
    properties:
      pullRequestEvents:
        $ref: '#/definitions/PullRequestEventList'
        description: Information about the pull request events.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: An enumeration token that can be used in a request to return the next batch of the results.
  DescribePullRequestEventsInput:
    type: object
    required:
      - pullRequestId
    properties:
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
      pullRequestEventType:
        $ref: '#/definitions/PullRequestEventType'
        description: Optional. The pull request event type about which you want to return information.
      actorArn:
        $ref: '#/definitions/Arn'
        description: The Amazon Resource Name (ARN) of the user whose actions resulted in the event. Examples include updating the pull request with more commits or changing the status of a pull request.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'An enumeration token that, when provided in a request, returns the next batch of the results.'
      maxResults:
        $ref: '#/definitions/MaxResults'
        description: 'A non-zero, non-negative integer used to limit the number of returned results. The default is 100 events, which is also the maximum number of events that can be returned in a result.'
  InvalidPullRequestEventTypeException: {}
  InvalidActorArnException: {}
  ActorDoesNotExistException: {}
  InvalidMaxResultsException: {}
  DisassociateApprovalRuleTemplateFromRepositoryInput:
    type: object
    required:
      - approvalRuleTemplateName
      - repositoryName
    properties:
      approvalRuleTemplateName:
        $ref: '#/definitions/ApprovalRuleTemplateName'
        description: The name of the approval rule template to disassociate from a specified repository.
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository you want to disassociate from the template.
  EvaluatePullRequestApprovalRulesOutput:
    type: object
    required:
      - evaluation
    properties:
      evaluation:
        $ref: '#/definitions/Evaluation'
        description: 'The result of the evaluation, including the names of the rules whose conditions have been met (if any), the names of the rules whose conditions have not been met (if any), whether the pull request is in the approved state, and whether the pull request approval rule has been set aside by an override. '
  EvaluatePullRequestApprovalRulesInput:
    type: object
    required:
      - pullRequestId
      - revisionId
    properties:
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: The system-generated ID of the pull request you want to evaluate.
      revisionId:
        $ref: '#/definitions/RevisionId'
        description: 'The system-generated ID for the pull request revision. To retrieve the most recent revision ID for a pull request, use <a>GetPullRequest</a>.'
  InvalidRevisionIdException: {}
  RevisionIdRequiredException: {}
  RevisionNotCurrentException: {}
  GetApprovalRuleTemplateOutput:
    type: object
    required:
      - approvalRuleTemplate
    properties:
      approvalRuleTemplate:
        $ref: '#/definitions/ApprovalRuleTemplate'
        description: The content and structure of the approval rule template.
  GetApprovalRuleTemplateInput:
    type: object
    required:
      - approvalRuleTemplateName
    properties:
      approvalRuleTemplateName:
        $ref: '#/definitions/ApprovalRuleTemplateName'
        description: The name of the approval rule template for which you want to get information.
  GetBlobOutput:
    type: object
    required:
      - content
    properties:
      content:
        $ref: '#/definitions/blob'
        description: 'The content of the blob, usually a file.'
    description: Represents the output of a get blob operation.
  GetBlobInput:
    type: object
    required:
      - repositoryName
      - blobId
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the blob.
      blobId:
        $ref: '#/definitions/ObjectId'
        description: 'The ID of the blob, which is its SHA-1 pointer.'
    description: Represents the input of a get blob operation.
  BlobIdRequiredException: {}
  InvalidBlobIdException: {}
  BlobIdDoesNotExistException: {}
  FileTooLargeException: {}
  GetBranchOutput:
    type: object
    properties:
      branch:
        $ref: '#/definitions/BranchInfo'
        description: The name of the branch.
    description: Represents the output of a get branch operation.
  GetBranchInput:
    type: object
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the branch for which you want to retrieve information.
      branchName:
        $ref: '#/definitions/BranchName'
        description: The name of the branch for which you want to retrieve information.
    description: Represents the input of a get branch operation.
  GetCommentOutput:
    type: object
    properties:
      comment:
        $ref: '#/definitions/Comment'
        description: The contents of the comment.
  GetCommentInput:
    type: object
    required:
      - commentId
    properties:
      commentId:
        $ref: '#/definitions/CommentId'
        description: 'The unique, system-generated ID of the comment. To get this ID, use <a>GetCommentsForComparedCommit</a> or <a>GetCommentsForPullRequest</a>.'
  GetCommentsForComparedCommitOutput:
    type: object
    properties:
      commentsForComparedCommitData:
        $ref: '#/definitions/CommentsForComparedCommitData'
        description: A list of comment objects on the compared commit.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: An enumeration token that can be used in a request to return the next batch of the results.
  GetCommentsForComparedCommitInput:
    type: object
    required:
      - repositoryName
      - afterCommitId
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you want to compare commits.
      beforeCommitId:
        $ref: '#/definitions/CommitId'
        description: 'To establish the directionality of the comparison, the full commit ID of the before commit.'
      afterCommitId:
        $ref: '#/definitions/CommitId'
        description: 'To establish the directionality of the comparison, the full commit ID of the after commit.'
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'An enumeration token that when provided in a request, returns the next batch of the results. '
      maxResults:
        $ref: '#/definitions/MaxResults'
        description: 'A non-zero, non-negative integer used to limit the number of returned results. The default is 100 comments, but you can configure up to 500.'
  GetCommentsForPullRequestOutput:
    type: object
    properties:
      commentsForPullRequestData:
        $ref: '#/definitions/CommentsForPullRequestData'
        description: An array of comment objects on the pull request.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: An enumeration token that can be used in a request to return the next batch of the results.
  GetCommentsForPullRequestInput:
    type: object
    required:
      - pullRequestId
    properties:
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the pull request.
      beforeCommitId:
        $ref: '#/definitions/CommitId'
        description: The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was created.
      afterCommitId:
        $ref: '#/definitions/CommitId'
        description: The full commit ID of the commit in the source branch that was the tip of the branch at the time the comment was made.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'An enumeration token that, when provided in a request, returns the next batch of the results.'
      maxResults:
        $ref: '#/definitions/MaxResults'
        description: 'A non-zero, non-negative integer used to limit the number of returned results. The default is 100 comments. You can return up to 500 comments with a single request.'
  RepositoryNotAssociatedWithPullRequestException: {}
  GetCommitOutput:
    type: object
    required:
      - commit
    properties:
      commit:
        $ref: '#/definitions/Commit'
        description: A commit data type object that contains information about the specified commit.
    description: Represents the output of a get commit operation.
  GetCommitInput:
    type: object
    required:
      - repositoryName
      - commitId
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository to which the commit was made.
      commitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID. Commit IDs are the full SHA ID of the commit.
    description: Represents the input of a get commit operation.
  CommitIdDoesNotExistException: {}
  GetDifferencesOutput:
    type: object
    properties:
      differences:
        $ref: '#/definitions/DifferenceList'
        description: 'A data type object that contains information about the differences, including whether the difference is added, modified, or deleted (A, D, M).'
      NextToken:
        $ref: '#/definitions/NextToken'
        description: An enumeration token that can be used in a request to return the next batch of the results.
  GetDifferencesInput:
    type: object
    required:
      - repositoryName
      - afterCommitSpecifier
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you want to get differences.
      beforeCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, the full commit ID). Optional. If not specified, all changes before the <code>afterCommitSpecifier</code> value are shown. If you do not use <code>beforeCommitSpecifier</code> in your request, consider limiting the results with <code>maxResults</code>.'
      afterCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit.'
      beforePath:
        $ref: '#/definitions/Path'
        description: 'The file path in which to check for differences. Limits the results to this path. Can also be used to specify the previous name of a directory or folder. If <code>beforePath</code> and <code>afterPath</code> are not specified, differences are shown for all paths.'
      afterPath:
        $ref: '#/definitions/Path'
        description: 'The file path in which to check differences. Limits the results to this path. Can also be used to specify the changed name of a directory or folder, if it has changed. If not specified, differences are shown for all paths.'
      MaxResults:
        $ref: '#/definitions/Limit'
        description: 'A non-zero, non-negative integer used to limit the number of returned results.'
      NextToken:
        $ref: '#/definitions/NextToken'
        description: 'An enumeration token that, when provided in a request, returns the next batch of the results.'
  PathDoesNotExistException: {}
  GetFileOutput:
    type: object
    required:
      - commitId
      - blobId
      - filePath
      - fileMode
      - fileSize
      - fileContent
    properties:
      commitId:
        $ref: '#/definitions/ObjectId'
        description: The full commit ID of the commit that contains the content returned by GetFile.
      blobId:
        $ref: '#/definitions/ObjectId'
        description: The blob ID of the object that represents the file content.
      filePath:
        $ref: '#/definitions/Path'
        description: The fully qualified path to the specified file. Returns the name and extension of the file.
      fileMode:
        $ref: '#/definitions/FileModeTypeEnum'
        description: '<p>The extrapolated file mode permissions of the blob. Valid values include strings such as EXECUTABLE and not numeric values.</p> <note> <p>The file mode permissions returned by this API are not the standard file mode permission values, such as 100644, but rather extrapolated values. See the supported return values.</p> </note>'
      fileSize:
        $ref: '#/definitions/ObjectSize'
        description: 'The size of the contents of the file, in bytes.'
      fileContent:
        $ref: '#/definitions/FileContent'
        description: The base-64 encoded binary data object that represents the content of the file.
  GetFileInput:
    type: object
    required:
      - repositoryName
      - filePath
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the file.
      commitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The fully quaified reference that identifies the commit that contains the file. For example, you can specify a full commit ID, a tag, a branch name, or a reference such as refs/heads/master. If none is provided, the head commit is used.'
      filePath:
        $ref: '#/definitions/Path'
        description: 'The fully qualified path to the file, including the full name and extension of the file. For example, /examples/file.md is the fully qualified path to a file named file.md in a folder named examples.'
  GetFolderOutput:
    type: object
    required:
      - commitId
      - folderPath
    properties:
      commitId:
        $ref: '#/definitions/ObjectId'
        description: The full commit ID used as a reference for the returned version of the folder content.
      folderPath:
        $ref: '#/definitions/Path'
        description: The fully qualified path of the folder whose contents are returned.
      treeId:
        $ref: '#/definitions/ObjectId'
        description: The full SHA-1 pointer of the tree information for the commit that contains the folder.
      subFolders:
        $ref: '#/definitions/FolderList'
        description: 'The list of folders that exist under the specified folder, if any.'
      files:
        $ref: '#/definitions/FileList'
        description: 'The list of files in the specified folder, if any.'
      symbolicLinks:
        $ref: '#/definitions/SymbolicLinkList'
        description: 'The list of symbolic links to other files and folders in the specified folder, if any.'
      subModules:
        $ref: '#/definitions/SubModuleList'
        description: 'The list of submodules in the specified folder, if any.'
  GetFolderInput:
    type: object
    required:
      - repositoryName
      - folderPath
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository.
      commitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'A fully qualified reference used to identify a commit that contains the version of the folder''s content to return. A fully qualified reference can be a commit ID, branch name, tag, or reference such as HEAD. If no specifier is provided, the folder content is returned as it exists in the HEAD commit.'
      folderPath:
        $ref: '#/definitions/Path'
        description: 'The fully qualified path to the folder whose contents are returned, including the folder name. For example, /examples is a fully-qualified path to a folder named examples that was created off of the root directory (/) of a repository. '
  FolderDoesNotExistException: {}
  GetMergeCommitOutput:
    type: object
    properties:
      sourceCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the source commit specifier that was used in the merge evaluation.
      destinationCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the destination commit specifier that was used in the merge evaluation.
      baseCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the merge base.
      mergedCommitId:
        $ref: '#/definitions/ObjectId'
        description: 'The commit ID for the merge commit created when the source branch was merged into the destination branch. If the fast-forward merge strategy was used, there is no merge commit.'
  GetMergeCommitInput:
    type: object
    required:
      - repositoryName
      - sourceCommitSpecifier
      - destinationCommitSpecifier
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the merge commit about which you want to get information.
      sourceCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
      destinationCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
      conflictDetailLevel:
        $ref: '#/definitions/ConflictDetailLevelTypeEnum'
        description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.'
      conflictResolutionStrategy:
        $ref: '#/definitions/ConflictResolutionStrategyTypeEnum'
        description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.'
  GetMergeConflictsOutput:
    type: object
    required:
      - mergeable
      - destinationCommitId
      - sourceCommitId
      - conflictMetadataList
    properties:
      mergeable:
        $ref: '#/definitions/IsMergeable'
        description: A Boolean value that indicates whether the code is mergeable by the specified merge option.
      destinationCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the destination commit specifier that was used in the merge evaluation.
      sourceCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the source commit specifier that was used in the merge evaluation.
      baseCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the merge base.
      conflictMetadataList:
        $ref: '#/definitions/ConflictMetadataList'
        description: 'A list of metadata for any conflicting files. If the specified merge strategy is FAST_FORWARD_MERGE, this list is always empty.'
      nextToken:
        $ref: '#/definitions/NextToken'
        description: An enumeration token that can be used in a request to return the next batch of the results.
  GetMergeConflictsInput:
    type: object
    required:
      - repositoryName
      - destinationCommitSpecifier
      - sourceCommitSpecifier
      - mergeOption
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where the pull request was created.
      destinationCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
      sourceCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
      mergeOption:
        $ref: '#/definitions/MergeOptionTypeEnum'
        description: 'The merge option or strategy you want to use to merge the code. '
      conflictDetailLevel:
        $ref: '#/definitions/ConflictDetailLevelTypeEnum'
        description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.'
      maxConflictFiles:
        $ref: '#/definitions/MaxResults'
        description: The maximum number of files to include in the output.
      conflictResolutionStrategy:
        $ref: '#/definitions/ConflictResolutionStrategyTypeEnum'
        description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.'
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'An enumeration token that, when provided in a request, returns the next batch of the results.'
  InvalidDestinationCommitSpecifierException: {}
  InvalidSourceCommitSpecifierException: {}
  GetMergeOptionsOutput:
    type: object
    required:
      - mergeOptions
      - sourceCommitId
      - destinationCommitId
      - baseCommitId
    properties:
      mergeOptions:
        $ref: '#/definitions/MergeOptions'
        description: The merge option or strategy used to merge the code.
      sourceCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the source commit specifier that was used in the merge evaluation.
      destinationCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the destination commit specifier that was used in the merge evaluation.
      baseCommitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the merge base.
  GetMergeOptionsInput:
    type: object
    required:
      - repositoryName
      - sourceCommitSpecifier
      - destinationCommitSpecifier
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the commits about which you want to get merge options.
      sourceCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
      destinationCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
      conflictDetailLevel:
        $ref: '#/definitions/ConflictDetailLevelTypeEnum'
        description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.'
      conflictResolutionStrategy:
        $ref: '#/definitions/ConflictResolutionStrategyTypeEnum'
        description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.'
  GetPullRequestOutput:
    type: object
    required:
      - pullRequest
    properties:
      pullRequest:
        $ref: '#/definitions/PullRequest'
        description: Information about the specified pull request.
  GetPullRequestInput:
    type: object
    required:
      - pullRequestId
    properties:
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
  GetPullRequestApprovalStatesOutput:
    type: object
    properties:
      approvals:
        $ref: '#/definitions/ApprovalList'
        description: Information about users who have approved the pull request.
  GetPullRequestApprovalStatesInput:
    type: object
    required:
      - pullRequestId
      - revisionId
    properties:
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: The system-generated ID for the pull request.
      revisionId:
        $ref: '#/definitions/RevisionId'
        description: The system-generated ID for the pull request revision.
  GetPullRequestOverrideStateOutput:
    type: object
    properties:
      overridden:
        $ref: '#/definitions/Overridden'
        description: A Boolean value that indicates whether a pull request has had its rules set aside (TRUE) or whether all approval rules still apply (FALSE).
      overrider:
        $ref: '#/definitions/Arn'
        description: The Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request.
  GetPullRequestOverrideStateInput:
    type: object
    required:
      - pullRequestId
      - revisionId
    properties:
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: The ID of the pull request for which you want to get information about whether approval rules have been set aside (overridden).
      revisionId:
        $ref: '#/definitions/RevisionId'
        description: 'The system-generated ID of the revision for the pull request. To retrieve the most recent revision ID, use <a>GetPullRequest</a>.'
  GetRepositoryOutput:
    type: object
    properties:
      repositoryMetadata:
        $ref: '#/definitions/RepositoryMetadata'
        description: Information about the repository.
    description: Represents the output of a get repository operation.
  GetRepositoryInput:
    type: object
    required:
      - repositoryName
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository to get information about.
    description: Represents the input of a get repository operation.
  GetRepositoryTriggersOutput:
    type: object
    properties:
      configurationId:
        $ref: '#/definitions/RepositoryTriggersConfigurationId'
        description: The system-generated unique ID for the trigger.
      triggers:
        $ref: '#/definitions/RepositoryTriggersList'
        description: The JSON block of configuration information for each trigger.
    description: Represents the output of a get repository triggers operation.
  GetRepositoryTriggersInput:
    type: object
    required:
      - repositoryName
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository for which the trigger is configured.
    description: Represents the input of a get repository triggers operation.
  ListApprovalRuleTemplatesOutput:
    type: object
    properties:
      approvalRuleTemplateNames:
        $ref: '#/definitions/ApprovalRuleTemplateNameList'
        description: The names of all the approval rule templates found in the AWS Region for your AWS account.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: An enumeration token that allows the operation to batch the next results of the operation.
  ListApprovalRuleTemplatesInput:
    type: object
    properties:
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'An enumeration token that, when provided in a request, returns the next batch of the results.'
      maxResults:
        $ref: '#/definitions/MaxResults'
        description: 'A non-zero, non-negative integer used to limit the number of returned results.'
  ListAssociatedApprovalRuleTemplatesForRepositoryOutput:
    type: object
    properties:
      approvalRuleTemplateNames:
        $ref: '#/definitions/ApprovalRuleTemplateNameList'
        description: The names of all approval rule templates associated with the repository.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: An enumeration token that allows the operation to batch the next results of the operation.
  ListAssociatedApprovalRuleTemplatesForRepositoryInput:
    type: object
    required:
      - repositoryName
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository for which you want to list all associated approval rule templates.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'An enumeration token that, when provided in a request, returns the next batch of the results.'
      maxResults:
        $ref: '#/definitions/MaxResults'
        description: 'A non-zero, non-negative integer used to limit the number of returned results.'
  ListBranchesOutput:
    type: object
    properties:
      branches:
        $ref: '#/definitions/BranchNameList'
        description: The list of branch names.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: An enumeration token that returns the batch of the results.
    description: Represents the output of a list branches operation.
  ListBranchesInput:
    type: object
    required:
      - repositoryName
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the branches.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: An enumeration token that allows the operation to batch the results.
    description: Represents the input of a list branches operation.
  ListPullRequestsOutput:
    type: object
    required:
      - pullRequestIds
    properties:
      pullRequestIds:
        $ref: '#/definitions/PullRequestIdList'
        description: The system-generated IDs of the pull requests.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: An enumeration token that allows the operation to batch the next results of the operation.
  ListPullRequestsInput:
    type: object
    required:
      - repositoryName
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository for which you want to list pull requests.
      authorArn:
        $ref: '#/definitions/Arn'
        description: 'Optional. The Amazon Resource Name (ARN) of the user who created the pull request. If used, this filters the results to pull requests created by that user.'
      pullRequestStatus:
        $ref: '#/definitions/PullRequestStatusEnum'
        description: 'Optional. The status of the pull request. If used, this refines the results to the pull requests that match the specified status.'
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'An enumeration token that, when provided in a request, returns the next batch of the results.'
      maxResults:
        $ref: '#/definitions/MaxResults'
        description: 'A non-zero, non-negative integer used to limit the number of returned results.'
  InvalidPullRequestStatusException: {}
  InvalidAuthorArnException: {}
  AuthorDoesNotExistException: {}
  ListRepositoriesOutput:
    type: object
    properties:
      repositories:
        $ref: '#/definitions/RepositoryNameIdPairList'
        description: Lists the repositories called by the list repositories operation.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.'
    description: Represents the output of a list repositories operation.
  ListRepositoriesInput:
    type: object
    properties:
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'An enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.'
      sortBy:
        $ref: '#/definitions/SortByEnum'
        description: The criteria used to sort the results of a list repositories operation.
      order:
        $ref: '#/definitions/OrderEnum'
        description: The order in which to sort the results of a list repositories operation.
    description: Represents the input of a list repositories operation.
  InvalidSortByException: {}
  InvalidOrderException: {}
  ListRepositoriesForApprovalRuleTemplateOutput:
    type: object
    properties:
      repositoryNames:
        $ref: '#/definitions/RepositoryNameList'
        description: A list of repository names that are associated with the specified approval rule template.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: An enumeration token that allows the operation to batch the next results of the operation.
  ListRepositoriesForApprovalRuleTemplateInput:
    type: object
    required:
      - approvalRuleTemplateName
    properties:
      approvalRuleTemplateName:
        $ref: '#/definitions/ApprovalRuleTemplateName'
        description: The name of the approval rule template for which you want to list repositories that are associated with that template.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'An enumeration token that, when provided in a request, returns the next batch of the results.'
      maxResults:
        $ref: '#/definitions/MaxResults'
        description: 'A non-zero, non-negative integer used to limit the number of returned results.'
  ListTagsForResourceOutput:
    type: object
    properties:
      tags:
        $ref: '#/definitions/TagsMap'
        description: A list of tag key and value pairs associated with the specified resource.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: An enumeration token that allows the operation to batch the next results of the operation.
  ListTagsForResourceInput:
    type: object
    required:
      - resourceArn
    properties:
      resourceArn:
        $ref: '#/definitions/ResourceArn'
        description: 'The Amazon Resource Name (ARN) of the resource for which you want to get information about tags, if any.'
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'An enumeration token that, when provided in a request, returns the next batch of the results.'
  ResourceArnRequiredException: {}
  InvalidResourceArnException: {}
  MergeBranchesByFastForwardOutput:
    type: object
    properties:
      commitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the merge in the destination or target branch.
      treeId:
        $ref: '#/definitions/ObjectId'
        description: The tree ID of the merge in the destination or target branch.
  MergeBranchesByFastForwardInput:
    type: object
    required:
      - repositoryName
      - sourceCommitSpecifier
      - destinationCommitSpecifier
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you want to merge two branches.
      sourceCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
      destinationCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
      targetBranch:
        $ref: '#/definitions/BranchName'
        description: The branch where the merge is applied.
  InvalidTargetBranchException: {}
  MergeBranchesBySquashOutput:
    type: object
    properties:
      commitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the merge in the destination or target branch.
      treeId:
        $ref: '#/definitions/ObjectId'
        description: The tree ID of the merge in the destination or target branch.
  MergeBranchesBySquashInput:
    type: object
    required:
      - repositoryName
      - sourceCommitSpecifier
      - destinationCommitSpecifier
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you want to merge two branches.
      sourceCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
      destinationCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
      targetBranch:
        $ref: '#/definitions/BranchName'
        description: 'The branch where the merge is applied. '
      conflictDetailLevel:
        $ref: '#/definitions/ConflictDetailLevelTypeEnum'
        description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.'
      conflictResolutionStrategy:
        $ref: '#/definitions/ConflictResolutionStrategyTypeEnum'
        description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.'
      authorName:
        $ref: '#/definitions/Name'
        description: The name of the author who created the commit. This information is used as both the author and committer for the commit.
      email:
        $ref: '#/definitions/Email'
        description: The email address of the person merging the branches. This information is used in the commit information for the merge.
      commitMessage:
        $ref: '#/definitions/Message'
        description: The commit message for the merge.
      keepEmptyFolders:
        $ref: '#/definitions/KeepEmptyFolders'
        description: 'If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If this is specified as true, a .gitkeep file is created for empty folders. The default is false.'
      conflictResolution:
        $ref: '#/definitions/ConflictResolution'
        description: 'If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge.'
  MergeBranchesByThreeWayOutput:
    type: object
    properties:
      commitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID of the merge in the destination or target branch.
      treeId:
        $ref: '#/definitions/ObjectId'
        description: The tree ID of the merge in the destination or target branch.
  MergeBranchesByThreeWayInput:
    type: object
    required:
      - repositoryName
      - sourceCommitSpecifier
      - destinationCommitSpecifier
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you want to merge two branches.
      sourceCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
      destinationCommitSpecifier:
        $ref: '#/definitions/CommitName'
        description: 'The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).'
      targetBranch:
        $ref: '#/definitions/BranchName'
        description: 'The branch where the merge is applied. '
      conflictDetailLevel:
        $ref: '#/definitions/ConflictDetailLevelTypeEnum'
        description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.'
      conflictResolutionStrategy:
        $ref: '#/definitions/ConflictResolutionStrategyTypeEnum'
        description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.'
      authorName:
        $ref: '#/definitions/Name'
        description: The name of the author who created the commit. This information is used as both the author and committer for the commit.
      email:
        $ref: '#/definitions/Email'
        description: The email address of the person merging the branches. This information is used in the commit information for the merge.
      commitMessage:
        $ref: '#/definitions/Message'
        description: The commit message to include in the commit information for the merge.
      keepEmptyFolders:
        $ref: '#/definitions/KeepEmptyFolders'
        description: 'If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If true, a .gitkeep file is created for empty folders. The default is false.'
      conflictResolution:
        $ref: '#/definitions/ConflictResolution'
        description: 'If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge.'
  MergePullRequestByFastForwardOutput:
    type: object
    properties:
      pullRequest:
        $ref: '#/definitions/PullRequest'
        description: 'Information about the specified pull request, including the merge.'
  MergePullRequestByFastForwardInput:
    type: object
    required:
      - pullRequestId
      - repositoryName
    properties:
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where the pull request was created.
      sourceCommitId:
        $ref: '#/definitions/ObjectId'
        description: The full commit ID of the original or updated commit in the pull request source branch. Pass this value if you want an exception thrown if the current commit ID of the tip of the source branch does not match this commit ID.
  TipOfSourceReferenceIsDifferentException: {}
  PullRequestApprovalRulesNotSatisfiedException: {}
  MergePullRequestBySquashOutput:
    type: object
    properties:
      pullRequest:
        $ref: '#/definitions/PullRequest'
  MergePullRequestBySquashInput:
    type: object
    required:
      - pullRequestId
      - repositoryName
    properties:
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where the pull request was created.
      sourceCommitId:
        $ref: '#/definitions/ObjectId'
        description: The full commit ID of the original or updated commit in the pull request source branch. Pass this value if you want an exception thrown if the current commit ID of the tip of the source branch does not match this commit ID.
      conflictDetailLevel:
        $ref: '#/definitions/ConflictDetailLevelTypeEnum'
        description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.'
      conflictResolutionStrategy:
        $ref: '#/definitions/ConflictResolutionStrategyTypeEnum'
        description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.'
      commitMessage:
        $ref: '#/definitions/Message'
        description: The commit message to include in the commit information for the merge.
      authorName:
        $ref: '#/definitions/Name'
        description: The name of the author who created the commit. This information is used as both the author and committer for the commit.
      email:
        $ref: '#/definitions/Email'
        description: The email address of the person merging the branches. This information is used in the commit information for the merge.
      keepEmptyFolders:
        $ref: '#/definitions/KeepEmptyFolders'
        description: 'If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If true, a .gitkeep file is created for empty folders. The default is false.'
      conflictResolution:
        $ref: '#/definitions/ConflictResolution'
        description: 'If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge.'
  MergePullRequestByThreeWayOutput:
    type: object
    properties:
      pullRequest:
        $ref: '#/definitions/PullRequest'
  MergePullRequestByThreeWayInput:
    type: object
    required:
      - pullRequestId
      - repositoryName
    properties:
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where the pull request was created.
      sourceCommitId:
        $ref: '#/definitions/ObjectId'
        description: The full commit ID of the original or updated commit in the pull request source branch. Pass this value if you want an exception thrown if the current commit ID of the tip of the source branch does not match this commit ID.
      conflictDetailLevel:
        $ref: '#/definitions/ConflictDetailLevelTypeEnum'
        description: 'The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.'
      conflictResolutionStrategy:
        $ref: '#/definitions/ConflictResolutionStrategyTypeEnum'
        description: 'Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.'
      commitMessage:
        $ref: '#/definitions/Message'
        description: The commit message to include in the commit information for the merge.
      authorName:
        $ref: '#/definitions/Name'
        description: The name of the author who created the commit. This information is used as both the author and committer for the commit.
      email:
        $ref: '#/definitions/Email'
        description: The email address of the person merging the branches. This information is used in the commit information for the merge.
      keepEmptyFolders:
        $ref: '#/definitions/KeepEmptyFolders'
        description: 'If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If true, a .gitkeep file is created for empty folders. The default is false.'
      conflictResolution:
        $ref: '#/definitions/ConflictResolution'
        description: 'If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge.'
  OverridePullRequestApprovalRulesInput:
    type: object
    required:
      - pullRequestId
      - revisionId
      - overrideStatus
    properties:
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: 'The system-generated ID of the pull request for which you want to override all approval rule requirements. To get this information, use <a>GetPullRequest</a>.'
      revisionId:
        $ref: '#/definitions/RevisionId'
        description: 'The system-generated ID of the most recent revision of the pull request. You cannot override approval rules for anything but the most recent revision of a pull request. To get the revision ID, use GetPullRequest.'
      overrideStatus:
        $ref: '#/definitions/OverrideStatus'
        description: Whether you want to set aside approval rule requirements for the pull request (OVERRIDE) or revoke a previous override and apply approval rule requirements (REVOKE). REVOKE status is not stored.
  InvalidOverrideStatusException: {}
  OverrideStatusRequiredException: {}
  OverrideAlreadySetException: {}
  PostCommentForComparedCommitOutput:
    type: object
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you posted a comment on the comparison between commits.
      beforeCommitId:
        $ref: '#/definitions/CommitId'
        description: 'In the directionality you established, the full commit ID of the before commit.'
      afterCommitId:
        $ref: '#/definitions/CommitId'
        description: 'In the directionality you established, the full commit ID of the after commit.'
      beforeBlobId:
        $ref: '#/definitions/ObjectId'
        description: 'In the directionality you established, the blob ID of the before blob.'
      afterBlobId:
        $ref: '#/definitions/ObjectId'
        description: 'In the directionality you established, the blob ID of the after blob.'
      location:
        $ref: '#/definitions/Location'
        description: The location of the comment in the comparison between the two commits.
      comment:
        $ref: '#/definitions/Comment'
        description: The content of the comment you posted.
  PostCommentForComparedCommitInput:
    type: object
    required:
      - repositoryName
      - afterCommitId
      - content
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you want to post a comment on the comparison between commits.
      beforeCommitId:
        $ref: '#/definitions/CommitId'
        description: 'To establish the directionality of the comparison, the full commit ID of the before commit. Required for commenting on any commit unless that commit is the initial commit.'
      afterCommitId:
        $ref: '#/definitions/CommitId'
        description: 'To establish the directionality of the comparison, the full commit ID of the after commit.'
      location:
        $ref: '#/definitions/Location'
        description: The location of the comparison where you want to comment.
      content:
        $ref: '#/definitions/Content'
        description: The content of the comment you want to make.
      clientRequestToken:
        $ref: '#/definitions/ClientRequestToken'
        description: 'A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.'
  CommentContentRequiredException: {}
  CommentContentSizeLimitExceededException: {}
  InvalidFileLocationException: {}
  InvalidRelativeFileVersionEnumException: {}
  InvalidFilePositionException: {}
  BeforeCommitIdAndAfterCommitIdAreSameException: {}
  PostCommentForPullRequestOutput:
    type: object
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you posted a comment on a pull request.
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: 'The system-generated ID of the pull request. '
      beforeCommitId:
        $ref: '#/definitions/CommitId'
        description: 'The full commit ID of the commit in the source branch used to create the pull request, or in the case of an updated pull request, the full commit ID of the commit used to update the pull request.'
      afterCommitId:
        $ref: '#/definitions/CommitId'
        description: The full commit ID of the commit in the destination branch where the pull request is merged.
      beforeBlobId:
        $ref: '#/definitions/ObjectId'
        description: 'In the directionality of the pull request, the blob ID of the before blob.'
      afterBlobId:
        $ref: '#/definitions/ObjectId'
        description: 'In the directionality of the pull request, the blob ID of the after blob.'
      location:
        $ref: '#/definitions/Location'
        description: The location of the change where you posted your comment.
      comment:
        $ref: '#/definitions/Comment'
        description: The content of the comment you posted.
  PostCommentForPullRequestInput:
    type: object
    required:
      - pullRequestId
      - repositoryName
      - beforeCommitId
      - afterCommitId
      - content
    properties:
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you want to post a comment on a pull request.
      beforeCommitId:
        $ref: '#/definitions/CommitId'
        description: The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was created.
      afterCommitId:
        $ref: '#/definitions/CommitId'
        description: The full commit ID of the commit in the source branch that is the current tip of the branch for the pull request when you post the comment.
      location:
        $ref: '#/definitions/Location'
        description: 'The location of the change where you want to post your comment. If no location is provided, the comment is posted as a general comment on the pull request difference between the before commit ID and the after commit ID.'
      content:
        $ref: '#/definitions/Content'
        description: The content of your comment on the change.
      clientRequestToken:
        $ref: '#/definitions/ClientRequestToken'
        description: 'A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.'
  PostCommentReplyOutput:
    type: object
    properties:
      comment:
        $ref: '#/definitions/Comment'
        description: Information about the reply to a comment.
  PostCommentReplyInput:
    type: object
    required:
      - inReplyTo
      - content
    properties:
      inReplyTo:
        $ref: '#/definitions/CommentId'
        description: 'The system-generated ID of the comment to which you want to reply. To get this ID, use <a>GetCommentsForComparedCommit</a> or <a>GetCommentsForPullRequest</a>.'
      clientRequestToken:
        $ref: '#/definitions/ClientRequestToken'
        description: 'A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.'
      content:
        $ref: '#/definitions/Content'
        description: The contents of your reply to a comment.
  PutFileOutput:
    type: object
    required:
      - commitId
      - blobId
      - treeId
    properties:
      commitId:
        $ref: '#/definitions/ObjectId'
        description: The full SHA ID of the commit that contains this file change.
      blobId:
        $ref: '#/definitions/ObjectId'
        description: 'The ID of the blob, which is its SHA-1 pointer.'
      treeId:
        $ref: '#/definitions/ObjectId'
        description: The full SHA-1 pointer of the tree information for the commit that contains this file change.
  PutFileInput:
    type: object
    required:
      - repositoryName
      - branchName
      - fileContent
      - filePath
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you want to add or update the file.
      branchName:
        $ref: '#/definitions/BranchName'
        description: 'The name of the branch where you want to add or update the file. If this is an empty repository, this branch is created.'
      fileContent:
        $ref: '#/definitions/FileContent'
        description: 'The content of the file, in binary object format. '
      filePath:
        $ref: '#/definitions/Path'
        description: '<p>The name of the file you want to add or update, including the relative path to the file in the repository.</p> <note> <p>If the path does not currently exist in the repository, the path is created as part of adding the file.</p> </note>'
      fileMode:
        $ref: '#/definitions/FileModeTypeEnum'
        description: The file mode permissions of the blob. Valid file mode permissions are listed here.
      parentCommitId:
        $ref: '#/definitions/CommitId'
        description: '<p>The full commit ID of the head commit in the branch where you want to add or update the file. If this is an empty repository, no commit ID is required. If this is not an empty repository, a commit ID is required. </p> <p>The commit ID must match the ID of the head commit at the time of the operation. Otherwise, an error occurs, and the file is not added or updated.</p>'
      commitMessage:
        $ref: '#/definitions/Message'
        description: 'A message about why this file was added or updated. Although it is optional, a message makes the commit history for your repository more useful.'
      name:
        $ref: '#/definitions/Name'
        description: 'The name of the person adding or updating the file. Although it is optional, a name makes the commit history for your repository more useful.'
      email:
        $ref: '#/definitions/Email'
        description: An email address for the person adding or updating the file.
  FileContentRequiredException: {}
  SameFileContentException: {}
  PutRepositoryTriggersOutput:
    type: object
    properties:
      configurationId:
        $ref: '#/definitions/RepositoryTriggersConfigurationId'
        description: The system-generated unique ID for the create or update operation.
    description: Represents the output of a put repository triggers operation.
  PutRepositoryTriggersInput:
    type: object
    required:
      - repositoryName
      - triggers
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where you want to create or update the trigger.
      triggers:
        $ref: '#/definitions/RepositoryTriggersList'
        description: The JSON block of configuration information for each trigger.
    description: Represents the input of a put repository triggers operation.
  RepositoryTriggersListRequiredException: {}
  MaximumRepositoryTriggersExceededException: {}
  InvalidRepositoryTriggerNameException: {}
  InvalidRepositoryTriggerDestinationArnException: {}
  InvalidRepositoryTriggerRegionException: {}
  InvalidRepositoryTriggerCustomDataException: {}
  MaximumBranchesExceededException: {}
  InvalidRepositoryTriggerBranchNameException: {}
  InvalidRepositoryTriggerEventsException: {}
  RepositoryTriggerNameRequiredException: {}
  RepositoryTriggerDestinationArnRequiredException: {}
  RepositoryTriggerBranchNameListRequiredException: {}
  RepositoryTriggerEventsListRequiredException: {}
  TagResourceInput:
    type: object
    required:
      - resourceArn
      - tags
    properties:
      resourceArn:
        $ref: '#/definitions/ResourceArn'
        description: The Amazon Resource Name (ARN) of the resource to which you want to add or update tags.
      tags:
        $ref: '#/definitions/TagsMap'
        description: The key-value pair to use when tagging this repository.
  TagsMapRequiredException: {}
  TestRepositoryTriggersOutput:
    type: object
    properties:
      successfulExecutions:
        $ref: '#/definitions/RepositoryTriggerNameList'
        description: 'The list of triggers that were successfully tested. This list provides the names of the triggers that were successfully tested, separated by commas.'
      failedExecutions:
        $ref: '#/definitions/RepositoryTriggerExecutionFailureList'
        description: 'The list of triggers that were not tested. This list provides the names of the triggers that could not be tested, separated by commas.'
    description: Represents the output of a test repository triggers operation.
  TestRepositoryTriggersInput:
    type: object
    required:
      - repositoryName
      - triggers
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository in which to test the triggers.
      triggers:
        $ref: '#/definitions/RepositoryTriggersList'
        description: The list of triggers to test.
    description: Represents the input of a test repository triggers operation.
  UntagResourceInput:
    type: object
    required:
      - resourceArn
      - tagKeys
    properties:
      resourceArn:
        $ref: '#/definitions/ResourceArn'
        description: The Amazon Resource Name (ARN) of the resource to which you want to remove tags.
      tagKeys:
        $ref: '#/definitions/TagKeysList'
        description: The tag key for each tag that you want to remove from the resource.
  TagKeysListRequiredException: {}
  InvalidTagKeysListException: {}
  UpdateApprovalRuleTemplateContentOutput:
    type: object
    required:
      - approvalRuleTemplate
    properties:
      approvalRuleTemplate:
        $ref: '#/definitions/ApprovalRuleTemplate'
  UpdateApprovalRuleTemplateContentInput:
    type: object
    required:
      - approvalRuleTemplateName
      - newRuleContent
    properties:
      approvalRuleTemplateName:
        $ref: '#/definitions/ApprovalRuleTemplateName'
        description: 'The name of the approval rule template where you want to update the content of the rule. '
      newRuleContent:
        $ref: '#/definitions/ApprovalRuleTemplateContent'
        description: The content that replaces the existing content of the rule. Content statements must be complete. You cannot provide only the changes.
      existingRuleContentSha256:
        $ref: '#/definitions/RuleContentSha256'
        description: The SHA-256 hash signature for the content of the approval rule. You can retrieve this information by using <a>GetPullRequest</a>.
  InvalidRuleContentSha256Exception: {}
  UpdateApprovalRuleTemplateDescriptionOutput:
    type: object
    required:
      - approvalRuleTemplate
    properties:
      approvalRuleTemplate:
        $ref: '#/definitions/ApprovalRuleTemplate'
        description: The structure and content of the updated approval rule template.
  UpdateApprovalRuleTemplateDescriptionInput:
    type: object
    required:
      - approvalRuleTemplateName
      - approvalRuleTemplateDescription
    properties:
      approvalRuleTemplateName:
        $ref: '#/definitions/ApprovalRuleTemplateName'
        description: The name of the template for which you want to update the description.
      approvalRuleTemplateDescription:
        $ref: '#/definitions/ApprovalRuleTemplateDescription'
        description: The updated description of the approval rule template.
  UpdateApprovalRuleTemplateNameOutput:
    type: object
    required:
      - approvalRuleTemplate
    properties:
      approvalRuleTemplate:
        $ref: '#/definitions/ApprovalRuleTemplate'
        description: The structure and content of the updated approval rule template.
  UpdateApprovalRuleTemplateNameInput:
    type: object
    required:
      - oldApprovalRuleTemplateName
      - newApprovalRuleTemplateName
    properties:
      oldApprovalRuleTemplateName:
        $ref: '#/definitions/ApprovalRuleTemplateName'
        description: The current name of the approval rule template.
      newApprovalRuleTemplateName:
        $ref: '#/definitions/ApprovalRuleTemplateName'
        description: The new name you want to apply to the approval rule template.
  UpdateCommentOutput:
    type: object
    properties:
      comment:
        $ref: '#/definitions/Comment'
        description: Information about the updated comment.
  UpdateCommentInput:
    type: object
    required:
      - commentId
      - content
    properties:
      commentId:
        $ref: '#/definitions/CommentId'
        description: 'The system-generated ID of the comment you want to update. To get this ID, use <a>GetCommentsForComparedCommit</a> or <a>GetCommentsForPullRequest</a>.'
      content:
        $ref: '#/definitions/Content'
        description: The updated content to replace the existing content of the comment.
  CommentNotCreatedByCallerException: {}
  UpdateDefaultBranchInput:
    type: object
    required:
      - repositoryName
      - defaultBranchName
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository to set or change the default branch for.
      defaultBranchName:
        $ref: '#/definitions/BranchName'
        description: The name of the branch to set as the default.
    description: Represents the input of an update default branch operation.
  UpdatePullRequestApprovalRuleContentOutput:
    type: object
    required:
      - approvalRule
    properties:
      approvalRule:
        $ref: '#/definitions/ApprovalRule'
        description: Information about the updated approval rule.
  UpdatePullRequestApprovalRuleContentInput:
    type: object
    required:
      - pullRequestId
      - approvalRuleName
      - newRuleContent
    properties:
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: The system-generated ID of the pull request.
      approvalRuleName:
        $ref: '#/definitions/ApprovalRuleName'
        description: The name of the approval rule you want to update.
      existingRuleContentSha256:
        $ref: '#/definitions/RuleContentSha256'
        description: The SHA-256 hash signature for the content of the approval rule. You can retrieve this information by using <a>GetPullRequest</a>.
      newRuleContent:
        $ref: '#/definitions/ApprovalRuleContent'
        description: '<p>The updated content for the approval rule.</p> <note> <p>When you update the content of the approval rule, you can specify approvers in an approval pool in one of two ways:</p> <ul> <li> <p> <b>CodeCommitApprovers</b>: This option only requires an AWS account and a resource. It can be used for both IAM users and federated access users whose name matches the provided resource name. This is a very powerful option that offers a great deal of flexibility. For example, if you specify the AWS account <i>123456789012</i> and <i>Mary_Major</i>, all of the following are counted as approvals coming from that user:</p> <ul> <li> <p>An IAM user in the account (arn:aws:iam::<i>123456789012</i>:user/<i>Mary_Major</i>)</p> </li> <li> <p>A federated user identified in IAM as Mary_Major (arn:aws:sts::<i>123456789012</i>:federated-user/<i>Mary_Major</i>)</p> </li> </ul> <p>This option does not recognize an active session of someone assuming the role of CodeCommitReview with a role session name of <i>Mary_Major</i> (arn:aws:sts::<i>123456789012</i>:assumed-role/CodeCommitReview/<i>Mary_Major</i>) unless you include a wildcard (*Mary_Major).</p> </li> <li> <p> <b>Fully qualified ARN</b>: This option allows you to specify the fully qualified Amazon Resource Name (ARN) of the IAM user or role. </p> </li> </ul> <p>For more information about IAM ARNs, wildcards, and formats, see <a href="https://docs.aws.amazon.com/iam/latest/UserGuide/reference_identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> </note>'
  ApprovalRuleDoesNotExistException: {}
  CannotModifyApprovalRuleFromTemplateException: {}
  UpdatePullRequestApprovalStateInput:
    type: object
    required:
      - pullRequestId
      - revisionId
      - approvalState
    properties:
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: The system-generated ID of the pull request.
      revisionId:
        $ref: '#/definitions/RevisionId'
        description: The system-generated ID of the revision.
      approvalState:
        $ref: '#/definitions/ApprovalState'
        description: The approval state to associate with the user on the pull request.
  InvalidApprovalStateException: {}
  ApprovalStateRequiredException: {}
  PullRequestCannotBeApprovedByAuthorException: {}
  MaximumNumberOfApprovalsExceededException: {}
  UpdatePullRequestDescriptionOutput:
    type: object
    required:
      - pullRequest
    properties:
      pullRequest:
        $ref: '#/definitions/PullRequest'
        description: Information about the updated pull request.
  UpdatePullRequestDescriptionInput:
    type: object
    required:
      - pullRequestId
      - description
    properties:
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
      description:
        $ref: '#/definitions/Description'
        description: The updated content of the description for the pull request. This content replaces the existing description.
  UpdatePullRequestStatusOutput:
    type: object
    required:
      - pullRequest
    properties:
      pullRequest:
        $ref: '#/definitions/PullRequest'
        description: Information about the pull request.
  UpdatePullRequestStatusInput:
    type: object
    required:
      - pullRequestId
      - pullRequestStatus
    properties:
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
      pullRequestStatus:
        $ref: '#/definitions/PullRequestStatusEnum'
        description: 'The status of the pull request. The only valid operations are to update the status from <code>OPEN</code> to <code>OPEN</code>, <code>OPEN</code> to <code>CLOSED</code> or from <code>CLOSED</code> to <code>CLOSED</code>.'
  InvalidPullRequestStatusUpdateException: {}
  PullRequestStatusRequiredException: {}
  UpdatePullRequestTitleOutput:
    type: object
    required:
      - pullRequest
    properties:
      pullRequest:
        $ref: '#/definitions/PullRequest'
        description: Information about the updated pull request.
  UpdatePullRequestTitleInput:
    type: object
    required:
      - pullRequestId
      - title
    properties:
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: 'The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>.'
      title:
        $ref: '#/definitions/Title'
        description: The updated title of the pull request. This replaces the existing title.
  UpdateRepositoryDescriptionInput:
    type: object
    required:
      - repositoryName
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository to set or change the comment or description for.
      repositoryDescription:
        $ref: '#/definitions/RepositoryDescription'
        description: 'The new comment or description for the specified repository. Repository descriptions are limited to 1,000 characters.'
    description: Represents the input of an update repository description operation.
  UpdateRepositoryNameInput:
    type: object
    required:
      - oldName
      - newName
    properties:
      oldName:
        $ref: '#/definitions/RepositoryName'
        description: The current name of the repository.
      newName:
        $ref: '#/definitions/RepositoryName'
        description: The new name for the repository.
    description: Represents the input of an update repository description operation.
  AccountId:
    type: string
  AdditionalData:
    type: string
  Arn:
    type: string
  ApprovalState:
    type: string
    enum:
      - APPROVE
      - REVOKE
  Approval:
    type: object
    properties:
      userArn:
        $ref: '#/definitions/Arn'
        description: The Amazon Resource Name (ARN) of the user.
      approvalState:
        $ref: '#/definitions/ApprovalState'
        description: 'The state of the approval, APPROVE or REVOKE. REVOKE states are not stored.'
    description: Returns information about a specific approval on a pull request.
  ApprovalList:
    type: array
    items:
      $ref: '#/definitions/Approval'
  ApprovalRuleId:
    type: string
  ApprovalRuleName:
    type: string
    minLength: 1
    maxLength: 100
  ApprovalRuleContent:
    type: string
    minLength: 1
    maxLength: 3000
  RuleContentSha256:
    type: string
  LastModifiedDate:
    type: string
    format: date-time
  CreationDate:
    type: string
    format: date-time
  OriginApprovalRuleTemplate:
    type: object
    properties:
      approvalRuleTemplateId:
        $ref: '#/definitions/ApprovalRuleTemplateId'
        description: The ID of the template that created the approval rule.
      approvalRuleTemplateName:
        $ref: '#/definitions/ApprovalRuleTemplateName'
        description: The name of the template that created the approval rule.
    description: Returns information about the template that created the approval rule for a pull request.
  ApprovalRule:
    type: object
    properties:
      approvalRuleId:
        $ref: '#/definitions/ApprovalRuleId'
        description: The system-generated ID of the approval rule.
      approvalRuleName:
        $ref: '#/definitions/ApprovalRuleName'
        description: The name of the approval rule.
      approvalRuleContent:
        $ref: '#/definitions/ApprovalRuleContent'
        description: The content of the approval rule.
      ruleContentSha256:
        $ref: '#/definitions/RuleContentSha256'
        description: The SHA-256 hash signature for the content of the approval rule.
      lastModifiedDate:
        $ref: '#/definitions/LastModifiedDate'
        description: 'The date the approval rule was most recently changed, in timestamp format.'
      creationDate:
        $ref: '#/definitions/CreationDate'
        description: 'The date the approval rule was created, in timestamp format.'
      lastModifiedUser:
        $ref: '#/definitions/Arn'
        description: The Amazon Resource Name (ARN) of the user who made the most recent changes to the approval rule.
      originApprovalRuleTemplate:
        $ref: '#/definitions/OriginApprovalRuleTemplate'
        description: The approval rule template used to create the rule.
    description: Returns information about an approval rule.
  ApprovalRuleEventMetadata:
    type: object
    properties:
      approvalRuleName:
        $ref: '#/definitions/ApprovalRuleName'
        description: The name of the approval rule.
      approvalRuleId:
        $ref: '#/definitions/ApprovalRuleId'
        description: The system-generated ID of the approval rule.
      approvalRuleContent:
        $ref: '#/definitions/ApprovalRuleContent'
        description: The content of the approval rule.
    description: Returns information about an event for an approval rule.
  RevisionId:
    type: string
  OverrideStatus:
    type: string
    enum:
      - OVERRIDE
      - REVOKE
  ApprovalRuleOverriddenEventMetadata:
    type: object
    properties:
      revisionId:
        $ref: '#/definitions/RevisionId'
        description: The revision ID of the pull request when the override event occurred.
      overrideStatus:
        $ref: '#/definitions/OverrideStatus'
        description: The status of the override event.
    description: Returns information about an override event for approval rules for a pull request.
  ApprovalRuleTemplateId:
    type: string
  ApprovalRuleTemplateName:
    type: string
    minLength: 1
    maxLength: 100
  ApprovalRuleTemplateDescription:
    type: string
    minLength: 0
    maxLength: 1000
  ApprovalRuleTemplateContent:
    type: string
    minLength: 1
    maxLength: 3000
  ApprovalRuleTemplate:
    type: object
    properties:
      approvalRuleTemplateId:
        $ref: '#/definitions/ApprovalRuleTemplateId'
        description: The system-generated ID of the approval rule template.
      approvalRuleTemplateName:
        $ref: '#/definitions/ApprovalRuleTemplateName'
        description: The name of the approval rule template.
      approvalRuleTemplateDescription:
        $ref: '#/definitions/ApprovalRuleTemplateDescription'
        description: The description of the approval rule template.
      approvalRuleTemplateContent:
        $ref: '#/definitions/ApprovalRuleTemplateContent'
        description: The content of the approval rule template.
      ruleContentSha256:
        $ref: '#/definitions/RuleContentSha256'
        description: The SHA-256 hash signature for the content of the approval rule template.
      lastModifiedDate:
        $ref: '#/definitions/LastModifiedDate'
        description: 'The date the approval rule template was most recently changed, in timestamp format.'
      creationDate:
        $ref: '#/definitions/CreationDate'
        description: 'The date the approval rule template was created, in timestamp format.'
      lastModifiedUser:
        $ref: '#/definitions/Arn'
        description: The Amazon Resource Name (ARN) of the user who made the most recent changes to the approval rule template.
    description: Returns information about an approval rule template.
  ApprovalRuleTemplateNameList:
    type: array
    items:
      $ref: '#/definitions/ApprovalRuleTemplateName'
  ApprovalRulesList:
    type: array
    items:
      $ref: '#/definitions/ApprovalRule'
  ApprovalRulesNotSatisfiedList:
    type: array
    items:
      $ref: '#/definitions/ApprovalRuleName'
  ApprovalRulesSatisfiedList:
    type: array
    items:
      $ref: '#/definitions/ApprovalRuleName'
  ApprovalStateChangedEventMetadata:
    type: object
    properties:
      revisionId:
        $ref: '#/definitions/RevisionId'
        description: The revision ID of the pull request when the approval state changed.
      approvalStatus:
        $ref: '#/definitions/ApprovalState'
        description: The approval status for the pull request.
    description: Returns information about a change in the approval state for a pull request.
  Approved:
    type: boolean
  RepositoryName:
    type: string
    pattern: '[\w\.-]+'
    minLength: 1
    maxLength: 100
  ErrorCode:
    type: string
  ErrorMessage:
    type: string
  BatchAssociateApprovalRuleTemplateWithRepositoriesError:
    type: object
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where the association was not made.
      errorCode:
        $ref: '#/definitions/ErrorCode'
        description: An error code that specifies whether the repository name was not valid or not found.
      errorMessage:
        $ref: '#/definitions/ErrorMessage'
        description: An error message that provides details about why the repository name was not found or not valid.
    description: Returns information about errors in a BatchAssociateApprovalRuleTemplateWithRepositories operation.
  BatchAssociateApprovalRuleTemplateWithRepositoriesErrorsList:
    type: array
    items:
      $ref: '#/definitions/BatchAssociateApprovalRuleTemplateWithRepositoriesError'
  RepositoryNameList:
    type: array
    items:
      $ref: '#/definitions/RepositoryName'
  Path:
    type: string
  ExceptionName:
    type: string
  Message:
    type: string
  BatchDescribeMergeConflictsError:
    type: object
    required:
      - filePath
      - exceptionName
      - message
    properties:
      filePath:
        $ref: '#/definitions/Path'
        description: The path to the file.
      exceptionName:
        $ref: '#/definitions/ExceptionName'
        description: The name of the exception.
      message:
        $ref: '#/definitions/Message'
        description: The message provided by the exception.
    description: Returns information about errors in a BatchDescribeMergeConflicts operation.
  BatchDescribeMergeConflictsErrors:
    type: array
    items:
      $ref: '#/definitions/BatchDescribeMergeConflictsError'
  CommitName:
    type: string
  MergeOptionTypeEnum:
    type: string
    enum:
      - FAST_FORWARD_MERGE
      - SQUASH_MERGE
      - THREE_WAY_MERGE
  MaxResults:
    type: integer
  FilePaths:
    type: array
    items:
      $ref: '#/definitions/Path'
  ConflictDetailLevelTypeEnum:
    type: string
    enum:
      - FILE_LEVEL
      - LINE_LEVEL
  ConflictResolutionStrategyTypeEnum:
    type: string
    enum:
      - NONE
      - ACCEPT_SOURCE
      - ACCEPT_DESTINATION
      - AUTOMERGE
  NextToken:
    type: string
  Conflicts:
    type: array
    items:
      $ref: '#/definitions/Conflict'
  ObjectId:
    type: string
  BatchDisassociateApprovalRuleTemplateFromRepositoriesError:
    type: object
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where the association with the template was not able to be removed.
      errorCode:
        $ref: '#/definitions/ErrorCode'
        description: An error code that specifies whether the repository name was not valid or not found.
      errorMessage:
        $ref: '#/definitions/ErrorMessage'
        description: An error message that provides details about why the repository name was either not found or not valid.
    description: Returns information about errors in a BatchDisassociateApprovalRuleTemplateFromRepositories operation.
  BatchDisassociateApprovalRuleTemplateFromRepositoriesErrorsList:
    type: array
    items:
      $ref: '#/definitions/BatchDisassociateApprovalRuleTemplateFromRepositoriesError'
  BatchGetCommitsError:
    type: object
    properties:
      commitId:
        $ref: '#/definitions/ObjectId'
        description: A commit ID that either could not be found or was not in a valid format.
      errorCode:
        $ref: '#/definitions/ErrorCode'
        description: An error code that specifies whether the commit ID was not valid or not found.
      errorMessage:
        $ref: '#/definitions/ErrorMessage'
        description: An error message that provides detail about why the commit ID either was not found or was not valid.
    description: Returns information about errors in a BatchGetCommits operation.
  BatchGetCommitsErrorsList:
    type: array
    items:
      $ref: '#/definitions/BatchGetCommitsError'
  CommitIdsInputList:
    type: array
    items:
      $ref: '#/definitions/ObjectId'
  CommitObjectsList:
    type: array
    items:
      $ref: '#/definitions/Commit'
  RepositoryMetadataList:
    type: array
    items:
      $ref: '#/definitions/RepositoryMetadata'
  RepositoryNotFoundList:
    type: array
    items:
      $ref: '#/definitions/RepositoryName'
  Mode:
    type: string
  BlobMetadata:
    type: object
    properties:
      blobId:
        $ref: '#/definitions/ObjectId'
        description: The full ID of the blob.
      path:
        $ref: '#/definitions/Path'
        description: 'The path to the blob and associated file name, if any.'
      mode:
        $ref: '#/definitions/Mode'
        description: '<p>The file mode permissions of the blob. File mode permission codes include:</p> <ul> <li> <p> <code>100644</code> indicates read/write</p> </li> <li> <p> <code>100755</code> indicates read/write/execute</p> </li> <li> <p> <code>160000</code> indicates a submodule</p> </li> <li> <p> <code>120000</code> indicates a symlink</p> </li> </ul>'
    description: Returns information about a specific Git blob object.
  BranchName:
    type: string
    minLength: 1
    maxLength: 256
  CommitId:
    type: string
  BranchInfo:
    type: object
    properties:
      branchName:
        $ref: '#/definitions/BranchName'
        description: The name of the branch.
      commitId:
        $ref: '#/definitions/CommitId'
        description: The ID of the last commit made to the branch.
    description: Returns information about a branch.
  BranchNameList:
    type: array
    items:
      $ref: '#/definitions/BranchName'
  CapitalBoolean:
    type: boolean
  ChangeTypeEnum:
    type: string
    enum:
      - A
      - M
      - D
  ClientRequestToken:
    type: string
  CloneUrlHttp:
    type: string
  CloneUrlSsh:
    type: string
  CommentId:
    type: string
  Content:
    type: string
  IsCommentDeleted:
    type: boolean
  Comment:
    type: object
    properties:
      commentId:
        $ref: '#/definitions/CommentId'
        description: The system-generated comment ID.
      content:
        $ref: '#/definitions/Content'
        description: The content of the comment.
      inReplyTo:
        $ref: '#/definitions/CommentId'
        description: 'The ID of the comment for which this comment is a reply, if any.'
      creationDate:
        $ref: '#/definitions/CreationDate'
        description: 'The date and time the comment was created, in timestamp format.'
      lastModifiedDate:
        $ref: '#/definitions/LastModifiedDate'
        description: 'The date and time the comment was most recently modified, in timestamp format.'
      authorArn:
        $ref: '#/definitions/Arn'
        description: The Amazon Resource Name (ARN) of the person who posted the comment.
      deleted:
        $ref: '#/definitions/IsCommentDeleted'
        description: A Boolean value indicating whether the comment has been deleted.
      clientRequestToken:
        $ref: '#/definitions/ClientRequestToken'
        description: 'A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.'
    description: Returns information about a specific comment.
  Comments:
    type: array
    items:
      $ref: '#/definitions/Comment'
  Location:
    type: object
    properties:
      filePath:
        $ref: '#/definitions/Path'
        description: 'The name of the file being compared, including its extension and subdirectory, if any.'
      filePosition:
        $ref: '#/definitions/Position'
        description: 'The position of a change in a compared file, in line number format.'
      relativeFileVersion:
        $ref: '#/definitions/RelativeFileVersionEnum'
        description: 'In a comparison of commits or a pull request, whether the change is in the before or after of that comparison.'
    description: Returns information about the location of a change or comment in the comparison between two commits or a pull request.
  CommentsForComparedCommit:
    type: object
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the compared commits.
      beforeCommitId:
        $ref: '#/definitions/CommitId'
        description: The full commit ID of the commit used to establish the before of the comparison.
      afterCommitId:
        $ref: '#/definitions/CommitId'
        description: The full commit ID of the commit used to establish the after of the comparison.
      beforeBlobId:
        $ref: '#/definitions/ObjectId'
        description: The full blob ID of the commit used to establish the before of the comparison.
      afterBlobId:
        $ref: '#/definitions/ObjectId'
        description: The full blob ID of the commit used to establish the after of the comparison.
      location:
        $ref: '#/definitions/Location'
        description: 'Location information about the comment on the comparison, including the file name, line number, and whether the version of the file where the comment was made is BEFORE or AFTER.'
      comments:
        $ref: '#/definitions/Comments'
        description: An array of comment objects. Each comment object contains information about a comment on the comparison between commits.
    description: Returns information about comments on the comparison between two commits.
  CommentsForComparedCommitData:
    type: array
    items:
      $ref: '#/definitions/CommentsForComparedCommit'
  PullRequestId:
    type: string
  CommentsForPullRequest:
    type: object
    properties:
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: The system-generated ID of the pull request.
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the pull request.
      beforeCommitId:
        $ref: '#/definitions/CommitId'
        description: The full commit ID of the commit that was the tip of the destination branch when the pull request was created. This commit is superceded by the after commit in the source branch when and if you merge the source branch into the destination branch.
      afterCommitId:
        $ref: '#/definitions/CommitId'
        description: 'The full commit ID of the commit that was the tip of the source branch at the time the comment was made. '
      beforeBlobId:
        $ref: '#/definitions/ObjectId'
        description: The full blob ID of the file on which you want to comment on the destination commit.
      afterBlobId:
        $ref: '#/definitions/ObjectId'
        description: The full blob ID of the file on which you want to comment on the source commit.
      location:
        $ref: '#/definitions/Location'
        description: 'Location information about the comment on the pull request, including the file name, line number, and whether the version of the file where the comment was made is BEFORE (destination branch) or AFTER (source branch).'
      comments:
        $ref: '#/definitions/Comments'
        description: An array of comment objects. Each comment object contains information about a comment on the pull request.
    description: Returns information about comments on a pull request.
  CommentsForPullRequestData:
    type: array
    items:
      $ref: '#/definitions/CommentsForPullRequest'
  ParentList:
    type: array
    items:
      $ref: '#/definitions/ObjectId'
  UserInfo:
    type: object
    properties:
      name:
        $ref: '#/definitions/Name'
        description: The name of the user who made the specified commit.
      email:
        $ref: '#/definitions/Email'
        description: 'The email address associated with the user who made the commit, if any.'
      date:
        $ref: '#/definitions/Date'
        description: 'The date when the specified commit was commited, in timestamp format with GMT offset.'
    description: Information about the user who made a specified commit.
  Commit:
    type: object
    properties:
      commitId:
        $ref: '#/definitions/ObjectId'
        description: 'The full SHA ID of the specified commit. '
      treeId:
        $ref: '#/definitions/ObjectId'
        description: Tree information for the specified commit.
      parents:
        $ref: '#/definitions/ParentList'
        description: A list of parent commits for the specified commit. Each parent commit ID is the full commit ID.
      message:
        $ref: '#/definitions/Message'
        description: The commit message associated with the specified commit.
      author:
        $ref: '#/definitions/UserInfo'
        description: 'Information about the author of the specified commit. Information includes the date in timestamp format with GMT offset, the name of the author, and the email address for the author, as configured in Git.'
      committer:
        $ref: '#/definitions/UserInfo'
        description: '<p>Information about the person who committed the specified commit, also known as the committer. Information includes the date in timestamp format with GMT offset, the name of the committer, and the email address for the committer, as configured in Git.</p> <p>For more information about the difference between an author and a committer in Git, see <a href="http://git-scm.com/book/ch2-3.html">Viewing the Commit History</a> in Pro Git by Scott Chacon and Ben Straub.</p>'
      additionalData:
        $ref: '#/definitions/AdditionalData'
        description: Any other data associated with the specified commit.
    description: Returns information about a specific commit.
  ConflictMetadata:
    type: object
    properties:
      filePath:
        $ref: '#/definitions/Path'
        description: The path of the file that contains conflicts.
      fileSizes:
        $ref: '#/definitions/FileSizes'
        description: 'The file sizes of the file in the source, destination, and base of the merge.'
      fileModes:
        $ref: '#/definitions/FileModes'
        description: 'The file modes of the file in the source, destination, and base of the merge.'
      objectTypes:
        $ref: '#/definitions/ObjectTypes'
        description: Information about any object type conflicts in a merge operation.
      numberOfConflicts:
        $ref: '#/definitions/NumberOfConflicts'
        description: 'The number of conflicts, including both hunk conflicts and metadata conflicts.'
      isBinaryFile:
        $ref: '#/definitions/IsBinaryFile'
        description: 'A boolean value (true or false) indicating whether the file is binary or textual in the source, destination, and base of the merge.'
      contentConflict:
        $ref: '#/definitions/IsContentConflict'
        description: A boolean value indicating whether there are conflicts in the content of a file.
      fileModeConflict:
        $ref: '#/definitions/IsFileModeConflict'
        description: A boolean value indicating whether there are conflicts in the file mode of a file.
      objectTypeConflict:
        $ref: '#/definitions/IsObjectTypeConflict'
        description: 'A boolean value (true or false) indicating whether there are conflicts between the branches in the object type of a file, folder, or submodule.'
      mergeOperations:
        $ref: '#/definitions/MergeOperations'
        description: 'Whether an add, modify, or delete operation caused the conflict between the source and destination of the merge.'
    description: Information about the metadata for a conflict in a merge operation.
  MergeHunks:
    type: array
    items:
      $ref: '#/definitions/MergeHunk'
  Conflict:
    type: object
    properties:
      conflictMetadata:
        $ref: '#/definitions/ConflictMetadata'
        description: Metadata about a conflict in a merge operation.
      mergeHunks:
        $ref: '#/definitions/MergeHunks'
        description: A list of hunks that contain the differences between files or lines causing the conflict.
    description: Information about conflicts in a merge operation.
  FileSizes:
    type: object
    properties:
      source:
        $ref: '#/definitions/FileSize'
        description: The size of a file in the source of a merge or pull request.
      destination:
        $ref: '#/definitions/FileSize'
        description: The size of a file in the destination of a merge or pull request.
      base:
        $ref: '#/definitions/FileSize'
        description: The size of a file in the base of a merge or pull request.
    description: Information about the size of files in a merge or pull request.
  FileModes:
    type: object
    properties:
      source:
        $ref: '#/definitions/FileModeTypeEnum'
        description: The file mode of a file in the source of a merge or pull request.
      destination:
        $ref: '#/definitions/FileModeTypeEnum'
        description: The file mode of a file in the destination of a merge or pull request.
      base:
        $ref: '#/definitions/FileModeTypeEnum'
        description: The file mode of a file in the base of a merge or pull request.
    description: Information about file modes in a merge or pull request.
  ObjectTypes:
    type: object
    properties:
      source:
        $ref: '#/definitions/ObjectTypeEnum'
        description: The type of the object in the source branch.
      destination:
        $ref: '#/definitions/ObjectTypeEnum'
        description: The type of the object in the destination branch.
      base:
        $ref: '#/definitions/ObjectTypeEnum'
        description: The type of the object in the base commit of the merge.
    description: Information about the type of an object in a merge operation.
  NumberOfConflicts:
    type: integer
  IsBinaryFile:
    type: object
    properties:
      source:
        $ref: '#/definitions/CapitalBoolean'
        description: The binary or non-binary status of file in the source of a merge or pull request.
      destination:
        $ref: '#/definitions/CapitalBoolean'
        description: The binary or non-binary status of a file in the destination of a merge or pull request.
      base:
        $ref: '#/definitions/CapitalBoolean'
        description: The binary or non-binary status of a file in the base of a merge or pull request.
    description: Information about whether a file is binary or textual in a merge or pull request operation.
  IsContentConflict:
    type: boolean
  IsFileModeConflict:
    type: boolean
  IsObjectTypeConflict:
    type: boolean
  MergeOperations:
    type: object
    properties:
      source:
        $ref: '#/definitions/ChangeTypeEnum'
        description: 'The operation (add, modify, or delete) on a file in the source of a merge or pull request.'
      destination:
        $ref: '#/definitions/ChangeTypeEnum'
        description: The operation on a file in the destination of a merge or pull request.
    description: Information about the file operation conflicts in a merge operation.
  ConflictMetadataList:
    type: array
    items:
      $ref: '#/definitions/ConflictMetadata'
  ReplaceContentEntries:
    type: array
    items:
      $ref: '#/definitions/ReplaceContentEntry'
  DeleteFileEntries:
    type: array
    items:
      $ref: '#/definitions/DeleteFileEntry'
  SetFileModeEntries:
    type: array
    items:
      $ref: '#/definitions/SetFileModeEntry'
  ConflictResolution:
    type: object
    properties:
      replaceContents:
        $ref: '#/definitions/ReplaceContentEntries'
        description: Files to have content replaced as part of the merge conflict resolution.
      deleteFiles:
        $ref: '#/definitions/DeleteFileEntries'
        description: Files to be deleted as part of the merge conflict resolution.
      setFileModes:
        $ref: '#/definitions/SetFileModeEntries'
        description: File modes that are set as part of the merge conflict resolution.
    description: 'If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge.'
  Name:
    type: string
  Email:
    type: string
  KeepEmptyFolders:
    type: boolean
  PutFileEntries:
    type: array
    items:
      $ref: '#/definitions/PutFileEntry'
  FilesMetadata:
    type: array
    items:
      $ref: '#/definitions/FileMetadata'
  Title:
    type: string
    maxLength: 150
  Description:
    type: string
    maxLength: 10240
  TargetList:
    type: array
    items:
      $ref: '#/definitions/Target'
  PullRequest:
    type: object
    properties:
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: 'The system-generated ID of the pull request. '
      title:
        $ref: '#/definitions/Title'
        description: The user-defined title of the pull request. This title is displayed in the list of pull requests to other repository users.
      description:
        $ref: '#/definitions/Description'
        description: The user-defined description of the pull request. This description can be used to clarify what should be reviewed and other details of the request.
      lastActivityDate:
        $ref: '#/definitions/LastModifiedDate'
        description: 'The day and time of the last user or system activity on the pull request, in timestamp format.'
      creationDate:
        $ref: '#/definitions/CreationDate'
        description: 'The date and time the pull request was originally created, in timestamp format.'
      pullRequestStatus:
        $ref: '#/definitions/PullRequestStatusEnum'
        description: The status of the pull request. Pull request status can only change from <code>OPEN</code> to <code>CLOSED</code>.
      authorArn:
        $ref: '#/definitions/Arn'
        description: The Amazon Resource Name (ARN) of the user who created the pull request.
      pullRequestTargets:
        $ref: '#/definitions/PullRequestTargetList'
        description: 'The targets of the pull request, including the source branch and destination branch for the pull request.'
      clientRequestToken:
        $ref: '#/definitions/ClientRequestToken'
        description: 'A unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.'
      revisionId:
        $ref: '#/definitions/RevisionId'
        description: The system-generated revision ID for the pull request.
      approvalRules:
        $ref: '#/definitions/ApprovalRulesList'
        description: The approval rules applied to the pull request.
    description: Returns information about a pull request.
  RepositoryDescription:
    type: string
    maxLength: 1000
  TagsMap:
    type: object
    additionalProperties:
      $ref: '#/definitions/TagValue'
  RepositoryMetadata:
    type: object
    properties:
      accountId:
        $ref: '#/definitions/AccountId'
        description: The ID of the AWS account associated with the repository.
      repositoryId:
        $ref: '#/definitions/RepositoryId'
        description: The ID of the repository.
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The repository's name.
      repositoryDescription:
        $ref: '#/definitions/RepositoryDescription'
        description: A comment or description about the repository.
      defaultBranch:
        $ref: '#/definitions/BranchName'
        description: The repository's default branch name.
      lastModifiedDate:
        $ref: '#/definitions/LastModifiedDate'
        description: 'The date and time the repository was last modified, in timestamp format.'
      creationDate:
        $ref: '#/definitions/CreationDate'
        description: 'The date and time the repository was created, in timestamp format.'
      cloneUrlHttp:
        $ref: '#/definitions/CloneUrlHttp'
        description: The URL to use for cloning the repository over HTTPS.
      cloneUrlSsh:
        $ref: '#/definitions/CloneUrlSsh'
        description: The URL to use for cloning the repository over SSH.
      Arn:
        $ref: '#/definitions/Arn'
        description: The Amazon Resource Name (ARN) of the repository.
    description: Information about a repository.
  Date:
    type: string
  DeleteFileEntry:
    type: object
    required:
      - filePath
    properties:
      filePath:
        $ref: '#/definitions/Path'
        description: 'The full path of the file to be deleted, including the name of the file.'
    description: A file that is deleted as part of a commit.
  RepositoryId:
    type: string
  PullRequestEventType:
    type: string
    enum:
      - PULL_REQUEST_CREATED
      - PULL_REQUEST_STATUS_CHANGED
      - PULL_REQUEST_SOURCE_REFERENCE_UPDATED
      - PULL_REQUEST_MERGE_STATE_CHANGED
      - PULL_REQUEST_APPROVAL_RULE_CREATED
      - PULL_REQUEST_APPROVAL_RULE_UPDATED
      - PULL_REQUEST_APPROVAL_RULE_DELETED
      - PULL_REQUEST_APPROVAL_RULE_OVERRIDDEN
      - PULL_REQUEST_APPROVAL_STATE_CHANGED
  PullRequestEventList:
    type: array
    items:
      $ref: '#/definitions/PullRequestEvent'
  Difference:
    type: object
    properties:
      beforeBlob:
        $ref: '#/definitions/BlobMetadata'
        description: 'Information about a <code>beforeBlob</code> data type object, including the ID, the file mode permission code, and the path.'
      afterBlob:
        $ref: '#/definitions/BlobMetadata'
        description: 'Information about an <code>afterBlob</code> data type object, including the ID, the file mode permission code, and the path.'
      changeType:
        $ref: '#/definitions/ChangeTypeEnum'
        description: 'Whether the change type of the difference is an addition (A), deletion (D), or modification (M).'
    description: Returns information about a set of differences for a commit specifier.
  DifferenceList:
    type: array
    items:
      $ref: '#/definitions/Difference'
  Evaluation:
    type: object
    properties:
      approved:
        $ref: '#/definitions/Approved'
        description: Whether the state of the pull request is approved.
      overridden:
        $ref: '#/definitions/Overridden'
        description: Whether the approval rule requirements for the pull request have been overridden and no longer need to be met.
      approvalRulesSatisfied:
        $ref: '#/definitions/ApprovalRulesSatisfiedList'
        description: The names of the approval rules that have had their conditions met.
      approvalRulesNotSatisfied:
        $ref: '#/definitions/ApprovalRulesNotSatisfiedList'
        description: The names of the approval rules that have not had their conditions met.
    description: Returns information about the approval rules applied to a pull request and whether conditions have been met.
  Overridden:
    type: boolean
  EventDate:
    type: string
    format: date-time
  FileModeTypeEnum:
    type: string
    enum:
      - EXECUTABLE
      - NORMAL
      - SYMLINK
  File:
    type: object
    properties:
      blobId:
        $ref: '#/definitions/ObjectId'
        description: The blob ID that contains the file information.
      absolutePath:
        $ref: '#/definitions/Path'
        description: The fully qualified path to the file in the repository.
      relativePath:
        $ref: '#/definitions/Path'
        description: The relative path of the file from the folder where the query originated.
      fileMode:
        $ref: '#/definitions/FileModeTypeEnum'
        description: The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.
    description: Returns information about a file in a repository.
  FileContent:
    type: string
    maxLength: 6291456
  FileList:
    type: array
    items:
      $ref: '#/definitions/File'
  FileMetadata:
    type: object
    properties:
      absolutePath:
        $ref: '#/definitions/Path'
        description: 'The full path to the file to be added or updated, including the name of the file.'
      blobId:
        $ref: '#/definitions/ObjectId'
        description: The blob ID that contains the file information.
      fileMode:
        $ref: '#/definitions/FileModeTypeEnum'
        description: The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.
    description: 'A file to be added, updated, or deleted as part of a commit.'
  FileSize:
    type: integer
  Folder:
    type: object
    properties:
      treeId:
        $ref: '#/definitions/ObjectId'
        description: The full SHA-1 pointer of the tree information for the commit that contains the folder.
      absolutePath:
        $ref: '#/definitions/Path'
        description: The fully qualified path of the folder in the repository.
      relativePath:
        $ref: '#/definitions/Path'
        description: The relative path of the specified folder from the folder where the query originated.
    description: Returns information about a folder in a repository.
  FolderList:
    type: array
    items:
      $ref: '#/definitions/Folder'
  blob:
    type: string
  Limit:
    type: integer
  ObjectSize:
    type: integer
  SymbolicLinkList:
    type: array
    items:
      $ref: '#/definitions/SymbolicLink'
  SubModuleList:
    type: array
    items:
      $ref: '#/definitions/SubModule'
  IsMergeable:
    type: boolean
  MergeOptions:
    type: array
    items:
      $ref: '#/definitions/MergeOptionTypeEnum'
  RepositoryTriggersConfigurationId:
    type: string
  RepositoryTriggersList:
    type: array
    items:
      $ref: '#/definitions/RepositoryTrigger'
  HunkContent:
    type: string
  IsHunkConflict:
    type: boolean
  IsMerged:
    type: boolean
  IsMove:
    type: boolean
  LineNumber:
    type: integer
  PullRequestStatusEnum:
    type: string
    enum:
      - OPEN
      - CLOSED
  PullRequestIdList:
    type: array
    items:
      $ref: '#/definitions/PullRequestId'
  SortByEnum:
    type: string
    enum:
      - repositoryName
      - lastModifiedDate
  OrderEnum:
    type: string
    enum:
      - ascending
      - descending
  RepositoryNameIdPairList:
    type: array
    items:
      $ref: '#/definitions/RepositoryNameIdPair'
  ResourceArn:
    type: string
  Position:
    type: integer
  RelativeFileVersionEnum:
    type: string
    enum:
      - BEFORE
      - AFTER
  MergeHunkDetail:
    type: object
    properties:
      startLine:
        $ref: '#/definitions/LineNumber'
        description: The start position of the hunk in the merge result.
      endLine:
        $ref: '#/definitions/LineNumber'
        description: The end position of the hunk in the merge result.
      hunkContent:
        $ref: '#/definitions/HunkContent'
        description: The base-64 encoded content of the hunk merged region that might contain a conflict.
    description: Information about the details of a merge hunk that contains a conflict in a merge or pull request operation.
  MergeHunk:
    type: object
    properties:
      isConflict:
        $ref: '#/definitions/IsHunkConflict'
        description: 'A Boolean value indicating whether a combination of hunks contains a conflict. Conflicts occur when the same file or the same lines in a file were modified in both the source and destination of a merge or pull request. Valid values include true, false, and null. True when the hunk represents a conflict and one or more files contains a line conflict. File mode conflicts in a merge do not set this to true.'
      source:
        $ref: '#/definitions/MergeHunkDetail'
        description: Information about the merge hunk in the source of a merge or pull request.
      destination:
        $ref: '#/definitions/MergeHunkDetail'
        description: Information about the merge hunk in the destination of a merge or pull request.
      base:
        $ref: '#/definitions/MergeHunkDetail'
        description: Information about the merge hunk in the base of a merge or pull request.
    description: Information about merge hunks in a merge or pull request operation.
  MergeMetadata:
    type: object
    properties:
      isMerged:
        $ref: '#/definitions/IsMerged'
        description: A Boolean value indicating whether the merge has been made.
      mergedBy:
        $ref: '#/definitions/Arn'
        description: The Amazon Resource Name (ARN) of the user who merged the branches.
      mergeCommitId:
        $ref: '#/definitions/CommitId'
        description: 'The commit ID for the merge commit, if any.'
      mergeOption:
        $ref: '#/definitions/MergeOptionTypeEnum'
        description: The merge strategy used in the merge.
    description: Returns information about a merge or potential merge between a source reference and a destination reference in a pull request.
  ObjectTypeEnum:
    type: string
    enum:
      - FILE
      - DIRECTORY
      - GIT_LINK
      - SYMBOLIC_LINK
  PullRequestTargetList:
    type: array
    items:
      $ref: '#/definitions/PullRequestTarget'
  PullRequestCreatedEventMetadata:
    type: object
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where the pull request was created.
      sourceCommitId:
        $ref: '#/definitions/CommitId'
        description: The commit ID on the source branch used when the pull request was created.
      destinationCommitId:
        $ref: '#/definitions/CommitId'
        description: The commit ID of the tip of the branch specified as the destination branch when the pull request was created.
      mergeBase:
        $ref: '#/definitions/CommitId'
        description: The commit ID of the most recent commit that the source branch and the destination branch have in common.
    description: Metadata about the pull request that is used when comparing the pull request source with its destination.
  PullRequestStatusChangedEventMetadata:
    type: object
    properties:
      pullRequestStatus:
        $ref: '#/definitions/PullRequestStatusEnum'
        description: The changed status of the pull request.
    description: Information about a change to the status of a pull request.
  PullRequestSourceReferenceUpdatedEventMetadata:
    type: object
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where the pull request was updated.
      beforeCommitId:
        $ref: '#/definitions/CommitId'
        description: The full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was updated.
      afterCommitId:
        $ref: '#/definitions/CommitId'
        description: The full commit ID of the commit in the source branch that was the tip of the branch at the time the pull request was updated.
      mergeBase:
        $ref: '#/definitions/CommitId'
        description: The commit ID of the most recent commit that the source branch and the destination branch have in common.
    description: Information about an update to the source branch of a pull request.
  PullRequestMergedStateChangedEventMetadata:
    type: object
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository where the pull request was created.
      destinationReference:
        $ref: '#/definitions/ReferenceName'
        description: The name of the branch that the pull request is merged into.
      mergeMetadata:
        $ref: '#/definitions/MergeMetadata'
        description: Information about the merge state change event.
    description: 'Returns information about the change in the merge state for a pull request event. '
  PullRequestEvent:
    type: object
    properties:
      pullRequestId:
        $ref: '#/definitions/PullRequestId'
        description: The system-generated ID of the pull request.
      eventDate:
        $ref: '#/definitions/EventDate'
        description: 'The day and time of the pull request event, in timestamp format.'
      pullRequestEventType:
        $ref: '#/definitions/PullRequestEventType'
        description: 'The type of the pull request event (for example, a status change event (PULL_REQUEST_STATUS_CHANGED) or update event (PULL_REQUEST_SOURCE_REFERENCE_UPDATED)).'
      actorArn:
        $ref: '#/definitions/Arn'
        description: The Amazon Resource Name (ARN) of the user whose actions resulted in the event. Examples include updating the pull request with more commits or changing the status of a pull request.
      pullRequestCreatedEventMetadata:
        $ref: '#/definitions/PullRequestCreatedEventMetadata'
        description: Information about the source and destination branches for the pull request.
      pullRequestStatusChangedEventMetadata:
        $ref: '#/definitions/PullRequestStatusChangedEventMetadata'
        description: Information about the change in status for the pull request event.
      pullRequestSourceReferenceUpdatedEventMetadata:
        $ref: '#/definitions/PullRequestSourceReferenceUpdatedEventMetadata'
        description: 'Information about the updated source branch for the pull request event. '
      pullRequestMergedStateChangedEventMetadata:
        $ref: '#/definitions/PullRequestMergedStateChangedEventMetadata'
        description: Information about the change in mergability state for the pull request event.
      approvalRuleEventMetadata:
        $ref: '#/definitions/ApprovalRuleEventMetadata'
        description: Information about a pull request event.
      approvalStateChangedEventMetadata:
        $ref: '#/definitions/ApprovalStateChangedEventMetadata'
        description: Information about an approval state change for a pull request.
      approvalRuleOverriddenEventMetadata:
        $ref: '#/definitions/ApprovalRuleOverriddenEventMetadata'
        description: Information about an approval rule override event for a pull request.
    description: Returns information about a pull request event.
  ReferenceName:
    type: string
  PullRequestTarget:
    type: object
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the pull request source and destination branches.
      sourceReference:
        $ref: '#/definitions/ReferenceName'
        description: The branch of the repository that contains the changes for the pull request. Also known as the source branch.
      destinationReference:
        $ref: '#/definitions/ReferenceName'
        description: 'The branch of the repository where the pull request changes are merged. Also known as the destination branch. '
      destinationCommit:
        $ref: '#/definitions/CommitId'
        description: The full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.
      sourceCommit:
        $ref: '#/definitions/CommitId'
        description: 'The full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push while the pull request is open, the commit ID changes to reflect the new tip of the branch.'
      mergeBase:
        $ref: '#/definitions/CommitId'
        description: The commit ID of the most recent commit that the source branch and the destination branch have in common.
      mergeMetadata:
        $ref: '#/definitions/MergeMetadata'
        description: 'Returns metadata about the state of the merge, including whether the merge has been made.'
    description: Returns information about a pull request target.
  PutFileEntry:
    type: object
    required:
      - filePath
    properties:
      filePath:
        $ref: '#/definitions/Path'
        description: 'The full path to the file in the repository, including the name of the file.'
      fileMode:
        $ref: '#/definitions/FileModeTypeEnum'
        description: The extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.
      fileContent:
        $ref: '#/definitions/FileContent'
        description: 'The content of the file, if a source file is not specified.'
      sourceFile:
        $ref: '#/definitions/SourceFileSpecifier'
        description: 'The name and full path of the file that contains the changes you want to make as part of the commit, if you are not providing the file content directly.'
    description: Information about a file added or updated as part of a commit.
  SourceFileSpecifier:
    type: object
    required:
      - filePath
    properties:
      filePath:
        $ref: '#/definitions/Path'
        description: 'The full path to the file, including the name of the file.'
      isMove:
        $ref: '#/definitions/IsMove'
        description: Whether to remove the source file from the parent commit.
    description: Information about a source file that is part of changes made in a commit.
  ReplaceContentEntry:
    type: object
    required:
      - filePath
      - replacementType
    properties:
      filePath:
        $ref: '#/definitions/Path'
        description: The path of the conflicting file.
      replacementType:
        $ref: '#/definitions/ReplacementTypeEnum'
        description: The replacement type to use when determining how to resolve the conflict.
      content:
        $ref: '#/definitions/FileContent'
        description: The base-64 encoded content to use when the replacement type is USE_NEW_CONTENT.
      fileMode:
        $ref: '#/definitions/FileModeTypeEnum'
        description: The file mode to apply during conflict resoltion.
    description: Information about a replacement content entry in the conflict of a merge or pull request operation.
  ReplacementTypeEnum:
    type: string
    enum:
      - KEEP_BASE
      - KEEP_SOURCE
      - KEEP_DESTINATION
      - USE_NEW_CONTENT
  RepositoryNameIdPair:
    type: object
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name associated with the repository.
      repositoryId:
        $ref: '#/definitions/RepositoryId'
        description: The ID associated with the repository.
    description: Information about a repository name and ID.
  RepositoryTriggerName:
    type: string
  RepositoryTriggerCustomData:
    type: string
  RepositoryTriggerEventList:
    type: array
    items:
      $ref: '#/definitions/RepositoryTriggerEventEnum'
  RepositoryTrigger:
    type: object
    required:
      - name
      - destinationArn
      - events
    properties:
      name:
        $ref: '#/definitions/RepositoryTriggerName'
        description: The name of the trigger.
      destinationArn:
        $ref: '#/definitions/Arn'
        description: 'The ARN of the resource that is the target for a trigger (for example, the ARN of a topic in Amazon SNS).'
      customData:
        $ref: '#/definitions/RepositoryTriggerCustomData'
        description: Any custom data associated with the trigger to be included in the information sent to the target of the trigger.
      branches:
        $ref: '#/definitions/BranchNameList'
        description: '<p>The branches to be included in the trigger configuration. If you specify an empty array, the trigger applies to all branches.</p> <note> <p>Although no content is required in the array, you must include the array itself.</p> </note>'
      events:
        $ref: '#/definitions/RepositoryTriggerEventList'
        description: '<p>The repository events that cause the trigger to run actions in another service, such as sending a notification through Amazon SNS. </p> <note> <p>The valid value "all" cannot be used with any other values.</p> </note>'
    description: Information about a trigger for a repository.
  RepositoryTriggerEventEnum:
    type: string
    enum:
      - all
      - updateReference
      - createReference
      - deleteReference
  RepositoryTriggerExecutionFailureMessage:
    type: string
  RepositoryTriggerExecutionFailure:
    type: object
    properties:
      trigger:
        $ref: '#/definitions/RepositoryTriggerName'
        description: The name of the trigger that did not run.
      failureMessage:
        $ref: '#/definitions/RepositoryTriggerExecutionFailureMessage'
        description: Message information about the trigger that did not run.
    description: A trigger failed to run.
  RepositoryTriggerExecutionFailureList:
    type: array
    items:
      $ref: '#/definitions/RepositoryTriggerExecutionFailure'
  RepositoryTriggerNameList:
    type: array
    items:
      $ref: '#/definitions/RepositoryTriggerName'
  SetFileModeEntry:
    type: object
    required:
      - filePath
      - fileMode
    properties:
      filePath:
        $ref: '#/definitions/Path'
        description: 'The full path to the file, including the name of the file.'
      fileMode:
        $ref: '#/definitions/FileModeTypeEnum'
        description: The file mode for the file.
    description: Information about the file mode changes.
  SubModule:
    type: object
    properties:
      commitId:
        $ref: '#/definitions/ObjectId'
        description: The commit ID that contains the reference to the submodule.
      absolutePath:
        $ref: '#/definitions/Path'
        description: The fully qualified path to the folder that contains the reference to the submodule.
      relativePath:
        $ref: '#/definitions/Path'
        description: The relative path of the submodule from the folder where the query originated.
    description: Returns information about a submodule reference in a repository folder.
  SymbolicLink:
    type: object
    properties:
      blobId:
        $ref: '#/definitions/ObjectId'
        description: The blob ID that contains the information about the symbolic link.
      absolutePath:
        $ref: '#/definitions/Path'
        description: The fully qualified path to the folder that contains the symbolic link.
      relativePath:
        $ref: '#/definitions/Path'
        description: The relative path of the symbolic link from the folder where the query originated.
      fileMode:
        $ref: '#/definitions/FileModeTypeEnum'
        description: The file mode permissions of the blob that cotains information about the symbolic link.
    description: Returns information about a symbolic link in a repository folder.
  TagKey:
    type: string
    minLength: 1
    maxLength: 128
  TagKeysList:
    type: array
    items:
      $ref: '#/definitions/TagKey'
  TagValue:
    type: string
    minLength: 0
    maxLength: 256
  Target:
    type: object
    required:
      - repositoryName
      - sourceReference
    properties:
      repositoryName:
        $ref: '#/definitions/RepositoryName'
        description: The name of the repository that contains the pull request.
      sourceReference:
        $ref: '#/definitions/ReferenceName'
        description: The branch of the repository that contains the changes for the pull request. Also known as the source branch.
      destinationReference:
        $ref: '#/definitions/ReferenceName'
        description: The branch of the repository where the pull request changes are merged. Also known as the destination branch.
    description: Returns information about a target for a pull request.
