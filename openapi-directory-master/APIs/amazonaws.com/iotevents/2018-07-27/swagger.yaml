swagger: '2.0'
info:
  version: '2018-07-27'
  x-release: v4
  title: AWS IoT Events
  description: 'AWS IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. AWS IoT Events API commands enable you to create, read, update and delete inputs and detector models, and to list their versions.'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: iotevents
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/iotevents-2018-07-27.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/iotevents/'
host: iotevents.amazonaws.com
basePath: /
schemes:
  - https
  - http
x-servers:
  - url: 'http://iotevents.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS IoT Events multi-region endpoint
  - url: 'https://iotevents.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-south-1
          - sa-east-1
        default: us-east-1
    description: The AWS IoT Events multi-region endpoint
  - url: 'http://iotevents.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS IoT Events endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://iotevents.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS IoT Events endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
consumes:
  - application/json
produces:
  - application/json
parameters:
  X-Amz-Content-Sha256:
    name: X-Amz-Content-Sha256
    in: header
    type: string
    required: false
  X-Amz-Date:
    name: X-Amz-Date
    in: header
    type: string
    required: false
  X-Amz-Algorithm:
    name: X-Amz-Algorithm
    in: header
    type: string
    required: false
  X-Amz-Credential:
    name: X-Amz-Credential
    in: header
    type: string
    required: false
  X-Amz-Security-Token:
    name: X-Amz-Security-Token
    in: header
    type: string
    required: false
  X-Amz-Signature:
    name: X-Amz-Signature
    in: header
    type: string
    required: false
  X-Amz-SignedHeaders:
    name: X-Amz-SignedHeaders
    in: header
    type: string
    required: false
securityDefinitions:
  hmac:
    type: apiKey
    name: Authorization
    in: header
    description: Amazon Signature authorization v4
    x-amazon-apigateway-authtype: awsSigv4
security:
  - hmac: []
paths:
  /detector-models:
    post:
      operationId: CreateDetectorModel
      description: Creates a detector model.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CreateDetectorModelResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '482':
          description: ResourceAlreadyExistsException
          schema:
            $ref: '#/definitions/ResourceAlreadyExistsException'
        '483':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '484':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '485':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '486':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - detectorModelName
              - detectorModelDefinition
              - roleArn
            properties:
              detectorModelName:
                description: The name of the detector model.
                type: string
                pattern: '^[a-zA-Z0-9_-]+$'
                minLength: 1
                maxLength: 128
              detectorModelDefinition:
                description: Information that defines how a detector operates.
                type: object
                properties:
                  states:
                    $ref: '#/definitions/States'
                    description: Information about the states of the detector.
                  initialStateName:
                    $ref: '#/definitions/StateName'
                    description: The state that is entered at the creation of each detector (instance).
              detectorModelDescription:
                description: A brief description of the detector model.
                type: string
                maxLength: 128
              key:
                description: The input attribute key used to identify a device or system in order to create a detector (an instance of the detector model) and then to route each input received to the appropriate detector (instance). This parameter uses a JSON-path expression to specify the attribute-value pair in the message payload of each input that is used to identify the device associated with the input.
                type: string
                pattern: '^((`[\w\- ]+`)|([\w\-]+))(\.((`[\w- ]+`)|([\w\-]+)))*$'
                minLength: 1
                maxLength: 128
              roleArn:
                description: The ARN of the role that grants permission to AWS IoT Events to perform its operations.
                type: string
                minLength: 1
                maxLength: 2048
              tags:
                description: Metadata that can be used to manage the detector model.
                type: array
                items:
                  $ref: '#/definitions/Tag'
              evaluationMethod:
                description: 'Information about the order in which events are evaluated and how actions are executed. '
                type: string
                enum:
                  - BATCH
                  - SERIAL
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListDetectorModels
      description: Lists the detector models you have created. Only the metadata associated with each detector model is returned.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListDetectorModelsResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '482':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: nextToken
          in: query
          required: false
          description: The token for the next set of results.
          type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return at one time.
          type: integer
          minimum: 1
          maximum: 250
  /inputs:
    post:
      operationId: CreateInput
      description: Creates an input.
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/CreateInputResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '482':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '484':
          description: ResourceAlreadyExistsException
          schema:
            $ref: '#/definitions/ResourceAlreadyExistsException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - inputName
              - inputDefinition
            properties:
              inputName:
                description: The name you want to give to the input.
                type: string
                pattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
                minLength: 1
                maxLength: 128
              inputDescription:
                description: A brief description of the input.
                type: string
                maxLength: 128
              inputDefinition:
                description: The definition of the input.
                type: object
                properties:
                  attributes:
                    $ref: '#/definitions/Attributes'
                    description: 'The attributes from the JSON payload that are made available by the input. Inputs are derived from messages sent to the AWS IoT Events system using <code>BatchPutMessage</code>. Each such message contains a JSON payload, and those attributes (and their paired values) specified here are available for use in the <code>"condition"</code> expressions used by detectors that monitor this input. '
              tags:
                description: Metadata that can be used to manage the input.
                type: array
                items:
                  $ref: '#/definitions/Tag'
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListInputs
      description: Lists the inputs you have created.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListInputsResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '482':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: nextToken
          in: query
          required: false
          description: The token for the next set of results.
          type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return at one time.
          type: integer
          minimum: 1
          maximum: 250
  '/detector-models/{detectorModelName}':
    delete:
      operationId: DeleteDetectorModel
      description: Deletes a detector model. Any active instances of the detector model are also deleted.
      responses:
        '204':
          description: Success
          schema:
            $ref: '#/definitions/DeleteDetectorModelResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: detectorModelName
          in: path
          required: true
          description: The name of the detector model to be deleted.
          type: string
          pattern: '^[a-zA-Z0-9_-]+$'
          minLength: 1
          maxLength: 128
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeDetectorModel
      description: 'Describes a detector model. If the <code>"version"</code> parameter is not specified, information about the latest version is returned.'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeDetectorModelResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: detectorModelName
          in: path
          required: true
          description: The name of the detector model.
          type: string
          pattern: '^[a-zA-Z0-9_-]+$'
          minLength: 1
          maxLength: 128
        - name: version
          in: query
          required: false
          description: The version of the detector model.
          type: string
          minLength: 1
          maxLength: 128
    post:
      operationId: UpdateDetectorModel
      description: Updates a detector model. Detectors (instances) spawned by the previous version are deleted and then re-created as new inputs arrive.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateDetectorModelResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '485':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: detectorModelName
          in: path
          required: true
          description: The name of the detector model that is updated.
          type: string
          pattern: '^[a-zA-Z0-9_-]+$'
          minLength: 1
          maxLength: 128
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - detectorModelDefinition
              - roleArn
            properties:
              detectorModelDefinition:
                description: Information that defines how a detector operates.
                type: object
                properties:
                  states:
                    $ref: '#/definitions/States'
                    description: Information about the states of the detector.
                  initialStateName:
                    $ref: '#/definitions/StateName'
                    description: The state that is entered at the creation of each detector (instance).
              detectorModelDescription:
                description: A brief description of the detector model.
                type: string
                maxLength: 128
              roleArn:
                description: The ARN of the role that grants permission to AWS IoT Events to perform its operations.
                type: string
                minLength: 1
                maxLength: 2048
              evaluationMethod:
                description: 'Information about the order in which events are evaluated and how actions are executed. '
                type: string
                enum:
                  - BATCH
                  - SERIAL
  '/inputs/{inputName}':
    delete:
      operationId: DeleteInput
      description: Deletes an input.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DeleteInputResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
      parameters:
        - name: inputName
          in: path
          required: true
          description: The name of the input to delete.
          type: string
          pattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
          minLength: 1
          maxLength: 128
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    get:
      operationId: DescribeInput
      description: Describes an input.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeInputResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: inputName
          in: path
          required: true
          description: The name of the input.
          type: string
          pattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
          minLength: 1
          maxLength: 128
    put:
      operationId: UpdateInput
      description: Updates an input.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UpdateInputResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '482':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
      parameters:
        - name: inputName
          in: path
          required: true
          description: The name of the input you want to update.
          type: string
          pattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
          minLength: 1
          maxLength: 128
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - inputDefinition
            properties:
              inputDescription:
                description: A brief description of the input.
                type: string
                maxLength: 128
              inputDefinition:
                description: The definition of the input.
                type: object
                properties:
                  attributes:
                    $ref: '#/definitions/Attributes'
                    description: 'The attributes from the JSON payload that are made available by the input. Inputs are derived from messages sent to the AWS IoT Events system using <code>BatchPutMessage</code>. Each such message contains a JSON payload, and those attributes (and their paired values) specified here are available for use in the <code>"condition"</code> expressions used by detectors that monitor this input. '
  /logging:
    get:
      operationId: DescribeLoggingOptions
      description: Retrieves the current settings of the AWS IoT Events logging options.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DescribeLoggingOptionsResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '482':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '483':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '485':
          description: UnsupportedOperationException
          schema:
            $ref: '#/definitions/UnsupportedOperationException'
      parameters: []
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    put:
      operationId: PutLoggingOptions
      description: '<p>Sets or updates the AWS IoT Events logging options.</p> <p>If you update the value of any <code>"loggingOptions"</code> field, it takes up to one minute for the change to take effect. Also, if you change the policy attached to the role you specified in the <code>"roleArn"</code> field (for example, to correct an invalid policy) it takes up to five minutes for that change to take effect.</p>'
      responses:
        '200':
          description: Success
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '482':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '483':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
        '484':
          description: UnsupportedOperationException
          schema:
            $ref: '#/definitions/UnsupportedOperationException'
        '485':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - loggingOptions
            properties:
              loggingOptions:
                description: The values of the AWS IoT Events logging options.
                type: object
                properties:
                  roleArn:
                    $ref: '#/definitions/AmazonResourceName'
                    description: The ARN of the role that grants permission to AWS IoT Events to perform logging.
                  level:
                    $ref: '#/definitions/LoggingLevel'
                    description: The logging level.
                  enabled:
                    $ref: '#/definitions/LoggingEnabled'
                    description: 'If TRUE, logging is enabled for AWS IoT Events.'
                  detectorDebugOptions:
                    $ref: '#/definitions/DetectorDebugOptions'
                    description: Information that identifies those detector models and their detectors (instances) for which the logging level is given.
  '/detector-models/{detectorModelName}/versions':
    get:
      operationId: ListDetectorModelVersions
      description: Lists all the versions of a detector model. Only the metadata associated with each detector model version is returned.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListDetectorModelVersionsResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '483':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
        '484':
          description: ServiceUnavailableException
          schema:
            $ref: '#/definitions/ServiceUnavailableException'
      parameters:
        - name: detectorModelName
          in: path
          required: true
          description: The name of the detector model whose versions are returned.
          type: string
          pattern: '^[a-zA-Z0-9_-]+$'
          minLength: 1
          maxLength: 128
        - name: nextToken
          in: query
          required: false
          description: The token for the next set of results.
          type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of results to return at one time.
          type: integer
          minimum: 1
          maximum: 250
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
  '/tags#resourceArn':
    get:
      operationId: ListTagsForResource
      description: Lists the tags (metadata) you have assigned to the resource.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ListTagsForResourceResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '483':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: resourceArn
          in: query
          required: true
          description: The ARN of the resource.
          type: string
          minLength: 1
          maxLength: 2048
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
    post:
      operationId: TagResource
      description: Adds to or modifies the tags of the given resource. Tags are metadata that can be used to manage a resource.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/TagResourceResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '483':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '484':
          description: LimitExceededException
          schema:
            $ref: '#/definitions/LimitExceededException'
        '485':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: resourceArn
          in: query
          required: true
          description: The ARN of the resource.
          type: string
          minLength: 1
          maxLength: 2048
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - tags
            properties:
              tags:
                description: The new or modified tags for the resource.
                type: array
                items:
                  $ref: '#/definitions/Tag'
  '/tags#resourceArn&tagKeys':
    delete:
      operationId: UntagResource
      description: Removes the given tags (metadata) from the resource.
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UntagResourceResponse'
        '480':
          description: InvalidRequestException
          schema:
            $ref: '#/definitions/InvalidRequestException'
        '481':
          description: ResourceNotFoundException
          schema:
            $ref: '#/definitions/ResourceNotFoundException'
        '482':
          description: ResourceInUseException
          schema:
            $ref: '#/definitions/ResourceInUseException'
        '483':
          description: ThrottlingException
          schema:
            $ref: '#/definitions/ThrottlingException'
        '484':
          description: InternalFailureException
          schema:
            $ref: '#/definitions/InternalFailureException'
      parameters:
        - name: resourceArn
          in: query
          required: true
          description: The ARN of the resource.
          type: string
          minLength: 1
          maxLength: 2048
        - name: tagKeys
          in: query
          required: true
          description: A list of the keys of the tags to be removed from the resource.
          type: array
          items:
            type: string
    parameters:
      - $ref: '#/parameters/X-Amz-Content-Sha256'
      - $ref: '#/parameters/X-Amz-Date'
      - $ref: '#/parameters/X-Amz-Algorithm'
      - $ref: '#/parameters/X-Amz-Credential'
      - $ref: '#/parameters/X-Amz-Security-Token'
      - $ref: '#/parameters/X-Amz-Signature'
      - $ref: '#/parameters/X-Amz-SignedHeaders'
definitions:
  CreateDetectorModelResponse:
    type: object
    properties:
      detectorModelConfiguration:
        $ref: '#/definitions/DetectorModelConfiguration'
        description: Information about how the detector model is configured.
  States:
    type: array
    items:
      $ref: '#/definitions/State'
    minItems: 1
  StateName:
    type: string
    minLength: 1
    maxLength: 128
  Tag:
    type: object
    required:
      - key
      - value
    properties:
      key:
        $ref: '#/definitions/TagKey'
        description: The tag's key.
      value:
        $ref: '#/definitions/TagValue'
        description: The tag's value.
    description: Metadata that can be used to manage the resource.
  InvalidRequestException: {}
  ResourceInUseException: {}
  ResourceAlreadyExistsException: {}
  LimitExceededException: {}
  ThrottlingException: {}
  InternalFailureException: {}
  ServiceUnavailableException: {}
  CreateInputResponse:
    type: object
    properties:
      inputConfiguration:
        $ref: '#/definitions/InputConfiguration'
        description: Information about the configuration of the input.
  Attributes:
    type: array
    items:
      $ref: '#/definitions/Attribute'
    minItems: 1
    maxItems: 200
  DeleteDetectorModelResponse:
    type: object
    properties: {}
  ResourceNotFoundException: {}
  DeleteInputResponse:
    type: object
    properties: {}
  DescribeDetectorModelResponse:
    type: object
    properties:
      detectorModel:
        $ref: '#/definitions/DetectorModel'
        description: Information about the detector model.
  DescribeInputResponse:
    type: object
    properties:
      input:
        $ref: '#/definitions/Input'
        description: Information about the input.
  DescribeLoggingOptionsResponse:
    type: object
    properties:
      loggingOptions:
        $ref: '#/definitions/LoggingOptions'
        description: The current settings of the AWS IoT Events logging options.
  UnsupportedOperationException: {}
  ListDetectorModelVersionsResponse:
    type: object
    properties:
      detectorModelVersionSummaries:
        $ref: '#/definitions/DetectorModelVersionSummaries'
        description: Summary information about the detector model versions.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'A token to retrieve the next set of results, or <code>null</code> if there are no additional results.'
  ListDetectorModelsResponse:
    type: object
    properties:
      detectorModelSummaries:
        $ref: '#/definitions/DetectorModelSummaries'
        description: Summary information about the detector models.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'A token to retrieve the next set of results, or <code>null</code> if there are no additional results.'
  ListInputsResponse:
    type: object
    properties:
      inputSummaries:
        $ref: '#/definitions/InputSummaries'
        description: Summary information about the inputs.
      nextToken:
        $ref: '#/definitions/NextToken'
        description: 'A token to retrieve the next set of results, or <code>null</code> if there are no additional results.'
  ListTagsForResourceResponse:
    type: object
    properties:
      tags:
        $ref: '#/definitions/Tags'
        description: The list of tags assigned to the resource.
  AmazonResourceName:
    type: string
    minLength: 1
    maxLength: 2048
  LoggingLevel:
    type: string
    enum:
      - ERROR
      - INFO
      - DEBUG
  LoggingEnabled:
    type: boolean
  DetectorDebugOptions:
    type: array
    items:
      $ref: '#/definitions/DetectorDebugOption'
    minItems: 1
  TagResourceResponse:
    type: object
    properties: {}
  UntagResourceResponse:
    type: object
    properties: {}
  TagKey:
    type: string
    minLength: 1
    maxLength: 128
  UpdateDetectorModelResponse:
    type: object
    properties:
      detectorModelConfiguration:
        $ref: '#/definitions/DetectorModelConfiguration'
        description: Information about how the detector model is configured.
  UpdateInputResponse:
    type: object
    properties:
      inputConfiguration:
        $ref: '#/definitions/InputConfiguration'
        description: Information about the configuration of the input.
  SetVariableAction:
    type: object
    required:
      - variableName
      - value
    properties:
      variableName:
        $ref: '#/definitions/VariableName'
        description: The name of the variable.
      value:
        $ref: '#/definitions/VariableValue'
        description: The new value of the variable.
    description: Information about the variable and its new value.
  SNSTopicPublishAction:
    type: object
    required:
      - targetArn
    properties:
      targetArn:
        $ref: '#/definitions/AmazonResourceName'
        description: The ARN of the Amazon SNS target where the message is sent.
    description: Information required to publish the Amazon SNS message.
  IotTopicPublishAction:
    type: object
    required:
      - mqttTopic
    properties:
      mqttTopic:
        $ref: '#/definitions/MQTTTopic'
        description: The MQTT topic of the message.
    description: Information required to publish the MQTT message via the AWS IoT message broker.
  SetTimerAction:
    type: object
    required:
      - timerName
      - seconds
    properties:
      timerName:
        $ref: '#/definitions/TimerName'
        description: The name of the timer.
      seconds:
        $ref: '#/definitions/Seconds'
        description: The number of seconds until the timer expires. The minimum value is 60 seconds to ensure accuracy.
    description: Information needed to set the timer.
  ClearTimerAction:
    type: object
    required:
      - timerName
    properties:
      timerName:
        $ref: '#/definitions/TimerName'
        description: The name of the timer to clear.
    description: Information needed to clear the timer.
  ResetTimerAction:
    type: object
    required:
      - timerName
    properties:
      timerName:
        $ref: '#/definitions/TimerName'
        description: The name of the timer to reset.
    description: Information needed to reset the timer.
  LambdaAction:
    type: object
    required:
      - functionArn
    properties:
      functionArn:
        $ref: '#/definitions/AmazonResourceName'
        description: The ARN of the Lambda function that is executed.
    description: 'Calls a Lambda function, passing in information about the detector model instance and the event that triggered the action.'
  IotEventsAction:
    type: object
    required:
      - inputName
    properties:
      inputName:
        $ref: '#/definitions/InputName'
        description: The name of the AWS IoT Events input where the data is sent.
    description: 'Sends an AWS IoT Events input, passing in information about the detector model instance and the event that triggered the action.'
  SqsAction:
    type: object
    required:
      - queueUrl
    properties:
      queueUrl:
        $ref: '#/definitions/QueueUrl'
        description: The URL of the SQS queue where the data is written.
      useBase64:
        $ref: '#/definitions/UseBase64'
        description: 'Set this to TRUE if you want the data to be Base-64 encoded before it is written to the queue. Otherwise, set this to FALSE.'
    description: Sends information about the detector model instance and the event that triggered the action to an Amazon SQS queue.
  FirehoseAction:
    type: object
    required:
      - deliveryStreamName
    properties:
      deliveryStreamName:
        $ref: '#/definitions/DeliveryStreamName'
        description: The name of the Kinesis Data Firehose delivery stream where the data is written.
      separator:
        $ref: '#/definitions/FirehoseSeparator'
        description: 'A character separator that is used to separate records written to the Kinesis Data Firehose delivery stream. Valid values are: ''\n'' (newline), ''\t'' (tab), ''\r\n'' (Windows newline), '','' (comma).'
    description: Sends information about the detector model instance and the event that triggered the action to a Kinesis Data Firehose delivery stream.
  Action:
    type: object
    properties:
      setVariable:
        $ref: '#/definitions/SetVariableAction'
        description: Sets a variable to a specified value.
      sns:
        $ref: '#/definitions/SNSTopicPublishAction'
        description: Sends an Amazon SNS message.
      iotTopicPublish:
        $ref: '#/definitions/IotTopicPublishAction'
        description: Publishes an MQTT message with the given topic to the AWS IoT message broker.
      setTimer:
        $ref: '#/definitions/SetTimerAction'
        description: Information needed to set the timer.
      clearTimer:
        $ref: '#/definitions/ClearTimerAction'
        description: Information needed to clear the timer.
      resetTimer:
        $ref: '#/definitions/ResetTimerAction'
        description: Information needed to reset the timer.
      lambda:
        $ref: '#/definitions/LambdaAction'
        description: 'Calls a Lambda function, passing in information about the detector model instance and the event that triggered the action.'
      iotEvents:
        $ref: '#/definitions/IotEventsAction'
        description: 'Sends an IoT Events input, passing in information about the detector model instance and the event that triggered the action.'
      sqs:
        $ref: '#/definitions/SqsAction'
        description: Sends information about the detector model instance and the event that triggered the action to an Amazon SQS queue.
      firehose:
        $ref: '#/definitions/FirehoseAction'
        description: Sends information about the detector model instance and the event that triggered the action to a Kinesis Data Firehose delivery stream.
    description: An action to be performed when the <code>"condition"</code> is TRUE.
  Actions:
    type: array
    items:
      $ref: '#/definitions/Action'
  AttributeJsonPath:
    type: string
    pattern: '^((`[\w\- ]+`)|([\w\-]+))(\.((`[\w- ]+`)|([\w\-]+)))*$'
    minLength: 1
    maxLength: 128
  Attribute:
    type: object
    required:
      - jsonPath
    properties:
      jsonPath:
        $ref: '#/definitions/AttributeJsonPath'
        description: '<p>An expression that specifies an attribute-value pair in a JSON structure. Use this to specify an attribute from the JSON payload that is made available by the input. Inputs are derived from messages sent to the AWS IoT Events system (<code>BatchPutMessage</code>). Each such message contains a JSON payload, and the attribute (and its paired value) specified here are available for use in the <code>"condition"</code> expressions used by detectors. </p> <p>Syntax: <code>&lt;field-name&gt;.&lt;field-name&gt;...</code> </p>'
    description: 'The attributes from the JSON payload that are made available by the input. Inputs are derived from messages sent to the AWS IoT Events system using <code>BatchPutMessage</code>. Each such message contains a JSON payload, and those attributes (and their paired values) specified here are available for use in the <code>condition</code> expressions used by detectors. '
  TimerName:
    type: string
    minLength: 1
    maxLength: 128
  Condition:
    type: string
    maxLength: 512
  DetectorModelName:
    type: string
    pattern: '^[a-zA-Z0-9_-]+$'
    minLength: 1
    maxLength: 128
  DetectorModelDefinition:
    type: object
    required:
      - states
      - initialStateName
    properties:
      states:
        $ref: '#/definitions/States'
        description: Information about the states of the detector.
      initialStateName:
        $ref: '#/definitions/StateName'
        description: The state that is entered at the creation of each detector (instance).
    description: Information that defines how a detector operates.
  DetectorModelDescription:
    type: string
    maxLength: 128
  Tags:
    type: array
    items:
      $ref: '#/definitions/Tag'
  EvaluationMethod:
    type: string
    enum:
      - BATCH
      - SERIAL
  CreateDetectorModelRequest:
    type: object
    required:
      - detectorModelName
      - detectorModelDefinition
      - roleArn
    properties:
      detectorModelName:
        $ref: '#/definitions/DetectorModelName'
        description: The name of the detector model.
      detectorModelDefinition:
        $ref: '#/definitions/DetectorModelDefinition'
        description: Information that defines how the detectors operate.
      detectorModelDescription:
        $ref: '#/definitions/DetectorModelDescription'
        description: A brief description of the detector model.
      key:
        $ref: '#/definitions/AttributeJsonPath'
        description: The input attribute key used to identify a device or system in order to create a detector (an instance of the detector model) and then to route each input received to the appropriate detector (instance). This parameter uses a JSON-path expression to specify the attribute-value pair in the message payload of each input that is used to identify the device associated with the input.
      roleArn:
        $ref: '#/definitions/AmazonResourceName'
        description: The ARN of the role that grants permission to AWS IoT Events to perform its operations.
      tags:
        $ref: '#/definitions/Tags'
        description: Metadata that can be used to manage the detector model.
      evaluationMethod:
        $ref: '#/definitions/EvaluationMethod'
        description: 'Information about the order in which events are evaluated and how actions are executed. '
  DetectorModelConfiguration:
    type: object
    properties:
      detectorModelName:
        $ref: '#/definitions/DetectorModelName'
        description: The name of the detector model.
      detectorModelVersion:
        $ref: '#/definitions/DetectorModelVersion'
        description: The version of the detector model.
      detectorModelDescription:
        $ref: '#/definitions/DetectorModelDescription'
        description: A brief description of the detector model.
      detectorModelArn:
        $ref: '#/definitions/DetectorModelArn'
        description: The ARN of the detector model.
      roleArn:
        $ref: '#/definitions/AmazonResourceName'
        description: The ARN of the role that grants permission to AWS IoT Events to perform its operations.
      creationTime:
        $ref: '#/definitions/Timestamp'
        description: The time the detector model was created.
      lastUpdateTime:
        $ref: '#/definitions/Timestamp'
        description: The time the detector model was last updated.
      status:
        $ref: '#/definitions/DetectorModelVersionStatus'
        description: The status of the detector model.
      key:
        $ref: '#/definitions/AttributeJsonPath'
        description: The input attribute key used to identify a device or system in order to create a detector (an instance of the detector model) and then to route each input received to the appropriate detector (instance). This parameter uses a JSON-path expression to specify the attribute-value pair in the message payload of each input that is used to identify the device associated with the input.
      evaluationMethod:
        $ref: '#/definitions/EvaluationMethod'
        description: 'Information about the order in which events are evaluated and how actions are executed. '
    description: Information about how the detector model is configured.
  InputName:
    type: string
    pattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
    minLength: 1
    maxLength: 128
  InputDescription:
    type: string
    maxLength: 128
  InputDefinition:
    type: object
    required:
      - attributes
    properties:
      attributes:
        $ref: '#/definitions/Attributes'
        description: 'The attributes from the JSON payload that are made available by the input. Inputs are derived from messages sent to the AWS IoT Events system using <code>BatchPutMessage</code>. Each such message contains a JSON payload, and those attributes (and their paired values) specified here are available for use in the <code>"condition"</code> expressions used by detectors that monitor this input. '
    description: The definition of the input.
  CreateInputRequest:
    type: object
    required:
      - inputName
      - inputDefinition
    properties:
      inputName:
        $ref: '#/definitions/InputName'
        description: The name you want to give to the input.
      inputDescription:
        $ref: '#/definitions/InputDescription'
        description: A brief description of the input.
      inputDefinition:
        $ref: '#/definitions/InputDefinition'
        description: The definition of the input.
      tags:
        $ref: '#/definitions/Tags'
        description: Metadata that can be used to manage the input.
  InputConfiguration:
    type: object
    required:
      - inputName
      - inputArn
      - creationTime
      - lastUpdateTime
      - status
    properties:
      inputName:
        $ref: '#/definitions/InputName'
        description: The name of the input.
      inputDescription:
        $ref: '#/definitions/InputDescription'
        description: A brief description of the input.
      inputArn:
        $ref: '#/definitions/InputArn'
        description: The ARN of the input.
      creationTime:
        $ref: '#/definitions/Timestamp'
        description: The time the input was created.
      lastUpdateTime:
        $ref: '#/definitions/Timestamp'
        description: The last time the input was updated.
      status:
        $ref: '#/definitions/InputStatus'
        description: The status of the input.
    description: Information about the configuration of an input.
  DeleteDetectorModelRequest:
    type: object
    properties: {}
  DeleteInputRequest:
    type: object
    properties: {}
  DeliveryStreamName:
    type: string
  DetectorModelVersion:
    type: string
    minLength: 1
    maxLength: 128
  DescribeDetectorModelRequest:
    type: object
    properties: {}
  DetectorModel:
    type: object
    properties:
      detectorModelDefinition:
        $ref: '#/definitions/DetectorModelDefinition'
        description: Information that defines how a detector operates.
      detectorModelConfiguration:
        $ref: '#/definitions/DetectorModelConfiguration'
        description: Information about how the detector is configured.
    description: Information about the detector model.
  DescribeInputRequest:
    type: object
    properties: {}
  Input:
    type: object
    properties:
      inputConfiguration:
        $ref: '#/definitions/InputConfiguration'
        description: Information about the configuration of an input.
      inputDefinition:
        $ref: '#/definitions/InputDefinition'
        description: The definition of the input.
    description: Information about the input.
  DescribeLoggingOptionsRequest:
    type: object
    properties: {}
  LoggingOptions:
    type: object
    required:
      - roleArn
      - level
      - enabled
    properties:
      roleArn:
        $ref: '#/definitions/AmazonResourceName'
        description: The ARN of the role that grants permission to AWS IoT Events to perform logging.
      level:
        $ref: '#/definitions/LoggingLevel'
        description: The logging level.
      enabled:
        $ref: '#/definitions/LoggingEnabled'
        description: 'If TRUE, logging is enabled for AWS IoT Events.'
      detectorDebugOptions:
        $ref: '#/definitions/DetectorDebugOptions'
        description: Information that identifies those detector models and their detectors (instances) for which the logging level is given.
    description: The values of the AWS IoT Events logging options.
  KeyValue:
    type: string
    pattern: '^[a-zA-Z0-9\-_:]+$'
    minLength: 1
    maxLength: 128
  DetectorDebugOption:
    type: object
    required:
      - detectorModelName
    properties:
      detectorModelName:
        $ref: '#/definitions/DetectorModelName'
        description: The name of the detector model.
      keyValue:
        $ref: '#/definitions/KeyValue'
        description: The value of the input attribute key used to create the detector (the instance of the detector model).
    description: The detector model and the specific detectors (instances) for which the logging level is given.
  DetectorModelArn:
    type: string
  Timestamp:
    type: string
    format: date-time
  DetectorModelVersionStatus:
    type: string
    enum:
      - ACTIVE
      - ACTIVATING
      - INACTIVE
      - DEPRECATED
      - DRAFT
      - PAUSED
      - FAILED
  DetectorModelSummary:
    type: object
    properties:
      detectorModelName:
        $ref: '#/definitions/DetectorModelName'
        description: The name of the detector model.
      detectorModelDescription:
        $ref: '#/definitions/DetectorModelDescription'
        description: A brief description of the detector model.
      creationTime:
        $ref: '#/definitions/Timestamp'
        description: The time the detector model was created.
    description: Information about the detector model.
  DetectorModelSummaries:
    type: array
    items:
      $ref: '#/definitions/DetectorModelSummary'
  DetectorModelVersionSummary:
    type: object
    properties:
      detectorModelName:
        $ref: '#/definitions/DetectorModelName'
        description: The name of the detector model.
      detectorModelVersion:
        $ref: '#/definitions/DetectorModelVersion'
        description: The ID of the detector model version.
      detectorModelArn:
        $ref: '#/definitions/DetectorModelArn'
        description: The ARN of the detector model version.
      roleArn:
        $ref: '#/definitions/AmazonResourceName'
        description: The ARN of the role that grants the detector model permission to perform its tasks.
      creationTime:
        $ref: '#/definitions/Timestamp'
        description: The time the detector model version was created.
      lastUpdateTime:
        $ref: '#/definitions/Timestamp'
        description: The last time the detector model version was updated.
      status:
        $ref: '#/definitions/DetectorModelVersionStatus'
        description: The status of the detector model version.
      evaluationMethod:
        $ref: '#/definitions/EvaluationMethod'
        description: 'Information about the order in which events are evaluated and how actions are executed. '
    description: Information about the detector model version.
  DetectorModelVersionSummaries:
    type: array
    items:
      $ref: '#/definitions/DetectorModelVersionSummary'
  EventName:
    type: string
    maxLength: 128
  Event:
    type: object
    required:
      - eventName
    properties:
      eventName:
        $ref: '#/definitions/EventName'
        description: The name of the event.
      condition:
        $ref: '#/definitions/Condition'
        description: '[Optional] The Boolean expression that when TRUE causes the <code>"actions"</code> to be performed. If not present, the actions are performed (=TRUE); if the expression result is not a Boolean value, the actions are NOT performed (=FALSE).'
      actions:
        $ref: '#/definitions/Actions'
        description: The actions to be performed.
    description: Specifies the <code>"actions"</code> to be performed when the <code>"condition"</code> evaluates to TRUE.
  Events:
    type: array
    items:
      $ref: '#/definitions/Event'
  FirehoseSeparator:
    type: string
    pattern: '([\n\t])|(\r\n)|(,)'
  InputArn:
    type: string
  InputStatus:
    type: string
    enum:
      - CREATING
      - UPDATING
      - ACTIVE
      - DELETING
  InputSummary:
    type: object
    properties:
      inputName:
        $ref: '#/definitions/InputName'
        description: The name of the input.
      inputDescription:
        $ref: '#/definitions/InputDescription'
        description: A brief description of the input.
      inputArn:
        $ref: '#/definitions/InputArn'
        description: The ARN of the input.
      creationTime:
        $ref: '#/definitions/Timestamp'
        description: The time the input was created.
      lastUpdateTime:
        $ref: '#/definitions/Timestamp'
        description: The last time the input was updated.
      status:
        $ref: '#/definitions/InputStatus'
        description: The status of the input.
    description: Information about the input.
  InputSummaries:
    type: array
    items:
      $ref: '#/definitions/InputSummary'
  MQTTTopic:
    type: string
    minLength: 1
    maxLength: 128
  NextToken:
    type: string
  MaxResults:
    type: integer
    minimum: 1
    maximum: 250
  ListDetectorModelVersionsRequest:
    type: object
    properties: {}
  ListDetectorModelsRequest:
    type: object
    properties: {}
  ListInputsRequest:
    type: object
    properties: {}
  ListTagsForResourceRequest:
    type: object
    properties: {}
  OnEnterLifecycle:
    type: object
    properties:
      events:
        $ref: '#/definitions/Events'
        description: Specifies the actions that are performed when the state is entered and the <code>"condition"</code> is TRUE.
    description: 'When entering this state, perform these <code>actions</code> if the <code>condition</code> is TRUE.'
  OnExitLifecycle:
    type: object
    properties:
      events:
        $ref: '#/definitions/Events'
        description: Specifies the <code>"actions"</code> that are performed when the state is exited and the <code>"condition"</code> is TRUE.
    description: 'When exiting this state, perform these <code>"actions"</code> if the specified <code>"condition"</code> is TRUE.'
  TransitionEvents:
    type: array
    items:
      $ref: '#/definitions/TransitionEvent'
  OnInputLifecycle:
    type: object
    properties:
      events:
        $ref: '#/definitions/Events'
        description: Specifies the actions performed when the <code>"condition"</code> evaluates to TRUE.
      transitionEvents:
        $ref: '#/definitions/TransitionEvents'
        description: 'Specifies the actions performed, and the next state entered, when a <code>"condition"</code> evaluates to TRUE.'
    description: Specifies the actions performed when the <code>"condition"</code> evaluates to TRUE.
  PutLoggingOptionsRequest:
    type: object
    required:
      - loggingOptions
    properties:
      loggingOptions:
        $ref: '#/definitions/LoggingOptions'
        description: The new values of the AWS IoT Events logging options.
  QueueUrl:
    type: string
  Seconds:
    type: integer
  VariableName:
    type: string
    pattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
    minLength: 1
    maxLength: 128
  VariableValue:
    type: string
    minLength: 1
    maxLength: 1024
  UseBase64:
    type: boolean
  State:
    type: object
    required:
      - stateName
    properties:
      stateName:
        $ref: '#/definitions/StateName'
        description: The name of the state.
      onInput:
        $ref: '#/definitions/OnInputLifecycle'
        description: 'When an input is received and the <code>"condition"</code> is TRUE, perform the specified <code>"actions"</code>.'
      onEnter:
        $ref: '#/definitions/OnEnterLifecycle'
        description: 'When entering this state, perform these <code>"actions"</code> if the <code>"condition"</code> is TRUE.'
      onExit:
        $ref: '#/definitions/OnExitLifecycle'
        description: 'When exiting this state, perform these <code>"actions"</code> if the specified <code>"condition"</code> is TRUE.'
    description: Information that defines a state of a detector.
  TagValue:
    type: string
    minLength: 0
    maxLength: 256
  TagKeys:
    type: array
    items:
      $ref: '#/definitions/TagKey'
  TagResourceRequest:
    type: object
    required:
      - tags
    properties:
      tags:
        $ref: '#/definitions/Tags'
        description: The new or modified tags for the resource.
  TransitionEvent:
    type: object
    required:
      - eventName
      - condition
      - nextState
    properties:
      eventName:
        $ref: '#/definitions/EventName'
        description: The name of the transition event.
      condition:
        $ref: '#/definitions/Condition'
        description: '[Required] A Boolean expression that when TRUE causes the actions to be performed and the <code>"nextState"</code> to be entered.'
      actions:
        $ref: '#/definitions/Actions'
        description: The actions to be performed.
      nextState:
        $ref: '#/definitions/StateName'
        description: The next state to enter.
    description: Specifies the actions performed and the next state entered when a <code>"condition"</code> evaluates to TRUE.
  UntagResourceRequest:
    type: object
    properties: {}
  UpdateDetectorModelRequest:
    type: object
    required:
      - detectorModelDefinition
      - roleArn
    properties:
      detectorModelDefinition:
        $ref: '#/definitions/DetectorModelDefinition'
        description: Information that defines how a detector operates.
      detectorModelDescription:
        $ref: '#/definitions/DetectorModelDescription'
        description: A brief description of the detector model.
      roleArn:
        $ref: '#/definitions/AmazonResourceName'
        description: The ARN of the role that grants permission to AWS IoT Events to perform its operations.
      evaluationMethod:
        $ref: '#/definitions/EvaluationMethod'
        description: 'Information about the order in which events are evaluated and how actions are executed. '
  UpdateInputRequest:
    type: object
    required:
      - inputDefinition
    properties:
      inputDescription:
        $ref: '#/definitions/InputDescription'
        description: A brief description of the input.
      inputDefinition:
        $ref: '#/definitions/InputDefinition'
        description: The definition of the input.
